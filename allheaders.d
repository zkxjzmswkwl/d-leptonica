/*====================================================================*
 -  Copyright (C) 2001 Leptonica.  All rights reserved.
 -
 -  Redistribution and use in source and binary forms, with or without
 -  modification, are permitted provided that the following conditions
 -  are met:
 -  1. Redistributions of source code must retain the above copyright
 -     notice, this list of conditions and the following disclaimer.
 -  2. Redistributions in binary form must reproduce the above
 -     copyright notice, this list of conditions and the following
 -     disclaimer in the documentation and/or other materials
 -     provided with the distribution.
 -
 -  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 -  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 -  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 -  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL ANY
 -  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 -  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 -  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 -  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 -  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 -  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 -  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *====================================================================*/

import core.stdc.stdio;
import watershed;
import environ;
import regutils;
import stringcode;
import sudoku;
import imageio;
import queue;
import ptra;
import recog;
import rbtree;
import list;
import hashmap;
import heap;
import gplot;
import stack;
import colorfill;
import dewarp;
import jbclass;
import ccbord;
import morph;
import array;
import bbuffer;
import bmf;
import pix;


extern (C):

enum LIBLEPT_MAJOR_VERSION = 1;
enum LIBLEPT_MINOR_VERSION = 82;
enum LIBLEPT_PATCH_VERSION = 0;

/*
 *  These prototypes were autogen'd by xtractprotos, v. 1.5
 */

/* __cplusplus */

PIX* pixCleanBackgroundToWhite (PIX* pixs, PIX* pixim, PIX* pixg, float gamma, int blackval, int whiteval);
PIX* pixBackgroundNormSimple (PIX* pixs, PIX* pixim, PIX* pixg);
PIX* pixBackgroundNorm (PIX* pixs, PIX* pixim, PIX* pixg, int sx, int sy, int thresh, int mincount, int bgval, int smoothx, int smoothy);
PIX* pixBackgroundNormMorph (PIX* pixs, PIX* pixim, int reduction, int size, int bgval);
int pixBackgroundNormGrayArray (PIX* pixs, PIX* pixim, int sx, int sy, int thresh, int mincount, int bgval, int smoothx, int smoothy, PIX** ppixd);
int pixBackgroundNormRGBArrays (PIX* pixs, PIX* pixim, PIX* pixg, int sx, int sy, int thresh, int mincount, int bgval, int smoothx, int smoothy, PIX** ppixr, PIX** ppixg, PIX** ppixb);
int pixBackgroundNormGrayArrayMorph (PIX* pixs, PIX* pixim, int reduction, int size, int bgval, PIX** ppixd);
int pixBackgroundNormRGBArraysMorph (PIX* pixs, PIX* pixim, int reduction, int size, int bgval, PIX** ppixr, PIX** ppixg, PIX** ppixb);
int pixGetBackgroundGrayMap (PIX* pixs, PIX* pixim, int sx, int sy, int thresh, int mincount, PIX** ppixd);
int pixGetBackgroundRGBMap (PIX* pixs, PIX* pixim, PIX* pixg, int sx, int sy, int thresh, int mincount, PIX** ppixmr, PIX** ppixmg, PIX** ppixmb);
int pixGetBackgroundGrayMapMorph (PIX* pixs, PIX* pixim, int reduction, int size, PIX** ppixm);
int pixGetBackgroundRGBMapMorph (PIX* pixs, PIX* pixim, int reduction, int size, PIX** ppixmr, PIX** ppixmg, PIX** ppixmb);
int pixFillMapHoles (PIX* pix, int nx, int ny, int filltype);
PIX* pixExtendByReplication (PIX* pixs, int addw, int addh);
int pixSmoothConnectedRegions (PIX* pixs, PIX* pixm, int factor);
PIX* pixGetInvBackgroundMap (PIX* pixs, int bgval, int smoothx, int smoothy);
PIX* pixApplyInvBackgroundGrayMap (PIX* pixs, PIX* pixm, int sx, int sy);
PIX* pixApplyInvBackgroundRGBMap (PIX* pixs, PIX* pixmr, PIX* pixmg, PIX* pixmb, int sx, int sy);
PIX* pixApplyVariableGrayMap (PIX* pixs, PIX* pixg, int target);
PIX* pixGlobalNormRGB (PIX* pixd, PIX* pixs, int rval, int gval, int bval, int mapval);
PIX* pixGlobalNormNoSatRGB (PIX* pixd, PIX* pixs, int rval, int gval, int bval, int factor, float rank);
int pixThresholdSpreadNorm (PIX* pixs, int filtertype, int edgethresh, int smoothx, int smoothy, float gamma, int minval, int maxval, int targetthresh, PIX** ppixth, PIX** ppixb, PIX** ppixd);
PIX* pixBackgroundNormFlex (PIX* pixs, int sx, int sy, int smoothx, int smoothy, int delta);
PIX* pixContrastNorm (PIX* pixd, PIX* pixs, int sx, int sy, int mindiff, int smoothx, int smoothy);
PIX* pixAffineSampledPta (PIX* pixs, PTA* ptad, PTA* ptas, int incolor);
PIX* pixAffineSampled (PIX* pixs, float* vc, int incolor);
PIX* pixAffinePta (PIX* pixs, PTA* ptad, PTA* ptas, int incolor);
PIX* pixAffine (PIX* pixs, float* vc, int incolor);
PIX* pixAffinePtaColor (PIX* pixs, PTA* ptad, PTA* ptas, uint colorval);
PIX* pixAffineColor (PIX* pixs, float* vc, uint colorval);
PIX* pixAffinePtaGray (PIX* pixs, PTA* ptad, PTA* ptas, ubyte grayval);
PIX* pixAffineGray (PIX* pixs, float* vc, ubyte grayval);
PIX* pixAffinePtaWithAlpha (PIX* pixs, PTA* ptad, PTA* ptas, PIX* pixg, float fract, int border);
int getAffineXformCoeffs (PTA* ptas, PTA* ptad, float** pvc);
int affineInvertXform (float* vc, float** pvci);
int affineXformSampledPt (float* vc, int x, int y, int* pxp, int* pyp);
int affineXformPt (float* vc, int x, int y, float* pxp, float* pyp);
int linearInterpolatePixelColor (uint* datas, int wpls, int w, int h, float x, float y, uint colorval, uint* pval);
int linearInterpolatePixelGray (uint* datas, int wpls, int w, int h, float x, float y, int grayval, int* pval);
int gaussjordan (float** a, float* b, int n);
PIX* pixAffineSequential (PIX* pixs, PTA* ptad, PTA* ptas, int bw, int bh);
float* createMatrix2dTranslate (float transx, float transy);
float* createMatrix2dScale (float scalex, float scaley);
float* createMatrix2dRotate (float xc, float yc, float angle);
PTA* ptaTranslate (PTA* ptas, float transx, float transy);
PTA* ptaScale (PTA* ptas, float scalex, float scaley);
PTA* ptaRotate (PTA* ptas, float xc, float yc, float angle);
BOXA* boxaTranslate (BOXA* boxas, float transx, float transy);
BOXA* boxaScale (BOXA* boxas, float scalex, float scaley);
BOXA* boxaRotate (BOXA* boxas, float xc, float yc, float angle);
PTA* ptaAffineTransform (PTA* ptas, float* mat);
BOXA* boxaAffineTransform (BOXA* boxas, float* mat);
int l_productMatVec (float* mat, float* vecs, float* vecd, int size);
int l_productMat2 (float* mat1, float* mat2, float* matd, int size);
int l_productMat3 (float* mat1, float* mat2, float* mat3, float* matd, int size);
int l_productMat4 (float* mat1, float* mat2, float* mat3, float* mat4, float* matd, int size);
int l_getDataBit (const(void)* line, int n);
void l_setDataBit (void* line, int n);
void l_clearDataBit (void* line, int n);
void l_setDataBitVal (void* line, int n, int val);
int l_getDataDibit (const(void)* line, int n);
void l_setDataDibit (void* line, int n, int val);
void l_clearDataDibit (void* line, int n);
int l_getDataQbit (const(void)* line, int n);
void l_setDataQbit (void* line, int n, int val);
void l_clearDataQbit (void* line, int n);
int l_getDataByte (const(void)* line, int n);
void l_setDataByte (void* line, int n, int val);
int l_getDataTwoBytes (const(void)* line, int n);
void l_setDataTwoBytes (void* line, int n, int val);
int l_getDataFourBytes (const(void)* line, int n);
void l_setDataFourBytes (void* line, int n, int val);
char* barcodeDispatchDecoder (char* barstr, int format, int debugflag);
int barcodeFormatIsSupported (int format);
NUMA* pixFindBaselines (PIX* pixs, PTA** ppta, PIXA* pixadb);
PIX* pixDeskewLocal (PIX* pixs, int nslices, int redsweep, int redsearch, float sweeprange, float sweepdelta, float minbsdelta);
int pixGetLocalSkewTransform (PIX* pixs, int nslices, int redsweep, int redsearch, float sweeprange, float sweepdelta, float minbsdelta, PTA** pptas, PTA** pptad);
NUMA* pixGetLocalSkewAngles (PIX* pixs, int nslices, int redsweep, int redsearch, float sweeprange, float sweepdelta, float minbsdelta, float* pa, float* pb, int debug_);
L_BBUFFER* bbufferCreate (const(ubyte)* indata, int nalloc);
void bbufferDestroy (L_BBUFFER** pbb);
ubyte* bbufferDestroyAndSaveData (L_BBUFFER** pbb, size_t* pnbytes);
int bbufferRead (L_BBUFFER* bb, ubyte* src, int nbytes);
int bbufferReadStream (L_BBUFFER* bb, FILE* fp, int nbytes);
int bbufferExtendArray (L_BBUFFER* bb, int nbytes);
int bbufferWrite (L_BBUFFER* bb, ubyte* dest, size_t nbytes, size_t* pnout);
int bbufferWriteStream (L_BBUFFER* bb, FILE* fp, size_t nbytes, size_t* pnout);
PIX* pixBilateral (PIX* pixs, float spatial_stdev, float range_stdev, int ncomps, int reduction);
PIX* pixBilateralGray (PIX* pixs, float spatial_stdev, float range_stdev, int ncomps, int reduction);
PIX* pixBilateralExact (PIX* pixs, L_KERNEL* spatial_kel, L_KERNEL* range_kel);
PIX* pixBilateralGrayExact (PIX* pixs, L_KERNEL* spatial_kel, L_KERNEL* range_kel);
PIX* pixBlockBilateralExact (PIX* pixs, float spatial_stdev, float range_stdev);
L_KERNEL* makeRangeKernel (float range_stdev);
PIX* pixBilinearSampledPta (PIX* pixs, PTA* ptad, PTA* ptas, int incolor);
PIX* pixBilinearSampled (PIX* pixs, float* vc, int incolor);
PIX* pixBilinearPta (PIX* pixs, PTA* ptad, PTA* ptas, int incolor);
PIX* pixBilinear (PIX* pixs, float* vc, int incolor);
PIX* pixBilinearPtaColor (PIX* pixs, PTA* ptad, PTA* ptas, uint colorval);
PIX* pixBilinearColor (PIX* pixs, float* vc, uint colorval);
PIX* pixBilinearPtaGray (PIX* pixs, PTA* ptad, PTA* ptas, ubyte grayval);
PIX* pixBilinearGray (PIX* pixs, float* vc, ubyte grayval);
PIX* pixBilinearPtaWithAlpha (PIX* pixs, PTA* ptad, PTA* ptas, PIX* pixg, float fract, int border);
int getBilinearXformCoeffs (PTA* ptas, PTA* ptad, float** pvc);
int bilinearXformSampledPt (float* vc, int x, int y, int* pxp, int* pyp);
int bilinearXformPt (float* vc, int x, int y, float* pxp, float* pyp);
int pixOtsuAdaptiveThreshold (PIX* pixs, int sx, int sy, int smoothx, int smoothy, float scorefract, PIX** ppixth, PIX** ppixd);
PIX* pixOtsuThreshOnBackgroundNorm (PIX* pixs, PIX* pixim, int sx, int sy, int thresh, int mincount, int bgval, int smoothx, int smoothy, float scorefract, int* pthresh);
PIX* pixMaskedThreshOnBackgroundNorm (PIX* pixs, PIX* pixim, int sx, int sy, int thresh, int mincount, int smoothx, int smoothy, float scorefract, int* pthresh);
int pixSauvolaBinarizeTiled (PIX* pixs, int whsize, float factor, int nx, int ny, PIX** ppixth, PIX** ppixd);
int pixSauvolaBinarize (PIX* pixs, int whsize, float factor, int addborder, PIX** ppixm, PIX** ppixsd, PIX** ppixth, PIX** ppixd);
PIX* pixSauvolaOnContrastNorm (PIX* pixs, int mindiff, PIX** ppixn, PIX** ppixth);
PIX* pixThreshOnDoubleNorm (PIX* pixs, int mindiff);
int pixThresholdByConnComp (PIX* pixs, PIX* pixm, int start, int end, int incr, float thresh48, float threshdiff, int* pglobthresh, PIX** ppixd, int debugflag);
int pixThresholdByHisto (PIX* pixs, int factor, int halfw, float delta, int* pthresh, PIX** ppixd, PIX** ppixhisto);
PIX* pixExpandBinaryReplicate (PIX* pixs, int xfact, int yfact);
PIX* pixExpandBinaryPower2 (PIX* pixs, int factor);
PIX* pixReduceBinary2 (PIX* pixs, ubyte* intab);
PIX* pixReduceRankBinaryCascade (PIX* pixs, int level1, int level2, int level3, int level4);
PIX* pixReduceRankBinary2 (PIX* pixs, int level, ubyte* intab);
ubyte* makeSubsampleTab2x ();
PIX* pixBlend (PIX* pixs1, PIX* pixs2, int x, int y, float fract);
PIX* pixBlendMask (PIX* pixd, PIX* pixs1, PIX* pixs2, int x, int y, float fract, int type);
PIX* pixBlendGray (PIX* pixd, PIX* pixs1, PIX* pixs2, int x, int y, float fract, int type, int transparent, uint transpix);
PIX* pixBlendGrayInverse (PIX* pixd, PIX* pixs1, PIX* pixs2, int x, int y, float fract);
PIX* pixBlendColor (PIX* pixd, PIX* pixs1, PIX* pixs2, int x, int y, float fract, int transparent, uint transpix);
PIX* pixBlendColorByChannel (PIX* pixd, PIX* pixs1, PIX* pixs2, int x, int y, float rfract, float gfract, float bfract, int transparent, uint transpix);
PIX* pixBlendGrayAdapt (PIX* pixd, PIX* pixs1, PIX* pixs2, int x, int y, float fract, int shift);
PIX* pixFadeWithGray (PIX* pixs, PIX* pixb, float factor, int type);
PIX* pixBlendHardLight (PIX* pixd, PIX* pixs1, PIX* pixs2, int x, int y, float fract);
int pixBlendCmap (PIX* pixs, PIX* pixb, int x, int y, int sindex);
PIX* pixBlendWithGrayMask (PIX* pixs1, PIX* pixs2, PIX* pixg, int x, int y);
PIX* pixBlendBackgroundToColor (PIX* pixd, PIX* pixs, BOX* box, uint color, float gamma, int minval, int maxval);
PIX* pixMultiplyByColor (PIX* pixd, PIX* pixs, BOX* box, uint color);
PIX* pixAlphaBlendUniform (PIX* pixs, uint color);
PIX* pixAddAlphaToBlend (PIX* pixs, float fract, int invert);
PIX* pixSetAlphaOverWhite (PIX* pixs);
int pixLinearEdgeFade (PIX* pixs, int dir, int fadeto, float distfract, float maxfade);
L_BMF* bmfCreate (const(char)* dir, int fontsize);
void bmfDestroy (L_BMF** pbmf);
PIX* bmfGetPix (L_BMF* bmf, char chr);
int bmfGetWidth (L_BMF* bmf, char chr, int* pw);
int bmfGetBaseline (L_BMF* bmf, char chr, int* pbaseline);
PIXA* pixaGetFont (const(char)* dir, int fontsize, int* pbl0, int* pbl1, int* pbl2);
int pixaSaveFont (const(char)* indir, const(char)* outdir, int fontsize);
PIX* pixReadStreamBmp (FILE* fp);
PIX* pixReadMemBmp (const(ubyte)* cdata, size_t size);
int pixWriteStreamBmp (FILE* fp, PIX* pix);
int pixWriteMemBmp (ubyte** pfdata, size_t* pfsize, PIX* pixs);
PIXA* l_bootnum_gen1 ();
PIXA* l_bootnum_gen2 ();
PIXA* l_bootnum_gen3 ();
PIXA* l_bootnum_gen4 (int nsamp);
BOX* boxCreate (int x, int y, int w, int h);
BOX* boxCreateValid (int x, int y, int w, int h);
BOX* boxCopy (BOX* box);
BOX* boxClone (BOX* box);
void boxDestroy (BOX** pbox);
int boxGetGeometry (BOX* box, int* px, int* py, int* pw, int* ph);
int boxSetGeometry (BOX* box, int x, int y, int w, int h);
int boxGetSideLocations (BOX* box, int* pl, int* pr, int* pt, int* pb);
int boxSetSideLocations (BOX* box, int l, int r, int t, int b);
int boxGetRefcount (BOX* box);
int boxChangeRefcount (BOX* box, int delta);
int boxIsValid (BOX* box, int* pvalid);
BOXA* boxaCreate (int n);
BOXA* boxaCopy (BOXA* boxa, int copyflag);
void boxaDestroy (BOXA** pboxa);
int boxaAddBox (BOXA* boxa, BOX* box, int copyflag);
int boxaExtendArray (BOXA* boxa);
int boxaExtendArrayToSize (BOXA* boxa, size_t size);
int boxaGetCount (BOXA* boxa);
int boxaGetValidCount (BOXA* boxa);
BOX* boxaGetBox (BOXA* boxa, int index, int accessflag);
BOX* boxaGetValidBox (BOXA* boxa, int index, int accessflag);
NUMA* boxaFindInvalidBoxes (BOXA* boxa);
int boxaGetBoxGeometry (BOXA* boxa, int index, int* px, int* py, int* pw, int* ph);
int boxaIsFull (BOXA* boxa, int* pfull);
int boxaReplaceBox (BOXA* boxa, int index, BOX* box);
int boxaInsertBox (BOXA* boxa, int index, BOX* box);
int boxaRemoveBox (BOXA* boxa, int index);
int boxaRemoveBoxAndSave (BOXA* boxa, int index, BOX** pbox);
BOXA* boxaSaveValid (BOXA* boxas, int copyflag);
int boxaInitFull (BOXA* boxa, BOX* box);
int boxaClear (BOXA* boxa);
BOXAA* boxaaCreate (int n);
BOXAA* boxaaCopy (BOXAA* baas, int copyflag);
void boxaaDestroy (BOXAA** pbaa);
int boxaaAddBoxa (BOXAA* baa, BOXA* ba, int copyflag);
int boxaaExtendArray (BOXAA* baa);
int boxaaExtendArrayToSize (BOXAA* baa, int size);
int boxaaGetCount (BOXAA* baa);
int boxaaGetBoxCount (BOXAA* baa);
BOXA* boxaaGetBoxa (BOXAA* baa, int index, int accessflag);
BOX* boxaaGetBox (BOXAA* baa, int iboxa, int ibox, int accessflag);
int boxaaInitFull (BOXAA* baa, BOXA* boxa);
int boxaaExtendWithInit (BOXAA* baa, int maxindex, BOXA* boxa);
int boxaaReplaceBoxa (BOXAA* baa, int index, BOXA* boxa);
int boxaaInsertBoxa (BOXAA* baa, int index, BOXA* boxa);
int boxaaRemoveBoxa (BOXAA* baa, int index);
int boxaaAddBox (BOXAA* baa, int index, BOX* box, int accessflag);
BOXAA* boxaaReadFromFiles (const(char)* dirname, const(char)* substr, int first, int nfiles);
BOXAA* boxaaRead (const(char)* filename);
BOXAA* boxaaReadStream (FILE* fp);
BOXAA* boxaaReadMem (const(ubyte)* data, size_t size);
int boxaaWrite (const(char)* filename, BOXAA* baa);
int boxaaWriteStream (FILE* fp, BOXAA* baa);
int boxaaWriteMem (ubyte** pdata, size_t* psize, BOXAA* baa);
BOXA* boxaRead (const(char)* filename);
BOXA* boxaReadStream (FILE* fp);
BOXA* boxaReadMem (const(ubyte)* data, size_t size);
int boxaWriteDebug (const(char)* filename, BOXA* boxa);
int boxaWrite (const(char)* filename, BOXA* boxa);
int boxaWriteStream (FILE* fp, BOXA* boxa);
int boxaWriteStderr (BOXA* boxa);
int boxaWriteMem (ubyte** pdata, size_t* psize, BOXA* boxa);
int boxPrintStreamInfo (FILE* fp, BOX* box);
int boxContains (BOX* box1, BOX* box2, int* presult);
int boxIntersects (BOX* box1, BOX* box2, int* presult);
BOXA* boxaContainedInBox (BOXA* boxas, BOX* box);
int boxaContainedInBoxCount (BOXA* boxa, BOX* box, int* pcount);
int boxaContainedInBoxa (BOXA* boxa1, BOXA* boxa2, int* pcontained);
BOXA* boxaIntersectsBox (BOXA* boxas, BOX* box);
int boxaIntersectsBoxCount (BOXA* boxa, BOX* box, int* pcount);
BOXA* boxaClipToBox (BOXA* boxas, BOX* box);
BOXA* boxaCombineOverlaps (BOXA* boxas, PIXA* pixadb);
int boxaCombineOverlapsInPair (BOXA* boxas1, BOXA* boxas2, BOXA** pboxad1, BOXA** pboxad2, PIXA* pixadb);
BOX* boxOverlapRegion (BOX* box1, BOX* box2);
BOX* boxBoundingRegion (BOX* box1, BOX* box2);
int boxOverlapFraction (BOX* box1, BOX* box2, float* pfract);
int boxOverlapArea (BOX* box1, BOX* box2, int* parea);
BOXA* boxaHandleOverlaps (BOXA* boxas, int op, int range, float min_overlap, float max_ratio, NUMA** pnamap);
int boxOverlapDistance (BOX* box1, BOX* box2, int* ph_ovl, int* pv_ovl);
int boxSeparationDistance (BOX* box1, BOX* box2, int* ph_sep, int* pv_sep);
int boxCompareSize (BOX* box1, BOX* box2, int type, int* prel);
int boxContainsPt (BOX* box, float x, float y, int* pcontains);
BOX* boxaGetNearestToPt (BOXA* boxa, int x, int y);
BOX* boxaGetNearestToLine (BOXA* boxa, int x, int y);
int boxaFindNearestBoxes (BOXA* boxa, int dist_select, int range, NUMAA** pnaaindex, NUMAA** pnaadist);
int boxaGetNearestByDirection (BOXA* boxa, int i, int dir, int dist_select, int range, int* pindex, int* pdist);
int boxGetCenter (BOX* box, float* pcx, float* pcy);
int boxIntersectByLine (BOX* box, int x, int y, float slope, int* px1, int* py1, int* px2, int* py2, int* pn);
BOX* boxClipToRectangle (BOX* box, int wi, int hi);
int boxClipToRectangleParams (BOX* box, int w, int h, int* pxstart, int* pystart, int* pxend, int* pyend, int* pbw, int* pbh);
BOX* boxRelocateOneSide (BOX* boxd, BOX* boxs, int loc, int sideflag);
BOXA* boxaAdjustSides (BOXA* boxas, int delleft, int delright, int deltop, int delbot);
int boxaAdjustBoxSides (BOXA* boxa, int index, int delleft, int delright, int deltop, int delbot);
BOX* boxAdjustSides (BOX* boxd, BOX* boxs, int delleft, int delright, int deltop, int delbot);
BOXA* boxaSetSide (BOXA* boxad, BOXA* boxas, int side, int val, int thresh);
int boxSetSide (BOX* boxs, int side, int val, int thresh);
BOXA* boxaAdjustWidthToTarget (BOXA* boxad, BOXA* boxas, int sides, int target, int thresh);
BOXA* boxaAdjustHeightToTarget (BOXA* boxad, BOXA* boxas, int sides, int target, int thresh);
int boxEqual (BOX* box1, BOX* box2, int* psame);
int boxaEqual (BOXA* boxa1, BOXA* boxa2, int maxdist, NUMA** pnaindex, int* psame);
int boxSimilar (BOX* box1, BOX* box2, int leftdiff, int rightdiff, int topdiff, int botdiff, int* psimilar);
int boxaSimilar (BOXA* boxa1, BOXA* boxa2, int leftdiff, int rightdiff, int topdiff, int botdiff, int debug_, int* psimilar, NUMA** pnasim);
int boxaJoin (BOXA* boxad, BOXA* boxas, int istart, int iend);
int boxaaJoin (BOXAA* baad, BOXAA* baas, int istart, int iend);
int boxaSplitEvenOdd (BOXA* boxa, int fillflag, BOXA** pboxae, BOXA** pboxao);
BOXA* boxaMergeEvenOdd (BOXA* boxae, BOXA* boxao, int fillflag);
BOXA* boxaTransform (BOXA* boxas, int shiftx, int shifty, float scalex, float scaley);
BOX* boxTransform (BOX* box, int shiftx, int shifty, float scalex, float scaley);
BOXA* boxaTransformOrdered (BOXA* boxas, int shiftx, int shifty, float scalex, float scaley, int xcen, int ycen, float angle, int order);
BOX* boxTransformOrdered (BOX* boxs, int shiftx, int shifty, float scalex, float scaley, int xcen, int ycen, float angle, int order);
BOXA* boxaRotateOrth (BOXA* boxas, int w, int h, int rotation);
BOX* boxRotateOrth (BOX* box, int w, int h, int rotation);
BOXA* boxaShiftWithPta (BOXA* boxas, PTA* pta, int dir);
BOXA* boxaSort (BOXA* boxas, int sorttype, int sortorder, NUMA** pnaindex);
BOXA* boxaBinSort (BOXA* boxas, int sorttype, int sortorder, NUMA** pnaindex);
BOXA* boxaSortByIndex (BOXA* boxas, NUMA* naindex);
BOXAA* boxaSort2d (BOXA* boxas, NUMAA** pnaad, int delta1, int delta2, int minh1);
BOXAA* boxaSort2dByIndex (BOXA* boxas, NUMAA* naa);
int boxaExtractAsNuma (BOXA* boxa, NUMA** pnal, NUMA** pnat, NUMA** pnar, NUMA** pnab, NUMA** pnaw, NUMA** pnah, int keepinvalid);
int boxaExtractAsPta (BOXA* boxa, PTA** pptal, PTA** pptat, PTA** pptar, PTA** pptab, PTA** pptaw, PTA** pptah, int keepinvalid);
PTA* boxaExtractCorners (BOXA* boxa, int loc);
int boxaGetRankVals (BOXA* boxa, float fract, int* px, int* py, int* pr, int* pb, int* pw, int* ph);
int boxaGetMedianVals (BOXA* boxa, int* px, int* py, int* pr, int* pb, int* pw, int* ph);
int boxaGetAverageSize (BOXA* boxa, float* pw, float* ph);
int boxaaGetExtent (BOXAA* baa, int* pw, int* ph, BOX** pbox, BOXA** pboxa);
BOXA* boxaaFlattenToBoxa (BOXAA* baa, NUMA** pnaindex, int copyflag);
BOXA* boxaaFlattenAligned (BOXAA* baa, int num, BOX* fillerbox, int copyflag);
BOXAA* boxaEncapsulateAligned (BOXA* boxa, int num, int copyflag);
BOXAA* boxaaTranspose (BOXAA* baas);
int boxaaAlignBox (BOXAA* baa, BOX* box, int delta, int* pindex);
PIX* pixMaskConnComp (PIX* pixs, int connectivity, BOXA** pboxa);
PIX* pixMaskBoxa (PIX* pixd, PIX* pixs, BOXA* boxa, int op);
PIX* pixPaintBoxa (PIX* pixs, BOXA* boxa, uint val);
PIX* pixSetBlackOrWhiteBoxa (PIX* pixs, BOXA* boxa, int op);
PIX* pixPaintBoxaRandom (PIX* pixs, BOXA* boxa);
PIX* pixBlendBoxaRandom (PIX* pixs, BOXA* boxa, float fract);
PIX* pixDrawBoxa (PIX* pixs, BOXA* boxa, int width, uint val);
PIX* pixDrawBoxaRandom (PIX* pixs, BOXA* boxa, int width);
PIX* boxaaDisplay (PIX* pixs, BOXAA* baa, int linewba, int linewb, uint colorba, uint colorb, int w, int h);
PIXA* pixaDisplayBoxaa (PIXA* pixas, BOXAA* baa, int colorflag, int width);
BOXA* pixSplitIntoBoxa (PIX* pixs, int minsum, int skipdist, int delta, int maxbg, int maxcomps, int remainder);
BOXA* pixSplitComponentIntoBoxa (PIX* pix, BOX* box, int minsum, int skipdist, int delta, int maxbg, int maxcomps, int remainder);
BOXA* makeMosaicStrips (int w, int h, int direction, int size);
int boxaCompareRegions (BOXA* boxa1, BOXA* boxa2, int areathresh, int* pnsame, float* pdiffarea, float* pdiffxor, PIX** ppixdb);
BOX* pixSelectLargeULComp (PIX* pixs, float areaslop, int yslop, int connectivity);
BOX* boxaSelectLargeULBox (BOXA* boxas, float areaslop, int yslop);
BOXA* boxaSelectRange (BOXA* boxas, int first, int last, int copyflag);
BOXAA* boxaaSelectRange (BOXAA* baas, int first, int last, int copyflag);
BOXA* boxaSelectBySize (BOXA* boxas, int width, int height, int type, int relation, int* pchanged);
NUMA* boxaMakeSizeIndicator (BOXA* boxa, int width, int height, int type, int relation);
BOXA* boxaSelectByArea (BOXA* boxas, int area, int relation, int* pchanged);
NUMA* boxaMakeAreaIndicator (BOXA* boxa, int area, int relation);
BOXA* boxaSelectByWHRatio (BOXA* boxas, float ratio, int relation, int* pchanged);
NUMA* boxaMakeWHRatioIndicator (BOXA* boxa, float ratio, int relation);
BOXA* boxaSelectWithIndicator (BOXA* boxas, NUMA* na, int* pchanged);
BOXA* boxaPermutePseudorandom (BOXA* boxas);
BOXA* boxaPermuteRandom (BOXA* boxad, BOXA* boxas);
int boxaSwapBoxes (BOXA* boxa, int i, int j);
PTA* boxaConvertToPta (BOXA* boxa, int ncorners);
BOXA* ptaConvertToBoxa (PTA* pta, int ncorners);
PTA* boxConvertToPta (BOX* box, int ncorners);
BOX* ptaConvertToBox (PTA* pta);
int boxaGetExtent (BOXA* boxa, int* pw, int* ph, BOX** pbox);
int boxaGetCoverage (BOXA* boxa, int wc, int hc, int exactflag, float* pfract);
int boxaaSizeRange (BOXAA* baa, int* pminw, int* pminh, int* pmaxw, int* pmaxh);
int boxaSizeRange (BOXA* boxa, int* pminw, int* pminh, int* pmaxw, int* pmaxh);
int boxaLocationRange (BOXA* boxa, int* pminx, int* pminy, int* pmaxx, int* pmaxy);
int boxaGetSizes (BOXA* boxa, NUMA** pnaw, NUMA** pnah);
int boxaGetArea (BOXA* boxa, int* parea);
PIX* boxaDisplayTiled (BOXA* boxas, PIXA* pixa, int first, int last, int maxwidth, int linewidth, float scalefactor, int background, int spacing, int border);
BOXA* boxaSmoothSequenceMedian (BOXA* boxas, int halfwin, int subflag, int maxdiff, int extrapixels, int debug_);
BOXA* boxaWindowedMedian (BOXA* boxas, int halfwin, int debug_);
BOXA* boxaModifyWithBoxa (BOXA* boxas, BOXA* boxam, int subflag, int maxdiff, int extrapixels);
BOXA* boxaReconcilePairWidth (BOXA* boxas, int delw, int op, float factor, NUMA* na);
int boxaSizeConsistency (BOXA* boxas, int type, float threshp, float threshm, float* pfvarp, float* pfvarm, int* psame);
BOXA* boxaReconcileAllByMedian (BOXA* boxas, int select1, int select2, int thresh, int extra, PIXA* pixadb);
BOXA* boxaReconcileSidesByMedian (BOXA* boxas, int select, int thresh, int extra, PIXA* pixadb);
BOXA* boxaReconcileSizeByMedian (BOXA* boxas, int type, float dfract, float sfract, float factor, NUMA** pnadelw, NUMA** pnadelh, float* pratiowh);
int boxaPlotSides (BOXA* boxa, const(char)* plotname, NUMA** pnal, NUMA** pnat, NUMA** pnar, NUMA** pnab, PIX** ppixd);
int boxaPlotSizes (BOXA* boxa, const(char)* plotname, NUMA** pnaw, NUMA** pnah, PIX** ppixd);
BOXA* boxaFillSequence (BOXA* boxas, int useflag, int debug_);
int boxaSizeVariation (BOXA* boxa, int type, float* pdel_evenodd, float* prms_even, float* prms_odd, float* prms_all);
int boxaMedianDimensions (BOXA* boxas, int* pmedw, int* pmedh, int* pmedwe, int* pmedwo, int* pmedhe, int* pmedho, NUMA** pnadelw, NUMA** pnadelh);
L_BYTEA* l_byteaCreate (size_t nbytes);
L_BYTEA* l_byteaInitFromMem (const(ubyte)* data, size_t size);
L_BYTEA* l_byteaInitFromFile (const(char)* fname);
L_BYTEA* l_byteaInitFromStream (FILE* fp);
L_BYTEA* l_byteaCopy (L_BYTEA* bas, int copyflag);
void l_byteaDestroy (L_BYTEA** pba);
size_t l_byteaGetSize (L_BYTEA* ba);
ubyte* l_byteaGetData (L_BYTEA* ba, size_t* psize);
ubyte* l_byteaCopyData (L_BYTEA* ba, size_t* psize);
int l_byteaAppendData (L_BYTEA* ba, const(ubyte)* newdata, size_t newbytes);
int l_byteaAppendString (L_BYTEA* ba, const(char)* str);
int l_byteaJoin (L_BYTEA* ba1, L_BYTEA** pba2);
int l_byteaSplit (L_BYTEA* ba1, size_t splitloc, L_BYTEA** pba2);
int l_byteaFindEachSequence (L_BYTEA* ba, const(ubyte)* sequence, size_t seqlen, L_DNA** pda);
int l_byteaWrite (const(char)* fname, L_BYTEA* ba, size_t startloc, size_t nbytes);
int l_byteaWriteStream (FILE* fp, L_BYTEA* ba, size_t startloc, size_t nbytes);
CCBORDA* ccbaCreate (PIX* pixs, int n);
void ccbaDestroy (CCBORDA** pccba);
CCBORD* ccbCreate (PIX* pixs);
void ccbDestroy (CCBORD** pccb);
int ccbaAddCcb (CCBORDA* ccba, CCBORD* ccb);
int ccbaGetCount (CCBORDA* ccba);
CCBORD* ccbaGetCcb (CCBORDA* ccba, int index);
CCBORDA* pixGetAllCCBorders (PIX* pixs);
PTAA* pixGetOuterBordersPtaa (PIX* pixs);
int pixGetOuterBorder (CCBORD* ccb, PIX* pixs, BOX* box);
int ccbaGenerateGlobalLocs (CCBORDA* ccba);
int ccbaGenerateStepChains (CCBORDA* ccba);
int ccbaStepChainsToPixCoords (CCBORDA* ccba, int coordtype);
int ccbaGenerateSPGlobalLocs (CCBORDA* ccba, int ptsflag);
int ccbaGenerateSinglePath (CCBORDA* ccba);
PTA* getCutPathForHole (PIX* pix, PTA* pta, BOX* boxinner, int* pdir, int* plen);
PIX* ccbaDisplayBorder (CCBORDA* ccba);
PIX* ccbaDisplaySPBorder (CCBORDA* ccba);
PIX* ccbaDisplayImage1 (CCBORDA* ccba);
PIX* ccbaDisplayImage2 (CCBORDA* ccba);
int ccbaWrite (const(char)* filename, CCBORDA* ccba);
int ccbaWriteStream (FILE* fp, CCBORDA* ccba);
CCBORDA* ccbaRead (const(char)* filename);
CCBORDA* ccbaReadStream (FILE* fp);
int ccbaWriteSVG (const(char)* filename, CCBORDA* ccba);
char* ccbaWriteSVGString (CCBORDA* ccba);
PIXA* pixaThinConnected (PIXA* pixas, int type, int connectivity, int maxiters);
PIX* pixThinConnected (PIX* pixs, int type, int connectivity, int maxiters);
PIX* pixThinConnectedBySet (PIX* pixs, int type, SELA* sela, int maxiters);
SELA* selaMakeThinSets (int index, int debug_);
int pixFindCheckerboardCorners (PIX* pixs, int size, int dilation, int nsels, PIX** ppix_corners, PTA** ppta_corners, PIXA* pixadb);
int jbCorrelation (const(char)* dirin, float thresh, float weight, int components, const(char)* rootname, int firstpage, int npages, int renderflag);
int jbRankHaus (const(char)* dirin, int size, float rank, int components, const(char)* rootname, int firstpage, int npages, int renderflag);
JBCLASSER* jbWordsInTextlines (const(char)* dirin, int reduction, int maxwidth, int maxheight, float thresh, float weight, NUMA** pnatl, int firstpage, int npages);
int pixGetWordsInTextlines (PIX* pixs, int minwidth, int minheight, int maxwidth, int maxheight, BOXA** pboxad, PIXA** ppixad, NUMA** pnai);
int pixGetWordBoxesInTextlines (PIX* pixs, int minwidth, int minheight, int maxwidth, int maxheight, BOXA** pboxad, NUMA** pnai);
int pixFindWordAndCharacterBoxes (PIX* pixs, BOX* boxs, int thresh, BOXA** pboxaw, BOXAA** pboxaac, const(char)* debugdir);
NUMAA* boxaExtractSortedPattern (BOXA* boxa, NUMA* na);
int numaaCompareImagesByBoxes (NUMAA* naa1, NUMAA* naa2, int nperline, int nreq, int maxshiftx, int maxshifty, int delx, int dely, int* psame, int debugflag);
int pixColorContent (PIX* pixs, int rref, int gref, int bref, int mingray, PIX** ppixr, PIX** ppixg, PIX** ppixb);
PIX* pixColorMagnitude (PIX* pixs, int rref, int gref, int bref, int type);
int pixColorFraction (PIX* pixs, int darkthresh, int lightthresh, int diffthresh, int factor, float* ppixfract, float* pcolorfract);
PIX* pixColorShiftWhitePoint (PIX* pixs, int rref, int gref, int bref);
PIX* pixMaskOverColorPixels (PIX* pixs, int threshdiff, int mindist);
PIX* pixMaskOverGrayPixels (PIX* pixs, int maxlimit, int satlimit);
PIX* pixMaskOverColorRange (PIX* pixs, int rmin, int rmax, int gmin, int gmax, int bmin, int bmax);
int pixFindColorRegions (PIX* pixs, PIX* pixm, int factor, int lightthresh, int darkthresh, int mindiff, int colordiff, float edgefract, float* pcolorfract, PIX** pcolormask1, PIX** pcolormask2, PIXA* pixadb);
int pixNumSignificantGrayColors (PIX* pixs, int darkthresh, int lightthresh, float minfract, int factor, int* pncolors);
int pixColorsForQuantization (PIX* pixs, int thresh, int* pncolors, int* piscolor, int debug_);
int pixNumColors (PIX* pixs, int factor, int* pncolors);
PIX* pixConvertRGBToCmapLossless (PIX* pixs);
int pixGetMostPopulatedColors (PIX* pixs, int sigbits, int factor, int ncolors, uint** parray, PIXCMAP** pcmap);
PIX* pixSimpleColorQuantize (PIX* pixs, int sigbits, int factor, int ncolors);
NUMA* pixGetRGBHistogram (PIX* pixs, int sigbits, int factor);
int makeRGBIndexTables (uint** prtab, uint** pgtab, uint** pbtab, int sigbits);
int getRGBFromIndex (uint index, int sigbits, int* prval, int* pgval, int* pbval);
int pixHasHighlightRed (PIX* pixs, int factor, float minfract, float fthresh, int* phasred, float* pratio, PIX** ppixdb);
L_COLORFILL* l_colorfillCreate (PIX* pixs, int nx, int ny);
void l_colorfillDestroy (L_COLORFILL** pcf);
int pixColorContentByLocation (L_COLORFILL* cf, int rref, int gref, int bref, int minmax, int maxdiff, int minarea, int smooth, int debug_);
PIX* pixColorFill (PIX* pixs, int minmax, int maxdiff, int smooth, int minarea, int debug_);
PIXA* makeColorfillTestData (int w, int h, int nseeds, int range);
PIX* pixColorGrayRegions (PIX* pixs, BOXA* boxa, int type, int thresh, int rval, int gval, int bval);
int pixColorGray (PIX* pixs, BOX* box, int type, int thresh, int rval, int gval, int bval);
PIX* pixColorGrayMasked (PIX* pixs, PIX* pixm, int type, int thresh, int rval, int gval, int bval);
PIX* pixSnapColor (PIX* pixd, PIX* pixs, uint srcval, uint dstval, int diff);
PIX* pixSnapColorCmap (PIX* pixd, PIX* pixs, uint srcval, uint dstval, int diff);
PIX* pixLinearMapToTargetColor (PIX* pixd, PIX* pixs, uint srcval, uint dstval);
int pixelLinearMapToTargetColor (uint scolor, uint srcmap, uint dstmap, uint* pdcolor);
PIX* pixShiftByComponent (PIX* pixd, PIX* pixs, uint srcval, uint dstval);
int pixelShiftByComponent (int rval, int gval, int bval, uint srcval, uint dstval, uint* ppixel);
int pixelFractionalShift (int rval, int gval, int bval, float fract, uint* ppixel);
PIX* pixMapWithInvariantHue (PIX* pixd, PIX* pixs, uint srcval, float fract);
PIXCMAP* pixcmapCreate (int depth);
PIXCMAP* pixcmapCreateRandom (int depth, int hasblack, int haswhite);
PIXCMAP* pixcmapCreateLinear (int d, int nlevels);
PIXCMAP* pixcmapCopy (const(PIXCMAP)* cmaps);
void pixcmapDestroy (PIXCMAP** pcmap);
int pixcmapIsValid (const(PIXCMAP)* cmap, PIX* pix, int* pvalid);
int pixcmapAddColor (PIXCMAP* cmap, int rval, int gval, int bval);
int pixcmapAddRGBA (PIXCMAP* cmap, int rval, int gval, int bval, int aval);
int pixcmapAddNewColor (PIXCMAP* cmap, int rval, int gval, int bval, int* pindex);
int pixcmapAddNearestColor (PIXCMAP* cmap, int rval, int gval, int bval, int* pindex);
int pixcmapUsableColor (PIXCMAP* cmap, int rval, int gval, int bval, int* pusable);
int pixcmapAddBlackOrWhite (PIXCMAP* cmap, int color, int* pindex);
int pixcmapSetBlackAndWhite (PIXCMAP* cmap, int setblack, int setwhite);
int pixcmapGetCount (const(PIXCMAP)* cmap);
int pixcmapGetFreeCount (PIXCMAP* cmap);
int pixcmapGetDepth (PIXCMAP* cmap);
int pixcmapGetMinDepth (PIXCMAP* cmap, int* pmindepth);
int pixcmapClear (PIXCMAP* cmap);
int pixcmapGetColor (PIXCMAP* cmap, int index, int* prval, int* pgval, int* pbval);
int pixcmapGetColor32 (PIXCMAP* cmap, int index, uint* pval32);
int pixcmapGetRGBA (PIXCMAP* cmap, int index, int* prval, int* pgval, int* pbval, int* paval);
int pixcmapGetRGBA32 (PIXCMAP* cmap, int index, uint* pval32);
int pixcmapResetColor (PIXCMAP* cmap, int index, int rval, int gval, int bval);
int pixcmapSetAlpha (PIXCMAP* cmap, int index, int aval);
int pixcmapGetIndex (PIXCMAP* cmap, int rval, int gval, int bval, int* pindex);
int pixcmapHasColor (PIXCMAP* cmap, int* pcolor);
int pixcmapIsOpaque (PIXCMAP* cmap, int* popaque);
int pixcmapNonOpaqueColorsInfo (PIXCMAP* cmap, int* pntrans, int* pmax_trans, int* pmin_opaque);
int pixcmapIsBlackAndWhite (PIXCMAP* cmap, int* pblackwhite);
int pixcmapCountGrayColors (PIXCMAP* cmap, int* pngray);
int pixcmapGetRankIntensity (PIXCMAP* cmap, float rankval, int* pindex);
int pixcmapGetNearestIndex (PIXCMAP* cmap, int rval, int gval, int bval, int* pindex);
int pixcmapGetNearestGrayIndex (PIXCMAP* cmap, int val, int* pindex);
int pixcmapGetDistanceToColor (PIXCMAP* cmap, int index, int rval, int gval, int bval, int* pdist);
int pixcmapGetRangeValues (PIXCMAP* cmap, int select, int* pminval, int* pmaxval, int* pminindex, int* pmaxindex);
PIXCMAP* pixcmapGrayToFalseColor (float gamma);
PIXCMAP* pixcmapGrayToColor (uint color);
PIXCMAP* pixcmapColorToGray (PIXCMAP* cmaps, float rwt, float gwt, float bwt);
PIXCMAP* pixcmapConvertTo4 (PIXCMAP* cmaps);
PIXCMAP* pixcmapConvertTo8 (PIXCMAP* cmaps);
PIXCMAP* pixcmapRead (const(char)* filename);
PIXCMAP* pixcmapReadStream (FILE* fp);
PIXCMAP* pixcmapReadMem (const(ubyte)* data, size_t size);
int pixcmapWrite (const(char)* filename, const(PIXCMAP)* cmap);
int pixcmapWriteStream (FILE* fp, const(PIXCMAP)* cmap);
int pixcmapWriteMem (ubyte** pdata, size_t* psize, const(PIXCMAP)* cmap);
int pixcmapToArrays (const(PIXCMAP)* cmap, int** prmap, int** pgmap, int** pbmap, int** pamap);
int pixcmapToRGBTable (PIXCMAP* cmap, uint** ptab, int* pncolors);
int pixcmapSerializeToMemory (PIXCMAP* cmap, int cpc, int* pncolors, ubyte** pdata);
PIXCMAP* pixcmapDeserializeFromMemory (ubyte* data, int cpc, int ncolors);
char* pixcmapConvertToHex (ubyte* data, int ncolors);
int pixcmapGammaTRC (PIXCMAP* cmap, float gamma, int minval, int maxval);
int pixcmapContrastTRC (PIXCMAP* cmap, float factor);
int pixcmapShiftIntensity (PIXCMAP* cmap, float fraction);
int pixcmapShiftByComponent (PIXCMAP* cmap, uint srcval, uint dstval);
PIX* pixColorMorph (PIX* pixs, int type, int hsize, int vsize);
PIX* pixOctreeColorQuant (PIX* pixs, int colors, int ditherflag);
PIX* pixOctreeColorQuantGeneral (PIX* pixs, int colors, int ditherflag, float validthresh, float colorthresh);
int makeRGBToIndexTables (int cqlevels, uint** prtab, uint** pgtab, uint** pbtab);
void getOctcubeIndexFromRGB (int rval, int gval, int bval, uint* rtab, uint* gtab, uint* btab, uint* pindex);
PIX* pixOctreeQuantByPopulation (PIX* pixs, int level, int ditherflag);
PIX* pixOctreeQuantNumColors (PIX* pixs, int maxcolors, int subsample);
PIX* pixOctcubeQuantMixedWithGray (PIX* pixs, int depth, int graylevels, int delta);
PIX* pixFixedOctcubeQuant256 (PIX* pixs, int ditherflag);
PIX* pixFewColorsOctcubeQuant1 (PIX* pixs, int level);
PIX* pixFewColorsOctcubeQuant2 (PIX* pixs, int level, NUMA* na, int ncolors, int* pnerrors);
PIX* pixFewColorsOctcubeQuantMixed (PIX* pixs, int level, int darkthresh, int lightthresh, int diffthresh, float minfract, int maxspan);
PIX* pixFixedOctcubeQuantGenRGB (PIX* pixs, int level);
PIX* pixQuantFromCmap (PIX* pixs, PIXCMAP* cmap, int mindepth, int level, int metric);
PIX* pixOctcubeQuantFromCmap (PIX* pixs, PIXCMAP* cmap, int mindepth, int level, int metric);
NUMA* pixOctcubeHistogram (PIX* pixs, int level, int* pncolors);
int* pixcmapToOctcubeLUT (PIXCMAP* cmap, int level, int metric);
int pixRemoveUnusedColors (PIX* pixs);
int pixNumberOccupiedOctcubes (PIX* pix, int level, int mincount, float minfract, int* pncolors);
PIX* pixMedianCutQuant (PIX* pixs, int ditherflag);
PIX* pixMedianCutQuantGeneral (PIX* pixs, int ditherflag, int outdepth, int maxcolors, int sigbits, int maxsub, int checkbw);
PIX* pixMedianCutQuantMixed (PIX* pixs, int ncolor, int ngray, int darkthresh, int lightthresh, int diffthresh);
PIX* pixFewColorsMedianCutQuantMixed (PIX* pixs, int ncolor, int ngray, int maxncolors, int darkthresh, int lightthresh, int diffthresh);
int* pixMedianCutHisto (PIX* pixs, int sigbits, int subsample);
PIX* pixColorSegment (PIX* pixs, int maxdist, int maxcolors, int selsize, int finalcolors, int debugflag);
PIX* pixColorSegmentCluster (PIX* pixs, int maxdist, int maxcolors, int debugflag);
int pixAssignToNearestColor (PIX* pixd, PIX* pixs, PIX* pixm, int level, int* countarray);
int pixColorSegmentClean (PIX* pixs, int selsize, int* countarray);
int pixColorSegmentRemoveColors (PIX* pixd, PIX* pixs, int finalcolors);
PIX* pixConvertRGBToHSV (PIX* pixd, PIX* pixs);
PIX* pixConvertHSVToRGB (PIX* pixd, PIX* pixs);
int convertRGBToHSV (int rval, int gval, int bval, int* phval, int* psval, int* pvval);
int convertHSVToRGB (int hval, int sval, int vval, int* prval, int* pgval, int* pbval);
int pixcmapConvertRGBToHSV (PIXCMAP* cmap);
int pixcmapConvertHSVToRGB (PIXCMAP* cmap);
PIX* pixConvertRGBToHue (PIX* pixs);
PIX* pixConvertRGBToSaturation (PIX* pixs);
PIX* pixConvertRGBToValue (PIX* pixs);
PIX* pixMakeRangeMaskHS (PIX* pixs, int huecenter, int huehw, int satcenter, int sathw, int regionflag);
PIX* pixMakeRangeMaskHV (PIX* pixs, int huecenter, int huehw, int valcenter, int valhw, int regionflag);
PIX* pixMakeRangeMaskSV (PIX* pixs, int satcenter, int sathw, int valcenter, int valhw, int regionflag);
PIX* pixMakeHistoHS (PIX* pixs, int factor, NUMA** pnahue, NUMA** pnasat);
PIX* pixMakeHistoHV (PIX* pixs, int factor, NUMA** pnahue, NUMA** pnaval);
PIX* pixMakeHistoSV (PIX* pixs, int factor, NUMA** pnasat, NUMA** pnaval);
int pixFindHistoPeaksHSV (PIX* pixs, int type, int width, int height, int npeaks, float erasefactor, PTA** ppta, NUMA** pnatot, PIXA** ppixa);
PIX* displayHSVColorRange (int hval, int sval, int vval, int huehw, int sathw, int nsamp, int factor);
PIX* pixConvertRGBToYUV (PIX* pixd, PIX* pixs);
PIX* pixConvertYUVToRGB (PIX* pixd, PIX* pixs);
int convertRGBToYUV (int rval, int gval, int bval, int* pyval, int* puval, int* pvval);
int convertYUVToRGB (int yval, int uval, int vval, int* prval, int* pgval, int* pbval);
int pixcmapConvertRGBToYUV (PIXCMAP* cmap);
int pixcmapConvertYUVToRGB (PIXCMAP* cmap);
FPIXA* pixConvertRGBToXYZ (PIX* pixs);
PIX* fpixaConvertXYZToRGB (FPIXA* fpixa);
int convertRGBToXYZ (int rval, int gval, int bval, float* pfxval, float* pfyval, float* pfzval);
int convertXYZToRGB (float fxval, float fyval, float fzval, int blackout, int* prval, int* pgval, int* pbval);
FPIXA* fpixaConvertXYZToLAB (FPIXA* fpixas);
FPIXA* fpixaConvertLABToXYZ (FPIXA* fpixas);
int convertXYZToLAB (float xval, float yval, float zval, float* plval, float* paval, float* pbval);
int convertLABToXYZ (float lval, float aval, float bval, float* pxval, float* pyval, float* pzval);
FPIXA* pixConvertRGBToLAB (PIX* pixs);
PIX* fpixaConvertLABToRGB (FPIXA* fpixa);
int convertRGBToLAB (int rval, int gval, int bval, float* pflval, float* pfaval, float* pfbval);
int convertLABToRGB (float flval, float faval, float fbval, int* prval, int* pgval, int* pbval);
PIX* pixMakeGamutRGB (int scale);
int pixEqual (PIX* pix1, PIX* pix2, int* psame);
int pixEqualWithAlpha (PIX* pix1, PIX* pix2, int use_alpha, int* psame);
int pixEqualWithCmap (PIX* pix1, PIX* pix2, int* psame);
int cmapEqual (PIXCMAP* cmap1, PIXCMAP* cmap2, int ncomps, int* psame);
int pixUsesCmapColor (PIX* pixs, int* pcolor);
int pixCorrelationBinary (PIX* pix1, PIX* pix2, float* pval);
PIX* pixDisplayDiffBinary (PIX* pix1, PIX* pix2);
int pixCompareBinary (PIX* pix1, PIX* pix2, int comptype, float* pfract, PIX** ppixdiff);
int pixCompareGrayOrRGB (PIX* pix1, PIX* pix2, int comptype, int plottype, int* psame, float* pdiff, float* prmsdiff, PIX** ppixdiff);
int pixCompareGray (PIX* pix1, PIX* pix2, int comptype, int plottype, int* psame, float* pdiff, float* prmsdiff, PIX** ppixdiff);
int pixCompareRGB (PIX* pix1, PIX* pix2, int comptype, int plottype, int* psame, float* pdiff, float* prmsdiff, PIX** ppixdiff);
int pixCompareTiled (PIX* pix1, PIX* pix2, int sx, int sy, int type, PIX** ppixdiff);
NUMA* pixCompareRankDifference (PIX* pix1, PIX* pix2, int factor);
int pixTestForSimilarity (PIX* pix1, PIX* pix2, int factor, int mindiff, float maxfract, float maxave, int* psimilar, int details);
int pixGetDifferenceStats (PIX* pix1, PIX* pix2, int factor, int mindiff, float* pfractdiff, float* pavediff, int details);
NUMA* pixGetDifferenceHistogram (PIX* pix1, PIX* pix2, int factor);
int pixGetPerceptualDiff (PIX* pixs1, PIX* pixs2, int sampling, int dilation, int mindiff, float* pfract, PIX** ppixdiff1, PIX** ppixdiff2);
int pixGetPSNR (PIX* pix1, PIX* pix2, int factor, float* ppsnr);
int pixaComparePhotoRegionsByHisto (PIXA* pixa, float minratio, float textthresh, int factor, int n, float simthresh, NUMA** pnai, float** pscores, PIX** ppixd, int debug_);
int pixComparePhotoRegionsByHisto (PIX* pix1, PIX* pix2, BOX* box1, BOX* box2, float minratio, int factor, int n, float* pscore, int debugflag);
int pixGenPhotoHistos (PIX* pixs, BOX* box, int factor, float thresh, int n, NUMAA** pnaa, int* pw, int* ph, int debugindex);
PIX* pixPadToCenterCentroid (PIX* pixs, int factor);
int pixCentroid8 (PIX* pixs, int factor, float* pcx, float* pcy);
int pixDecideIfPhotoImage (PIX* pix, int factor, float thresh, int n, NUMAA** pnaa, PIXA* pixadebug);
int compareTilesByHisto (NUMAA* naa1, NUMAA* naa2, float minratio, int w1, int h1, int w2, int h2, float* pscore, PIXA* pixadebug);
int pixCompareGrayByHisto (PIX* pix1, PIX* pix2, BOX* box1, BOX* box2, float minratio, int maxgray, int factor, int n, float* pscore, int debugflag);
int pixCropAlignedToCentroid (PIX* pix1, PIX* pix2, int factor, BOX** pbox1, BOX** pbox2);
ubyte* l_compressGrayHistograms (NUMAA* naa, int w, int h, size_t* psize);
NUMAA* l_uncompressGrayHistograms (ubyte* bytea, size_t size, int* pw, int* ph);
int pixCompareWithTranslation (PIX* pix1, PIX* pix2, int thresh, int* pdelx, int* pdely, float* pscore, int debugflag);
int pixBestCorrelation (PIX* pix1, PIX* pix2, int area1, int area2, int etransx, int etransy, int maxshift, int* tab8, int* pdelx, int* pdely, float* pscore, int debugflag);
BOXA* pixConnComp (PIX* pixs, PIXA** ppixa, int connectivity);
BOXA* pixConnCompPixa (PIX* pixs, PIXA** ppixa, int connectivity);
BOXA* pixConnCompBB (PIX* pixs, int connectivity);
int pixCountConnComp (PIX* pixs, int connectivity, int* pcount);
int nextOnPixelInRaster (PIX* pixs, int xstart, int ystart, int* px, int* py);
BOX* pixSeedfillBB (PIX* pixs, L_STACK* stack, int x, int y, int connectivity);
BOX* pixSeedfill4BB (PIX* pixs, L_STACK* stack, int x, int y);
BOX* pixSeedfill8BB (PIX* pixs, L_STACK* stack, int x, int y);
int pixSeedfill (PIX* pixs, L_STACK* stack, int x, int y, int connectivity);
int pixSeedfill4 (PIX* pixs, L_STACK* stack, int x, int y);
int pixSeedfill8 (PIX* pixs, L_STACK* stack, int x, int y);
int convertFilesTo1bpp (const(char)* dirin, const(char)* substr, int upscaling, int thresh, int firstpage, int npages, const(char)* dirout, int outformat);
PIX* pixBlockconv (PIX* pix, int wc, int hc);
PIX* pixBlockconvGray (PIX* pixs, PIX* pixacc, int wc, int hc);
PIX* pixBlockconvAccum (PIX* pixs);
PIX* pixBlockconvGrayUnnormalized (PIX* pixs, int wc, int hc);
PIX* pixBlockconvTiled (PIX* pix, int wc, int hc, int nx, int ny);
PIX* pixBlockconvGrayTile (PIX* pixs, PIX* pixacc, int wc, int hc);
int pixWindowedStats (PIX* pixs, int wc, int hc, int hasborder, PIX** ppixm, PIX** ppixms, FPIX** pfpixv, FPIX** pfpixrv);
PIX* pixWindowedMean (PIX* pixs, int wc, int hc, int hasborder, int normflag);
PIX* pixWindowedMeanSquare (PIX* pixs, int wc, int hc, int hasborder);
int pixWindowedVariance (PIX* pixm, PIX* pixms, FPIX** pfpixv, FPIX** pfpixrv);
DPIX* pixMeanSquareAccum (PIX* pixs);
PIX* pixBlockrank (PIX* pixs, PIX* pixacc, int wc, int hc, float rank);
PIX* pixBlocksum (PIX* pixs, PIX* pixacc, int wc, int hc);
PIX* pixCensusTransform (PIX* pixs, int halfsize, PIX* pixacc);
PIX* pixConvolve (PIX* pixs, L_KERNEL* kel, int outdepth, int normflag);
PIX* pixConvolveSep (PIX* pixs, L_KERNEL* kelx, L_KERNEL* kely, int outdepth, int normflag);
PIX* pixConvolveRGB (PIX* pixs, L_KERNEL* kel);
PIX* pixConvolveRGBSep (PIX* pixs, L_KERNEL* kelx, L_KERNEL* kely);
FPIX* fpixConvolve (FPIX* fpixs, L_KERNEL* kel, int normflag);
FPIX* fpixConvolveSep (FPIX* fpixs, L_KERNEL* kelx, L_KERNEL* kely, int normflag);
PIX* pixConvolveWithBias (PIX* pixs, L_KERNEL* kel1, L_KERNEL* kel2, int force8, int* pbias);
void l_setConvolveSampling (int xfact, int yfact);
PIX* pixAddGaussianNoise (PIX* pixs, float stdev);
float gaussDistribSampling ();
int pixCorrelationScore (PIX* pix1, PIX* pix2, int area1, int area2, float delx, float dely, int maxdiffw, int maxdiffh, int* tab, float* pscore);
int pixCorrelationScoreThresholded (PIX* pix1, PIX* pix2, int area1, int area2, float delx, float dely, int maxdiffw, int maxdiffh, int* tab, int* downcount, float score_threshold);
int pixCorrelationScoreSimple (PIX* pix1, PIX* pix2, int area1, int area2, float delx, float dely, int maxdiffw, int maxdiffh, int* tab, float* pscore);
int pixCorrelationScoreShifted (PIX* pix1, PIX* pix2, int area1, int area2, int delx, int dely, int* tab, float* pscore);
L_DEWARP* dewarpCreate (PIX* pixs, int pageno);
L_DEWARP* dewarpCreateRef (int pageno, int refpage);
void dewarpDestroy (L_DEWARP** pdew);
L_DEWARPA* dewarpaCreate (int nptrs, int sampling, int redfactor, int minlines, int maxdist);
L_DEWARPA* dewarpaCreateFromPixacomp (PIXAC* pixac, int useboth, int sampling, int minlines, int maxdist);
void dewarpaDestroy (L_DEWARPA** pdewa);
int dewarpaDestroyDewarp (L_DEWARPA* dewa, int pageno);
int dewarpaInsertDewarp (L_DEWARPA* dewa, L_DEWARP* dew);
L_DEWARP* dewarpaGetDewarp (L_DEWARPA* dewa, int index);
int dewarpaSetCurvatures (L_DEWARPA* dewa, int max_linecurv, int min_diff_linecurv, int max_diff_linecurv, int max_edgecurv, int max_diff_edgecurv, int max_edgeslope);
int dewarpaUseBothArrays (L_DEWARPA* dewa, int useboth);
int dewarpaSetCheckColumns (L_DEWARPA* dewa, int check_columns);
int dewarpaSetMaxDistance (L_DEWARPA* dewa, int maxdist);
L_DEWARP* dewarpRead (const(char)* filename);
L_DEWARP* dewarpReadStream (FILE* fp);
L_DEWARP* dewarpReadMem (const(ubyte)* data, size_t size);
int dewarpWrite (const(char)* filename, L_DEWARP* dew);
int dewarpWriteStream (FILE* fp, L_DEWARP* dew);
int dewarpWriteMem (ubyte** pdata, size_t* psize, L_DEWARP* dew);
L_DEWARPA* dewarpaRead (const(char)* filename);
L_DEWARPA* dewarpaReadStream (FILE* fp);
L_DEWARPA* dewarpaReadMem (const(ubyte)* data, size_t size);
int dewarpaWrite (const(char)* filename, L_DEWARPA* dewa);
int dewarpaWriteStream (FILE* fp, L_DEWARPA* dewa);
int dewarpaWriteMem (ubyte** pdata, size_t* psize, L_DEWARPA* dewa);
int dewarpBuildPageModel (L_DEWARP* dew, const(char)* debugfile);
int dewarpFindVertDisparity (L_DEWARP* dew, PTAA* ptaa, int rotflag);
int dewarpFindHorizDisparity (L_DEWARP* dew, PTAA* ptaa);
PTAA* dewarpGetTextlineCenters (PIX* pixs, int debugflag);
PTAA* dewarpRemoveShortLines (PIX* pixs, PTAA* ptaas, float fract, int debugflag);
int dewarpFindHorizSlopeDisparity (L_DEWARP* dew, PIX* pixb, float fractthresh, int parity);
int dewarpBuildLineModel (L_DEWARP* dew, int opensize, const(char)* debugfile);
int dewarpaModelStatus (L_DEWARPA* dewa, int pageno, int* pvsuccess, int* phsuccess);
int dewarpaApplyDisparity (L_DEWARPA* dewa, int pageno, PIX* pixs, int grayin, int x, int y, PIX** ppixd, const(char)* debugfile);
int dewarpaApplyDisparityBoxa (L_DEWARPA* dewa, int pageno, PIX* pixs, BOXA* boxas, int mapdir, int x, int y, BOXA** pboxad, const(char)* debugfile);
int dewarpMinimize (L_DEWARP* dew);
int dewarpPopulateFullRes (L_DEWARP* dew, PIX* pix, int x, int y);
int dewarpSinglePage (PIX* pixs, int thresh, int adaptive, int useboth, int check_columns, PIX** ppixd, L_DEWARPA** pdewa, int debug_);
int dewarpSinglePageInit (PIX* pixs, int thresh, int adaptive, int useboth, int check_columns, PIX** ppixb, L_DEWARPA** pdewa);
int dewarpSinglePageRun (PIX* pixs, PIX* pixb, L_DEWARPA* dewa, PIX** ppixd, int debug_);
int dewarpaListPages (L_DEWARPA* dewa);
int dewarpaSetValidModels (L_DEWARPA* dewa, int notests, int debug_);
int dewarpaInsertRefModels (L_DEWARPA* dewa, int notests, int debug_);
int dewarpaStripRefModels (L_DEWARPA* dewa);
int dewarpaRestoreModels (L_DEWARPA* dewa);
int dewarpaInfo (FILE* fp, L_DEWARPA* dewa);
int dewarpaModelStats (L_DEWARPA* dewa, int* pnnone, int* pnvsuccess, int* pnvvalid, int* pnhsuccess, int* pnhvalid, int* pnref);
int dewarpaShowArrays (L_DEWARPA* dewa, float scalefact, int first, int last);
int dewarpDebug (L_DEWARP* dew, const(char)* subdirs, int index);
int dewarpShowResults (L_DEWARPA* dewa, SARRAY* sa, BOXA* boxa, int firstpage, int lastpage, const(char)* pdfout);
L_DNA* l_dnaCreate (int n);
L_DNA* l_dnaCreateFromIArray (int* iarray, int size);
L_DNA* l_dnaCreateFromDArray (double* darray, int size, int copyflag);
L_DNA* l_dnaMakeSequence (double startval, double increment, int size);
void l_dnaDestroy (L_DNA** pda);
L_DNA* l_dnaCopy (L_DNA* da);
L_DNA* l_dnaClone (L_DNA* da);
int l_dnaEmpty (L_DNA* da);
int l_dnaAddNumber (L_DNA* da, double val);
int l_dnaInsertNumber (L_DNA* da, int index, double val);
int l_dnaRemoveNumber (L_DNA* da, int index);
int l_dnaReplaceNumber (L_DNA* da, int index, double val);
int l_dnaGetCount (L_DNA* da);
int l_dnaSetCount (L_DNA* da, int newcount);
int l_dnaGetDValue (L_DNA* da, int index, double* pval);
int l_dnaGetIValue (L_DNA* da, int index, int* pival);
int l_dnaSetValue (L_DNA* da, int index, double val);
int l_dnaShiftValue (L_DNA* da, int index, double diff);
int* l_dnaGetIArray (L_DNA* da);
double* l_dnaGetDArray (L_DNA* da, int copyflag);
int l_dnaGetRefcount (L_DNA* da);
int l_dnaChangeRefcount (L_DNA* da, int delta);
int l_dnaGetParameters (L_DNA* da, double* pstartx, double* pdelx);
int l_dnaSetParameters (L_DNA* da, double startx, double delx);
int l_dnaCopyParameters (L_DNA* dad, L_DNA* das);
L_DNA* l_dnaRead (const(char)* filename);
L_DNA* l_dnaReadStream (FILE* fp);
L_DNA* l_dnaReadMem (const(ubyte)* data, size_t size);
int l_dnaWrite (const(char)* filename, L_DNA* da);
int l_dnaWriteStream (FILE* fp, L_DNA* da);
int l_dnaWriteStderr (L_DNA* da);
int l_dnaWriteMem (ubyte** pdata, size_t* psize, L_DNA* da);
L_DNAA* l_dnaaCreate (int n);
L_DNAA* l_dnaaCreateFull (int nptr, int n);
int l_dnaaTruncate (L_DNAA* daa);
void l_dnaaDestroy (L_DNAA** pdaa);
int l_dnaaAddDna (L_DNAA* daa, L_DNA* da, int copyflag);
int l_dnaaGetCount (L_DNAA* daa);
int l_dnaaGetDnaCount (L_DNAA* daa, int index);
int l_dnaaGetNumberCount (L_DNAA* daa);
L_DNA* l_dnaaGetDna (L_DNAA* daa, int index, int accessflag);
int l_dnaaReplaceDna (L_DNAA* daa, int index, L_DNA* da);
int l_dnaaGetValue (L_DNAA* daa, int i, int j, double* pval);
int l_dnaaAddNumber (L_DNAA* daa, int index, double val);
L_DNAA* l_dnaaRead (const(char)* filename);
L_DNAA* l_dnaaReadStream (FILE* fp);
L_DNAA* l_dnaaReadMem (const(ubyte)* data, size_t size);
int l_dnaaWrite (const(char)* filename, L_DNAA* daa);
int l_dnaaWriteStream (FILE* fp, L_DNAA* daa);
int l_dnaaWriteMem (ubyte** pdata, size_t* psize, L_DNAA* daa);
int l_dnaJoin (L_DNA* dad, L_DNA* das, int istart, int iend);
L_DNA* l_dnaaFlattenToDna (L_DNAA* daa);
L_DNA* l_dnaSelectRange (L_DNA* das, int first, int last);
NUMA* l_dnaConvertToNuma (L_DNA* da);
L_DNA* numaConvertToDna (NUMA* na);
L_DNA* pixConvertDataToDna (PIX* pix);
L_ASET* l_asetCreateFromDna (L_DNA* da);
int l_dnaRemoveDupsByAset (L_DNA* das, L_DNA** pdad);
int l_dnaUnionByAset (L_DNA* da1, L_DNA* da2, L_DNA** pdad);
int l_dnaIntersectionByAset (L_DNA* da1, L_DNA* da2, L_DNA** pdad);
L_HASHMAP* l_hmapCreateFromDna (L_DNA* da);
int l_dnaRemoveDupsByHmap (L_DNA* das, L_DNA** pdad, L_HASHMAP** phmap);
int l_dnaUnionByHmap (L_DNA* da1, L_DNA* da2, L_DNA** pdad);
int l_dnaIntersectionByHmap (L_DNA* da1, L_DNA* da2, L_DNA** pdad);
int l_dnaMakeHistoByHmap (L_DNA* das, L_DNA** pdav, L_DNA** pdac);
L_DNA* l_dnaDiffAdjValues (L_DNA* das);
L_DNAHASH* l_dnaHashCreate (int nbuckets, int initsize);
void l_dnaHashDestroy (L_DNAHASH** pdahash);
L_DNA* l_dnaHashGetDna (L_DNAHASH* dahash, ulong key, int copyflag);
int l_dnaHashAdd (L_DNAHASH* dahash, ulong key, double value);
PIX* pixMorphDwa_2 (PIX* pixd, PIX* pixs, int operation, char* selname);
PIX* pixFMorphopGen_2 (PIX* pixd, PIX* pixs, int operation, char* selname);
int fmorphopgen_low_2 (uint* datad, int w, int h, int wpld, uint* datas, int wpls, int index);
PIX* pixSobelEdgeFilter (PIX* pixs, int orientflag);
PIX* pixTwoSidedEdgeFilter (PIX* pixs, int orientflag);
int pixMeasureEdgeSmoothness (PIX* pixs, int side, int minjump, int minreversal, float* pjpl, float* pjspl, float* prpl, const(char)* debugfile);
NUMA* pixGetEdgeProfile (PIX* pixs, int side, const(char)* debugfile);
int pixGetLastOffPixelInRun (PIX* pixs, int x, int y, int direction, int* ploc);
int pixGetLastOnPixelInRun (PIX* pixs, int x, int y, int direction, int* ploc);
char* encodeBase64 (const(ubyte)* inarray, int insize, int* poutsize);
ubyte* decodeBase64 (const(char)* inarray, int insize, int* poutsize);
char* encodeAscii85 (const(ubyte)* inarray, size_t insize, size_t* poutsize);
ubyte* decodeAscii85 (const(char)* inarray, size_t insize, size_t* poutsize);
char* encodeAscii85WithComp (const(ubyte)* indata, size_t insize, size_t* poutsize);
ubyte* decodeAscii85WithComp (const(char)* instr, size_t insize, size_t* poutsize);
char* reformatPacked64 (const(char)* inarray, int insize, int leadspace, int linechars, int addquotes, int* poutsize);
PIX* pixGammaTRC (PIX* pixd, PIX* pixs, float gamma, int minval, int maxval);
PIX* pixGammaTRCMasked (PIX* pixd, PIX* pixs, PIX* pixm, float gamma, int minval, int maxval);
PIX* pixGammaTRCWithAlpha (PIX* pixd, PIX* pixs, float gamma, int minval, int maxval);
NUMA* numaGammaTRC (float gamma, int minval, int maxval);
PIX* pixContrastTRC (PIX* pixd, PIX* pixs, float factor);
PIX* pixContrastTRCMasked (PIX* pixd, PIX* pixs, PIX* pixm, float factor);
NUMA* numaContrastTRC (float factor);
PIX* pixEqualizeTRC (PIX* pixd, PIX* pixs, float fract, int factor);
NUMA* numaEqualizeTRC (PIX* pix, float fract, int factor);
int pixTRCMap (PIX* pixs, PIX* pixm, NUMA* na);
int pixTRCMapGeneral (PIX* pixs, PIX* pixm, NUMA* nar, NUMA* nag, NUMA* nab);
PIX* pixUnsharpMasking (PIX* pixs, int halfwidth, float fract);
PIX* pixUnsharpMaskingGray (PIX* pixs, int halfwidth, float fract);
PIX* pixUnsharpMaskingFast (PIX* pixs, int halfwidth, float fract, int direction);
PIX* pixUnsharpMaskingGrayFast (PIX* pixs, int halfwidth, float fract, int direction);
PIX* pixUnsharpMaskingGray1D (PIX* pixs, int halfwidth, float fract, int direction);
PIX* pixUnsharpMaskingGray2D (PIX* pixs, int halfwidth, float fract);
PIX* pixModifyHue (PIX* pixd, PIX* pixs, float fract);
PIX* pixModifySaturation (PIX* pixd, PIX* pixs, float fract);
int pixMeasureSaturation (PIX* pixs, int factor, float* psat);
PIX* pixModifyBrightness (PIX* pixd, PIX* pixs, float fract);
PIX* pixMosaicColorShiftRGB (PIX* pixs, float roff, float goff, float boff, float delta, int nincr);
PIX* pixColorShiftRGB (PIX* pixs, float rfract, float gfract, float bfract);
PIX* pixDarkenGray (PIX* pixd, PIX* pixs, int thresh, int satlimit);
PIX* pixMultConstantColor (PIX* pixs, float rfact, float gfact, float bfact);
PIX* pixMultMatrixColor (PIX* pixs, L_KERNEL* kel);
PIX* pixHalfEdgeByBandpass (PIX* pixs, int sm1h, int sm1v, int sm2h, int sm2v);
int fhmtautogen (SELA* sela, int fileindex, const(char)* filename);
int fhmtautogen1 (SELA* sela, int fileindex, const(char)* filename);
int fhmtautogen2 (SELA* sela, int fileindex, const(char)* filename);
PIX* pixHMTDwa_1 (PIX* pixd, PIX* pixs, const(char)* selname);
PIX* pixFHMTGen_1 (PIX* pixd, PIX* pixs, const(char)* selname);
int fhmtgen_low_1 (uint* datad, int w, int h, int wpld, uint* datas, int wpls, int index);
int pixItalicWords (PIX* pixs, BOXA* boxaw, PIX* pixw, BOXA** pboxa, int debugflag);
PIX* pixOrientCorrect (PIX* pixs, float minupconf, float minratio, float* pupconf, float* pleftconf, int* protation, int debug_);
int pixOrientDetect (PIX* pixs, float* pupconf, float* pleftconf, int mincount, int debug_);
int makeOrientDecision (float upconf, float leftconf, float minupconf, float minratio, int* porient, int debug_);
int pixUpDownDetect (PIX* pixs, float* pconf, int mincount, int npixels, int debug_);
int pixMirrorDetect (PIX* pixs, float* pconf, int mincount, int debug_);
int fmorphautogen (SELA* sela, int fileindex, const(char)* filename);
int fmorphautogen1 (SELA* sela, int fileindex, const(char)* filename);
int fmorphautogen2 (SELA* sela, int fileindex, const(char)* filename);
PIX* pixMorphDwa_1 (PIX* pixd, PIX* pixs, int operation, char* selname);
PIX* pixFMorphopGen_1 (PIX* pixd, PIX* pixs, int operation, char* selname);
int fmorphopgen_low_1 (uint* datad, int w, int h, int wpld, uint* datas, int wpls, int index);
FPIX* fpixCreate (int width, int height);
FPIX* fpixCreateTemplate (FPIX* fpixs);
FPIX* fpixClone (FPIX* fpix);
FPIX* fpixCopy (FPIX* fpixs);
void fpixDestroy (FPIX** pfpix);
int fpixGetDimensions (FPIX* fpix, int* pw, int* ph);
int fpixSetDimensions (FPIX* fpix, int w, int h);
int fpixGetWpl (FPIX* fpix);
int fpixSetWpl (FPIX* fpix, int wpl);
int fpixGetRefcount (FPIX* fpix);
int fpixChangeRefcount (FPIX* fpix, int delta);
int fpixGetResolution (FPIX* fpix, int* pxres, int* pyres);
int fpixSetResolution (FPIX* fpix, int xres, int yres);
int fpixCopyResolution (FPIX* fpixd, FPIX* fpixs);
float* fpixGetData (FPIX* fpix);
int fpixSetData (FPIX* fpix, float* data);
int fpixGetPixel (FPIX* fpix, int x, int y, float* pval);
int fpixSetPixel (FPIX* fpix, int x, int y, float val);
FPIXA* fpixaCreate (int n);
FPIXA* fpixaCopy (FPIXA* fpixa, int copyflag);
void fpixaDestroy (FPIXA** pfpixa);
int fpixaAddFPix (FPIXA* fpixa, FPIX* fpix, int copyflag);
int fpixaGetCount (FPIXA* fpixa);
int fpixaChangeRefcount (FPIXA* fpixa, int delta);
FPIX* fpixaGetFPix (FPIXA* fpixa, int index, int accesstype);
int fpixaGetFPixDimensions (FPIXA* fpixa, int index, int* pw, int* ph);
float* fpixaGetData (FPIXA* fpixa, int index);
int fpixaGetPixel (FPIXA* fpixa, int index, int x, int y, float* pval);
int fpixaSetPixel (FPIXA* fpixa, int index, int x, int y, float val);
DPIX* dpixCreate (int width, int height);
DPIX* dpixCreateTemplate (DPIX* dpixs);
DPIX* dpixClone (DPIX* dpix);
DPIX* dpixCopy (DPIX* dpixs);
void dpixDestroy (DPIX** pdpix);
int dpixGetDimensions (DPIX* dpix, int* pw, int* ph);
int dpixSetDimensions (DPIX* dpix, int w, int h);
int dpixGetWpl (DPIX* dpix);
int dpixSetWpl (DPIX* dpix, int wpl);
int dpixGetRefcount (DPIX* dpix);
int dpixChangeRefcount (DPIX* dpix, int delta);
int dpixGetResolution (DPIX* dpix, int* pxres, int* pyres);
int dpixSetResolution (DPIX* dpix, int xres, int yres);
int dpixCopyResolution (DPIX* dpixd, DPIX* dpixs);
double* dpixGetData (DPIX* dpix);
int dpixSetData (DPIX* dpix, double* data);
int dpixGetPixel (DPIX* dpix, int x, int y, double* pval);
int dpixSetPixel (DPIX* dpix, int x, int y, double val);
FPIX* fpixRead (const(char)* filename);
FPIX* fpixReadStream (FILE* fp);
FPIX* fpixReadMem (const(ubyte)* data, size_t size);
int fpixWrite (const(char)* filename, FPIX* fpix);
int fpixWriteStream (FILE* fp, FPIX* fpix);
int fpixWriteMem (ubyte** pdata, size_t* psize, FPIX* fpix);
FPIX* fpixEndianByteSwap (FPIX* fpixd, FPIX* fpixs);
DPIX* dpixRead (const(char)* filename);
DPIX* dpixReadStream (FILE* fp);
DPIX* dpixReadMem (const(ubyte)* data, size_t size);
int dpixWrite (const(char)* filename, DPIX* dpix);
int dpixWriteStream (FILE* fp, DPIX* dpix);
int dpixWriteMem (ubyte** pdata, size_t* psize, DPIX* dpix);
DPIX* dpixEndianByteSwap (DPIX* dpixd, DPIX* dpixs);
int fpixPrintStream (FILE* fp, FPIX* fpix, int factor);
FPIX* pixConvertToFPix (PIX* pixs, int ncomps);
DPIX* pixConvertToDPix (PIX* pixs, int ncomps);
PIX* fpixConvertToPix (FPIX* fpixs, int outdepth, int negvals, int errorflag);
PIX* fpixDisplayMaxDynamicRange (FPIX* fpixs);
DPIX* fpixConvertToDPix (FPIX* fpix);
PIX* dpixConvertToPix (DPIX* dpixs, int outdepth, int negvals, int errorflag);
FPIX* dpixConvertToFPix (DPIX* dpix);
int fpixGetMin (FPIX* fpix, float* pminval, int* pxminloc, int* pyminloc);
int fpixGetMax (FPIX* fpix, float* pmaxval, int* pxmaxloc, int* pymaxloc);
int dpixGetMin (DPIX* dpix, double* pminval, int* pxminloc, int* pyminloc);
int dpixGetMax (DPIX* dpix, double* pmaxval, int* pxmaxloc, int* pymaxloc);
FPIX* fpixScaleByInteger (FPIX* fpixs, int factor);
DPIX* dpixScaleByInteger (DPIX* dpixs, int factor);
FPIX* fpixLinearCombination (FPIX* fpixd, FPIX* fpixs1, FPIX* fpixs2, float a, float b);
int fpixAddMultConstant (FPIX* fpix, float addc, float multc);
DPIX* dpixLinearCombination (DPIX* dpixd, DPIX* dpixs1, DPIX* dpixs2, float a, float b);
int dpixAddMultConstant (DPIX* dpix, double addc, double multc);
int fpixSetAllArbitrary (FPIX* fpix, float inval);
int dpixSetAllArbitrary (DPIX* dpix, double inval);
FPIX* fpixAddBorder (FPIX* fpixs, int left, int right, int top, int bot);
FPIX* fpixRemoveBorder (FPIX* fpixs, int left, int right, int top, int bot);
FPIX* fpixAddMirroredBorder (FPIX* fpixs, int left, int right, int top, int bot);
FPIX* fpixAddContinuedBorder (FPIX* fpixs, int left, int right, int top, int bot);
FPIX* fpixAddSlopeBorder (FPIX* fpixs, int left, int right, int top, int bot);
int fpixRasterop (FPIX* fpixd, int dx, int dy, int dw, int dh, FPIX* fpixs, int sx, int sy);
FPIX* fpixRotateOrth (FPIX* fpixs, int quads);
FPIX* fpixRotate180 (FPIX* fpixd, FPIX* fpixs);
FPIX* fpixRotate90 (FPIX* fpixs, int direction);
FPIX* fpixFlipLR (FPIX* fpixd, FPIX* fpixs);
FPIX* fpixFlipTB (FPIX* fpixd, FPIX* fpixs);
FPIX* fpixAffinePta (FPIX* fpixs, PTA* ptad, PTA* ptas, int border, float inval);
FPIX* fpixAffine (FPIX* fpixs, float* vc, float inval);
FPIX* fpixProjectivePta (FPIX* fpixs, PTA* ptad, PTA* ptas, int border, float inval);
FPIX* fpixProjective (FPIX* fpixs, float* vc, float inval);
int linearInterpolatePixelFloat (float* datas, int w, int h, float x, float y, float inval, float* pval);
PIX* fpixThresholdToPix (FPIX* fpix, float thresh);
FPIX* pixComponentFunction (PIX* pix, float rnum, float gnum, float bnum, float rdenom, float gdenom, float bdenom);
PIX* pixReadStreamGif (FILE* fp);
PIX* pixReadMemGif (const(ubyte)* cdata, size_t size);
int pixWriteStreamGif (FILE* fp, PIX* pix);
int pixWriteMemGif (ubyte** pdata, size_t* psize, PIX* pix);
GPLOT* gplotCreate (const(char)* rootname, int outformat, const(char)* title, const(char)* xlabel, const(char)* ylabel);
void gplotDestroy (GPLOT** pgplot);
int gplotAddPlot (GPLOT* gplot, NUMA* nax, NUMA* nay, int plotstyle, const(char)* plotlabel);
int gplotSetScaling (GPLOT* gplot, int scaling);
PIX* gplotMakeOutputPix (GPLOT* gplot);
int gplotMakeOutput (GPLOT* gplot);
int gplotGenCommandFile (GPLOT* gplot);
int gplotGenDataFiles (GPLOT* gplot);
int gplotSimple1 (NUMA* na, int outformat, const(char)* outroot, const(char)* title);
int gplotSimple2 (NUMA* na1, NUMA* na2, int outformat, const(char)* outroot, const(char)* title);
int gplotSimpleN (NUMAA* naa, int outformat, const(char)* outroot, const(char)* title);
PIX* gplotSimplePix1 (NUMA* na, const(char)* title);
PIX* gplotSimplePix2 (NUMA* na1, NUMA* na2, const(char)* title);
PIX* gplotSimplePixN (NUMAA* naa, const(char)* title);
GPLOT* gplotSimpleXY1 (NUMA* nax, NUMA* nay, int plotstyle, int outformat, const(char)* outroot, const(char)* title);
GPLOT* gplotSimpleXY2 (NUMA* nax, NUMA* nay1, NUMA* nay2, int plotstyle, int outformat, const(char)* outroot, const(char)* title);
GPLOT* gplotSimpleXYN (NUMA* nax, NUMAA* naay, int plotstyle, int outformat, const(char)* outroot, const(char)* title);
PIX* gplotGeneralPix1 (NUMA* na, int plotstyle, const(char)* rootname, const(char)* title, const(char)* xlabel, const(char)* ylabel);
PIX* gplotGeneralPix2 (NUMA* na1, NUMA* na2, int plotstyle, const(char)* rootname, const(char)* title, const(char)* xlabel, const(char)* ylabel);
PIX* gplotGeneralPixN (NUMA* nax, NUMAA* naay, int plotstyle, const(char)* rootname, const(char)* title, const(char)* xlabel, const(char)* ylabel);
GPLOT* gplotRead (const(char)* filename);
int gplotWrite (const(char)* filename, GPLOT* gplot);
PTA* generatePtaLine (int x1, int y1, int x2, int y2);
PTA* generatePtaWideLine (int x1, int y1, int x2, int y2, int width);
PTA* generatePtaBox (BOX* box, int width);
PTA* generatePtaBoxa (BOXA* boxa, int width, int removedups);
PTA* generatePtaHashBox (BOX* box, int spacing, int width, int orient, int outline);
PTA* generatePtaHashBoxa (BOXA* boxa, int spacing, int width, int orient, int outline, int removedups);
PTAA* generatePtaaBoxa (BOXA* boxa);
PTAA* generatePtaaHashBoxa (BOXA* boxa, int spacing, int width, int orient, int outline);
PTA* generatePtaPolyline (PTA* ptas, int width, int closeflag, int removedups);
PTA* generatePtaGrid (int w, int h, int nx, int ny, int width);
PTA* convertPtaLineTo4cc (PTA* ptas);
PTA* generatePtaFilledCircle (int radius);
PTA* generatePtaFilledSquare (int side);
PTA* generatePtaLineFromPt (int x, int y, double length, double radang);
int locatePtRadially (int xr, int yr, double dist, double radang, double* px, double* py);
int pixRenderPlotFromNuma (PIX** ppix, NUMA* na, int plotloc, int linewidth, int max, uint color);
PTA* makePlotPtaFromNuma (NUMA* na, int size, int plotloc, int linewidth, int max);
int pixRenderPlotFromNumaGen (PIX** ppix, NUMA* na, int orient, int linewidth, int refpos, int max, int drawref, uint color);
PTA* makePlotPtaFromNumaGen (NUMA* na, int orient, int linewidth, int refpos, int max, int drawref);
int pixRenderPta (PIX* pix, PTA* pta, int op);
int pixRenderPtaArb (PIX* pix, PTA* pta, ubyte rval, ubyte gval, ubyte bval);
int pixRenderPtaBlend (PIX* pix, PTA* pta, ubyte rval, ubyte gval, ubyte bval, float fract);
int pixRenderLine (PIX* pix, int x1, int y1, int x2, int y2, int width, int op);
int pixRenderLineArb (PIX* pix, int x1, int y1, int x2, int y2, int width, ubyte rval, ubyte gval, ubyte bval);
int pixRenderLineBlend (PIX* pix, int x1, int y1, int x2, int y2, int width, ubyte rval, ubyte gval, ubyte bval, float fract);
int pixRenderBox (PIX* pix, BOX* box, int width, int op);
int pixRenderBoxArb (PIX* pix, BOX* box, int width, ubyte rval, ubyte gval, ubyte bval);
int pixRenderBoxBlend (PIX* pix, BOX* box, int width, ubyte rval, ubyte gval, ubyte bval, float fract);
int pixRenderBoxa (PIX* pix, BOXA* boxa, int width, int op);
int pixRenderBoxaArb (PIX* pix, BOXA* boxa, int width, ubyte rval, ubyte gval, ubyte bval);
int pixRenderBoxaBlend (PIX* pix, BOXA* boxa, int width, ubyte rval, ubyte gval, ubyte bval, float fract, int removedups);
int pixRenderHashBox (PIX* pix, BOX* box, int spacing, int width, int orient, int outline, int op);
int pixRenderHashBoxArb (PIX* pix, BOX* box, int spacing, int width, int orient, int outline, int rval, int gval, int bval);
int pixRenderHashBoxBlend (PIX* pix, BOX* box, int spacing, int width, int orient, int outline, int rval, int gval, int bval, float fract);
int pixRenderHashMaskArb (PIX* pix, PIX* pixm, int x, int y, int spacing, int width, int orient, int outline, int rval, int gval, int bval);
int pixRenderHashBoxa (PIX* pix, BOXA* boxa, int spacing, int width, int orient, int outline, int op);
int pixRenderHashBoxaArb (PIX* pix, BOXA* boxa, int spacing, int width, int orient, int outline, int rval, int gval, int bval);
int pixRenderHashBoxaBlend (PIX* pix, BOXA* boxa, int spacing, int width, int orient, int outline, int rval, int gval, int bval, float fract);
int pixRenderPolyline (PIX* pix, PTA* ptas, int width, int op, int closeflag);
int pixRenderPolylineArb (PIX* pix, PTA* ptas, int width, ubyte rval, ubyte gval, ubyte bval, int closeflag);
int pixRenderPolylineBlend (PIX* pix, PTA* ptas, int width, ubyte rval, ubyte gval, ubyte bval, float fract, int closeflag, int removedups);
int pixRenderGridArb (PIX* pix, int nx, int ny, int width, ubyte rval, ubyte gval, ubyte bval);
PIX* pixRenderRandomCmapPtaa (PIX* pix, PTAA* ptaa, int polyflag, int width, int closeflag);
PIX* pixRenderPolygon (PTA* ptas, int width, int* pxmin, int* pymin);
PIX* pixFillPolygon (PIX* pixs, PTA* pta, int xmin, int ymin);
PIX* pixRenderContours (PIX* pixs, int startval, int incr, int outdepth);
PIX* fpixAutoRenderContours (FPIX* fpix, int ncontours);
PIX* fpixRenderContours (FPIX* fpixs, float incr, float proxim);
PTA* pixGeneratePtaBoundary (PIX* pixs, int width);
PIX* pixErodeGray (PIX* pixs, int hsize, int vsize);
PIX* pixDilateGray (PIX* pixs, int hsize, int vsize);
PIX* pixOpenGray (PIX* pixs, int hsize, int vsize);
PIX* pixCloseGray (PIX* pixs, int hsize, int vsize);
PIX* pixErodeGray3 (PIX* pixs, int hsize, int vsize);
PIX* pixDilateGray3 (PIX* pixs, int hsize, int vsize);
PIX* pixOpenGray3 (PIX* pixs, int hsize, int vsize);
PIX* pixCloseGray3 (PIX* pixs, int hsize, int vsize);
PIX* pixDitherToBinary (PIX* pixs);
PIX* pixDitherToBinarySpec (PIX* pixs, int lowerclip, int upperclip);
void ditherToBinaryLineLow (uint* lined, int w, uint* bufs1, uint* bufs2, int lowerclip, int upperclip, int lastlineflag);
PIX* pixThresholdToBinary (PIX* pixs, int thresh);
void thresholdToBinaryLineLow (uint* lined, int w, uint* lines, int d, int thresh);
PIX* pixVarThresholdToBinary (PIX* pixs, PIX* pixg);
PIX* pixAdaptThresholdToBinary (PIX* pixs, PIX* pixm, float gamma);
PIX* pixAdaptThresholdToBinaryGen (PIX* pixs, PIX* pixm, float gamma, int blackval, int whiteval, int thresh);
PIX* pixGenerateMaskByValue (PIX* pixs, int val, int usecmap);
PIX* pixGenerateMaskByBand (PIX* pixs, int lower, int upper, int inband, int usecmap);
PIX* pixDitherTo2bpp (PIX* pixs, int cmapflag);
PIX* pixDitherTo2bppSpec (PIX* pixs, int lowerclip, int upperclip, int cmapflag);
PIX* pixThresholdTo2bpp (PIX* pixs, int nlevels, int cmapflag);
PIX* pixThresholdTo4bpp (PIX* pixs, int nlevels, int cmapflag);
PIX* pixThresholdOn8bpp (PIX* pixs, int nlevels, int cmapflag);
PIX* pixThresholdGrayArb (PIX* pixs, const(char)* edgevals, int outdepth, int use_average, int setblack, int setwhite);
int* makeGrayQuantIndexTable (int nlevels);
int makeGrayQuantTableArb (NUMA* na, int outdepth, int** ptab, PIXCMAP** pcmap);
PIX* pixGenerateMaskByBand32 (PIX* pixs, uint refval, int delm, int delp, float fractm, float fractp);
PIX* pixGenerateMaskByDiscr32 (PIX* pixs, uint refval1, uint refval2, int distflag);
PIX* pixGrayQuantFromHisto (PIX* pixd, PIX* pixs, PIX* pixm, float minfract, int maxsize);
PIX* pixGrayQuantFromCmap (PIX* pixs, PIXCMAP* cmap, int mindepth);
L_HASHMAP* l_hmapCreate (int ninit, int maxocc);
void l_hmapDestroy (L_HASHMAP** phmap);
L_HASHITEM* l_hmapLookup (L_HASHMAP* hmap, ulong key, ulong val, int op);
int l_hmapRehash (L_HASHMAP* hmap);
L_HEAP* lheapCreate (int n, int direction);
void lheapDestroy (L_HEAP** plh, int freeflag);
int lheapAdd (L_HEAP* lh, void* item);
void* lheapRemove (L_HEAP* lh);
int lheapGetCount (L_HEAP* lh);
void* lheapGetElement (L_HEAP* lh, int index);
int lheapSort (L_HEAP* lh);
int lheapSortStrictOrder (L_HEAP* lh);
int lheapPrint (FILE* fp, L_HEAP* lh);
JBCLASSER* jbRankHausInit (int components, int maxwidth, int maxheight, int size, float rank);
JBCLASSER* jbCorrelationInit (int components, int maxwidth, int maxheight, float thresh, float weightfactor);
JBCLASSER* jbCorrelationInitWithoutComponents (int components, int maxwidth, int maxheight, float thresh, float weightfactor);
int jbAddPages (JBCLASSER* classer, SARRAY* safiles);
int jbAddPage (JBCLASSER* classer, PIX* pixs);
int jbAddPageComponents (JBCLASSER* classer, PIX* pixs, BOXA* boxas, PIXA* pixas);
int jbClassifyRankHaus (JBCLASSER* classer, BOXA* boxa, PIXA* pixas);
int pixHaustest (PIX* pix1, PIX* pix2, PIX* pix3, PIX* pix4, float delx, float dely, int maxdiffw, int maxdiffh);
int pixRankHaustest (PIX* pix1, PIX* pix2, PIX* pix3, PIX* pix4, float delx, float dely, int maxdiffw, int maxdiffh, int area1, int area3, float rank, int* tab8);
int jbClassifyCorrelation (JBCLASSER* classer, BOXA* boxa, PIXA* pixas);
int jbGetComponents (PIX* pixs, int components, int maxwidth, int maxheight, BOXA** pboxad, PIXA** ppixad);
int pixWordMaskByDilation (PIX* pixs, PIX** ppixm, int* psize, PIXA* pixadb);
int pixWordBoxesByDilation (PIX* pixs, int minwidth, int minheight, int maxwidth, int maxheight, BOXA** pboxa, int* psize, PIXA* pixadb);
PIXA* jbAccumulateComposites (PIXAA* pixaa, NUMA** pna, PTA** pptat);
PIXA* jbTemplatesFromComposites (PIXA* pixac, NUMA* na);
JBCLASSER* jbClasserCreate (int method, int components);
void jbClasserDestroy (JBCLASSER** pclasser);
JBDATA* jbDataSave (JBCLASSER* classer);
void jbDataDestroy (JBDATA** pdata);
int jbDataWrite (const(char)* rootout, JBDATA* jbdata);
JBDATA* jbDataRead (const(char)* rootname);
PIXA* jbDataRender (JBDATA* data, int debugflag);
int jbGetULCorners (JBCLASSER* classer, PIX* pixs, BOXA* boxa);
int jbGetLLCorners (JBCLASSER* classer);
int readHeaderJp2k (const(char)* filename, int* pw, int* ph, int* pbps, int* pspp, int* pcodec);
int freadHeaderJp2k (FILE* fp, int* pw, int* ph, int* pbps, int* pspp, int* pcodec);
int readHeaderMemJp2k (const(ubyte)* data, size_t size, int* pw, int* ph, int* pbps, int* pspp, int* pcodec);
int fgetJp2kResolution (FILE* fp, int* pxres, int* pyres);
PIX* pixReadJp2k (const(char)* filename, uint reduction, BOX* box, int hint, int debug_);
PIX* pixReadStreamJp2k (FILE* fp, uint reduction, BOX* box, int hint, int debug_);
int pixWriteJp2k (const(char)* filename, PIX* pix, int quality, int nlevels, int hint, int debug_);
int pixWriteStreamJp2k (FILE* fp, PIX* pix, int quality, int nlevels, int codec, int hint, int debug_);
PIX* pixReadMemJp2k (const(ubyte)* data, size_t size, uint reduction, BOX* box, int hint, int debug_);
int pixWriteMemJp2k (ubyte** pdata, size_t* psize, PIX* pix, int quality, int nlevels, int hint, int debug_);
PIX* pixReadJpeg (const(char)* filename, int cmapflag, int reduction, int* pnwarn, int hint);
PIX* pixReadStreamJpeg (FILE* fp, int cmapflag, int reduction, int* pnwarn, int hint);
int readHeaderJpeg (const(char)* filename, int* pw, int* ph, int* pspp, int* pycck, int* pcmyk);
int freadHeaderJpeg (FILE* fp, int* pw, int* ph, int* pspp, int* pycck, int* pcmyk);
int fgetJpegResolution (FILE* fp, int* pxres, int* pyres);
int fgetJpegComment (FILE* fp, ubyte** pcomment);
int pixWriteJpeg (const(char)* filename, PIX* pix, int quality, int progressive);
int pixWriteStreamJpeg (FILE* fp, PIX* pixs, int quality, int progressive);
PIX* pixReadMemJpeg (const(ubyte)* data, size_t size, int cmflag, int reduction, int* pnwarn, int hint);
int readHeaderMemJpeg (const(ubyte)* data, size_t size, int* pw, int* ph, int* pspp, int* pycck, int* pcmyk);
int readResolutionMemJpeg (const(ubyte)* data, size_t size, int* pxres, int* pyres);
int pixWriteMemJpeg (ubyte** pdata, size_t* psize, PIX* pix, int quality, int progressive);
int pixSetChromaSampling (PIX* pix, int sampling);
L_KERNEL* kernelCreate (int height, int width);
void kernelDestroy (L_KERNEL** pkel);
L_KERNEL* kernelCopy (L_KERNEL* kels);
int kernelGetElement (L_KERNEL* kel, int row, int col, float* pval);
int kernelSetElement (L_KERNEL* kel, int row, int col, float val);
int kernelGetParameters (L_KERNEL* kel, int* psy, int* psx, int* pcy, int* pcx);
int kernelSetOrigin (L_KERNEL* kel, int cy, int cx);
int kernelGetSum (L_KERNEL* kel, float* psum);
int kernelGetMinMax (L_KERNEL* kel, float* pmin, float* pmax);
L_KERNEL* kernelNormalize (L_KERNEL* kels, float normsum);
L_KERNEL* kernelInvert (L_KERNEL* kels);
float** create2dFloatArray (int sy, int sx);
L_KERNEL* kernelRead (const(char)* fname);
L_KERNEL* kernelReadStream (FILE* fp);
int kernelWrite (const(char)* fname, L_KERNEL* kel);
int kernelWriteStream (FILE* fp, L_KERNEL* kel);
L_KERNEL* kernelCreateFromString (int h, int w, int cy, int cx, const(char)* kdata);
L_KERNEL* kernelCreateFromFile (const(char)* filename);
L_KERNEL* kernelCreateFromPix (PIX* pix, int cy, int cx);
PIX* kernelDisplayInPix (L_KERNEL* kel, int size, int gthick);
NUMA* parseStringForNumbers (const(char)* str, const(char)* seps);
L_KERNEL* makeFlatKernel (int height, int width, int cy, int cx);
L_KERNEL* makeGaussianKernel (int halfh, int halfw, float stdev, float max);
int makeGaussianKernelSep (int halfh, int halfw, float stdev, float max, L_KERNEL** pkelx, L_KERNEL** pkely);
L_KERNEL* makeDoGKernel (int halfh, int halfw, float stdev, float ratio);
char* getImagelibVersions ();
void listDestroy (DLLIST** phead);
int listAddToHead (DLLIST** phead, void* data);
int listAddToTail (DLLIST** phead, DLLIST** ptail, void* data);
int listInsertBefore (DLLIST** phead, DLLIST* elem, void* data);
int listInsertAfter (DLLIST** phead, DLLIST* elem, void* data);
void* listRemoveElement (DLLIST** phead, DLLIST* elem);
void* listRemoveFromHead (DLLIST** phead);
void* listRemoveFromTail (DLLIST** phead, DLLIST** ptail);
DLLIST* listFindElement (DLLIST* head, void* data);
DLLIST* listFindTail (DLLIST* head);
int listGetCount (DLLIST* head);
int listReverse (DLLIST** phead);
int listJoin (DLLIST** phead1, DLLIST** phead2);
L_AMAP* l_amapCreate (int keytype);
RB_TYPE* l_amapFind (L_AMAP* m, RB_TYPE key);
void l_amapInsert (L_AMAP* m, RB_TYPE key, RB_TYPE value);
void l_amapDelete (L_AMAP* m, RB_TYPE key);
void l_amapDestroy (L_AMAP** pm);
L_AMAP_NODE* l_amapGetFirst (L_AMAP* m);
L_AMAP_NODE* l_amapGetNext (L_AMAP_NODE* n);
L_AMAP_NODE* l_amapGetLast (L_AMAP* m);
L_AMAP_NODE* l_amapGetPrev (L_AMAP_NODE* n);
int l_amapSize (L_AMAP* m);
L_ASET* l_asetCreate (int keytype);
RB_TYPE* l_asetFind (L_ASET* s, RB_TYPE key);
void l_asetInsert (L_ASET* s, RB_TYPE key);
void l_asetDelete (L_ASET* s, RB_TYPE key);
void l_asetDestroy (L_ASET** ps);
L_ASET_NODE* l_asetGetFirst (L_ASET* s);
L_ASET_NODE* l_asetGetNext (L_ASET_NODE* n);
L_ASET_NODE* l_asetGetLast (L_ASET* s);
L_ASET_NODE* l_asetGetPrev (L_ASET_NODE* n);
int l_asetSize (L_ASET* s);
PIX* generateBinaryMaze (int w, int h, int xi, int yi, float wallps, float ranis);
PTA* pixSearchBinaryMaze (PIX* pixs, int xi, int yi, int xf, int yf, PIX** ppixd);
PTA* pixSearchGrayMaze (PIX* pixs, int xi, int yi, int xf, int yf, PIX** ppixd);
PIX* pixDilate (PIX* pixd, PIX* pixs, SEL* sel);
PIX* pixErode (PIX* pixd, PIX* pixs, SEL* sel);
PIX* pixHMT (PIX* pixd, PIX* pixs, SEL* sel);
PIX* pixOpen (PIX* pixd, PIX* pixs, SEL* sel);
PIX* pixClose (PIX* pixd, PIX* pixs, SEL* sel);
PIX* pixCloseSafe (PIX* pixd, PIX* pixs, SEL* sel);
PIX* pixOpenGeneralized (PIX* pixd, PIX* pixs, SEL* sel);
PIX* pixCloseGeneralized (PIX* pixd, PIX* pixs, SEL* sel);
PIX* pixDilateBrick (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixErodeBrick (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixOpenBrick (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixCloseBrick (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixCloseSafeBrick (PIX* pixd, PIX* pixs, int hsize, int vsize);
int selectComposableSels (int size, int direction, SEL** psel1, SEL** psel2);
int selectComposableSizes (int size, int* pfactor1, int* pfactor2);
PIX* pixDilateCompBrick (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixErodeCompBrick (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixOpenCompBrick (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixCloseCompBrick (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixCloseSafeCompBrick (PIX* pixd, PIX* pixs, int hsize, int vsize);
void resetMorphBoundaryCondition (int bc);
uint getMorphBorderPixelColor (int type, int depth);
PIX* pixExtractBoundary (PIX* pixs, int type);
PIX* pixMorphSequenceMasked (PIX* pixs, PIX* pixm, const(char)* sequence, int dispsep);
PIX* pixMorphSequenceByComponent (PIX* pixs, const(char)* sequence, int connectivity, int minw, int minh, BOXA** pboxa);
PIXA* pixaMorphSequenceByComponent (PIXA* pixas, const(char)* sequence, int minw, int minh);
PIX* pixMorphSequenceByRegion (PIX* pixs, PIX* pixm, const(char)* sequence, int connectivity, int minw, int minh, BOXA** pboxa);
PIXA* pixaMorphSequenceByRegion (PIX* pixs, PIXA* pixam, const(char)* sequence, int minw, int minh);
PIX* pixUnionOfMorphOps (PIX* pixs, SELA* sela, int type);
PIX* pixIntersectionOfMorphOps (PIX* pixs, SELA* sela, int type);
PIX* pixSelectiveConnCompFill (PIX* pixs, int connectivity, int minw, int minh);
int pixRemoveMatchedPattern (PIX* pixs, PIX* pixp, PIX* pixe, int x0, int y0, int dsize);
PIX* pixDisplayMatchedPattern (PIX* pixs, PIX* pixp, PIX* pixe, int x0, int y0, uint color, float scale, int nlevels);
PIXA* pixaExtendByMorph (PIXA* pixas, int type, int niters, SEL* sel, int include);
PIXA* pixaExtendByScaling (PIXA* pixas, NUMA* nasc, int type, int include);
PIX* pixSeedfillMorph (PIX* pixs, PIX* pixm, int maxiters, int connectivity);
NUMA* pixRunHistogramMorph (PIX* pixs, int runtype, int direction, int maxsize);
PIX* pixTophat (PIX* pixs, int hsize, int vsize, int type);
PIX* pixHDome (PIX* pixs, int height, int connectivity);
PIX* pixFastTophat (PIX* pixs, int xsize, int ysize, int type);
PIX* pixMorphGradient (PIX* pixs, int hsize, int vsize, int smoothing);
PTA* pixaCentroids (PIXA* pixa);
int pixCentroid (PIX* pix, int* centtab, int* sumtab, float* pxave, float* pyave);
PIX* pixDilateBrickDwa (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixErodeBrickDwa (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixOpenBrickDwa (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixCloseBrickDwa (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixDilateCompBrickDwa (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixErodeCompBrickDwa (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixOpenCompBrickDwa (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixCloseCompBrickDwa (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixDilateCompBrickExtendDwa (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixErodeCompBrickExtendDwa (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixOpenCompBrickExtendDwa (PIX* pixd, PIX* pixs, int hsize, int vsize);
PIX* pixCloseCompBrickExtendDwa (PIX* pixd, PIX* pixs, int hsize, int vsize);
int getExtendedCompositeParameters (int size, int* pn, int* pextra, int* pactualsize);
PIX* pixMorphSequence (PIX* pixs, const(char)* sequence, int dispsep);
PIX* pixMorphCompSequence (PIX* pixs, const(char)* sequence, int dispsep);
PIX* pixMorphSequenceDwa (PIX* pixs, const(char)* sequence, int dispsep);
PIX* pixMorphCompSequenceDwa (PIX* pixs, const(char)* sequence, int dispsep);
int morphSequenceVerify (SARRAY* sa);
PIX* pixGrayMorphSequence (PIX* pixs, const(char)* sequence, int dispsep, int dispy);
PIX* pixColorMorphSequence (PIX* pixs, const(char)* sequence, int dispsep, int dispy);
NUMA* numaCreate (int n);
NUMA* numaCreateFromIArray (int* iarray, int size);
NUMA* numaCreateFromFArray (float* farray, int size, int copyflag);
NUMA* numaCreateFromString (const(char)* str);
void numaDestroy (NUMA** pna);
NUMA* numaCopy (NUMA* na);
NUMA* numaClone (NUMA* na);
int numaEmpty (NUMA* na);
int numaAddNumber (NUMA* na, float val);
int numaInsertNumber (NUMA* na, int index, float val);
int numaRemoveNumber (NUMA* na, int index);
int numaReplaceNumber (NUMA* na, int index, float val);
int numaGetCount (NUMA* na);
int numaSetCount (NUMA* na, int newcount);
int numaGetFValue (NUMA* na, int index, float* pval);
int numaGetIValue (NUMA* na, int index, int* pival);
int numaSetValue (NUMA* na, int index, float val);
int numaShiftValue (NUMA* na, int index, float diff);
int* numaGetIArray (NUMA* na);
float* numaGetFArray (NUMA* na, int copyflag);
int numaGetRefcount (NUMA* na);
int numaChangeRefcount (NUMA* na, int delta);
int numaGetParameters (NUMA* na, float* pstartx, float* pdelx);
int numaSetParameters (NUMA* na, float startx, float delx);
int numaCopyParameters (NUMA* nad, NUMA* nas);
SARRAY* numaConvertToSarray (NUMA* na, int size1, int size2, int addzeros, int type);
NUMA* numaRead (const(char)* filename);
NUMA* numaReadStream (FILE* fp);
NUMA* numaReadMem (const(ubyte)* data, size_t size);
int numaWriteDebug (const(char)* filename, NUMA* na);
int numaWrite (const(char)* filename, NUMA* na);
int numaWriteStream (FILE* fp, NUMA* na);
int numaWriteStderr (NUMA* na);
int numaWriteMem (ubyte** pdata, size_t* psize, NUMA* na);
NUMAA* numaaCreate (int n);
NUMAA* numaaCreateFull (int nptr, int n);
int numaaTruncate (NUMAA* naa);
void numaaDestroy (NUMAA** pnaa);
int numaaAddNuma (NUMAA* naa, NUMA* na, int copyflag);
int numaaGetCount (NUMAA* naa);
int numaaGetNumaCount (NUMAA* naa, int index);
int numaaGetNumberCount (NUMAA* naa);
NUMA** numaaGetPtrArray (NUMAA* naa);
NUMA* numaaGetNuma (NUMAA* naa, int index, int accessflag);
int numaaReplaceNuma (NUMAA* naa, int index, NUMA* na);
int numaaGetValue (NUMAA* naa, int i, int j, float* pfval, int* pival);
int numaaAddNumber (NUMAA* naa, int index, float val);
NUMAA* numaaRead (const(char)* filename);
NUMAA* numaaReadStream (FILE* fp);
NUMAA* numaaReadMem (const(ubyte)* data, size_t size);
int numaaWrite (const(char)* filename, NUMAA* naa);
int numaaWriteStream (FILE* fp, NUMAA* naa);
int numaaWriteMem (ubyte** pdata, size_t* psize, NUMAA* naa);
NUMA* numaArithOp (NUMA* nad, NUMA* na1, NUMA* na2, int op);
NUMA* numaLogicalOp (NUMA* nad, NUMA* na1, NUMA* na2, int op);
NUMA* numaInvert (NUMA* nad, NUMA* nas);
int numaSimilar (NUMA* na1, NUMA* na2, float maxdiff, int* psimilar);
int numaAddToNumber (NUMA* na, int index, float val);
int numaGetMin (NUMA* na, float* pminval, int* piminloc);
int numaGetMax (NUMA* na, float* pmaxval, int* pimaxloc);
int numaGetSum (NUMA* na, float* psum);
NUMA* numaGetPartialSums (NUMA* na);
int numaGetSumOnInterval (NUMA* na, int first, int last, float* psum);
int numaHasOnlyIntegers (NUMA* na, int* pallints);
int numaGetMean (NUMA* na, float* pave);
int numaGetMeanAbsval (NUMA* na, float* paveabs);
NUMA* numaSubsample (NUMA* nas, int subfactor);
NUMA* numaMakeDelta (NUMA* nas);
NUMA* numaMakeSequence (float startval, float increment, int size);
NUMA* numaMakeConstant (float val, int size);
NUMA* numaMakeAbsval (NUMA* nad, NUMA* nas);
NUMA* numaAddBorder (NUMA* nas, int left, int right, float val);
NUMA* numaAddSpecifiedBorder (NUMA* nas, int left, int right, int type);
NUMA* numaRemoveBorder (NUMA* nas, int left, int right);
int numaCountNonzeroRuns (NUMA* na, int* pcount);
int numaGetNonzeroRange (NUMA* na, float eps, int* pfirst, int* plast);
int numaGetCountRelativeToZero (NUMA* na, int type, int* pcount);
NUMA* numaClipToInterval (NUMA* nas, int first, int last);
NUMA* numaMakeThresholdIndicator (NUMA* nas, float thresh, int type);
NUMA* numaUniformSampling (NUMA* nas, int nsamp);
NUMA* numaReverse (NUMA* nad, NUMA* nas);
NUMA* numaLowPassIntervals (NUMA* nas, float thresh, float maxn);
NUMA* numaThresholdEdges (NUMA* nas, float thresh1, float thresh2, float maxn);
int numaGetSpanValues (NUMA* na, int span, int* pstart, int* pend);
int numaGetEdgeValues (NUMA* na, int edge, int* pstart, int* pend, int* psign);
int numaInterpolateEqxVal (float startx, float deltax, NUMA* nay, int type, float xval, float* pyval);
int numaInterpolateArbxVal (NUMA* nax, NUMA* nay, int type, float xval, float* pyval);
int numaInterpolateEqxInterval (float startx, float deltax, NUMA* nasy, int type, float x0, float x1, int npts, NUMA** pnax, NUMA** pnay);
int numaInterpolateArbxInterval (NUMA* nax, NUMA* nay, int type, float x0, float x1, int npts, NUMA** pnadx, NUMA** pnady);
int numaFitMax (NUMA* na, float* pmaxval, NUMA* naloc, float* pmaxloc);
int numaDifferentiateInterval (NUMA* nax, NUMA* nay, float x0, float x1, int npts, NUMA** pnadx, NUMA** pnady);
int numaIntegrateInterval (NUMA* nax, NUMA* nay, float x0, float x1, int npts, float* psum);
int numaSortGeneral (NUMA* na, NUMA** pnasort, NUMA** pnaindex, NUMA** pnainvert, int sortorder, int sorttype);
NUMA* numaSortAutoSelect (NUMA* nas, int sortorder);
NUMA* numaSortIndexAutoSelect (NUMA* nas, int sortorder);
int numaChooseSortType (NUMA* nas);
NUMA* numaSort (NUMA* naout, NUMA* nain, int sortorder);
NUMA* numaBinSort (NUMA* nas, int sortorder);
NUMA* numaGetSortIndex (NUMA* na, int sortorder);
NUMA* numaGetBinSortIndex (NUMA* nas, int sortorder);
NUMA* numaSortByIndex (NUMA* nas, NUMA* naindex);
int numaIsSorted (NUMA* nas, int sortorder, int* psorted);
int numaSortPair (NUMA* nax, NUMA* nay, int sortorder, NUMA** pnasx, NUMA** pnasy);
NUMA* numaInvertMap (NUMA* nas);
int numaAddSorted (NUMA* na, float val);
int numaFindSortedLoc (NUMA* na, float val, int* pindex);
NUMA* numaPseudorandomSequence (int size, int seed);
NUMA* numaRandomPermutation (NUMA* nas, int seed);
int numaGetRankValue (NUMA* na, float fract, NUMA* nasort, int usebins, float* pval);
int numaGetMedian (NUMA* na, float* pval);
int numaGetBinnedMedian (NUMA* na, int* pval);
int numaGetMeanDevFromMedian (NUMA* na, float med, float* pdev);
int numaGetMedianDevFromMedian (NUMA* na, float* pmed, float* pdev);
int numaGetMode (NUMA* na, float* pval, int* pcount);
int numaJoin (NUMA* nad, NUMA* nas, int istart, int iend);
int numaaJoin (NUMAA* naad, NUMAA* naas, int istart, int iend);
NUMA* numaaFlattenToNuma (NUMAA* naa);
NUMA* numaErode (NUMA* nas, int size);
NUMA* numaDilate (NUMA* nas, int size);
NUMA* numaOpen (NUMA* nas, int size);
NUMA* numaClose (NUMA* nas, int size);
NUMA* numaTransform (NUMA* nas, float shift, float scale);
int numaSimpleStats (NUMA* na, int first, int last, float* pmean, float* pvar, float* prvar);
int numaWindowedStats (NUMA* nas, int wc, NUMA** pnam, NUMA** pnams, NUMA** pnav, NUMA** pnarv);
NUMA* numaWindowedMean (NUMA* nas, int wc);
NUMA* numaWindowedMeanSquare (NUMA* nas, int wc);
int numaWindowedVariance (NUMA* nam, NUMA* nams, NUMA** pnav, NUMA** pnarv);
NUMA* numaWindowedMedian (NUMA* nas, int halfwin);
NUMA* numaConvertToInt (NUMA* nas);
NUMA* numaMakeHistogram (NUMA* na, int maxbins, int* pbinsize, int* pbinstart);
NUMA* numaMakeHistogramAuto (NUMA* na, int maxbins);
NUMA* numaMakeHistogramClipped (NUMA* na, float binsize, float maxsize);
NUMA* numaRebinHistogram (NUMA* nas, int newsize);
NUMA* numaNormalizeHistogram (NUMA* nas, float tsum);
int numaGetStatsUsingHistogram (NUMA* na, int maxbins, float* pmin, float* pmax, float* pmean, float* pvariance, float* pmedian, float rank, float* prval, NUMA** phisto);
int numaGetHistogramStats (NUMA* nahisto, float startx, float deltax, float* pxmean, float* pxmedian, float* pxmode, float* pxvariance);
int numaGetHistogramStatsOnInterval (NUMA* nahisto, float startx, float deltax, int ifirst, int ilast, float* pxmean, float* pxmedian, float* pxmode, float* pxvariance);
int numaMakeRankFromHistogram (float startx, float deltax, NUMA* nasy, int npts, NUMA** pnax, NUMA** pnay);
int numaHistogramGetRankFromVal (NUMA* na, float rval, float* prank);
int numaHistogramGetValFromRank (NUMA* na, float rank, float* prval);
int numaDiscretizeSortedInBins (NUMA* na, int nbins, NUMA** pnabinval);
int numaDiscretizeHistoInBins (NUMA* na, int nbins, NUMA** pnabinval, NUMA** pnarank);
int numaGetRankBinValues (NUMA* na, int nbins, NUMA** pnam);
NUMA* numaGetUniformBinSizes (int ntotal, int nbins);
int numaSplitDistribution (NUMA* na, float scorefract, int* psplitindex, float* pave1, float* pave2, float* pnum1, float* pnum2, NUMA** pnascore);
int grayHistogramsToEMD (NUMAA* naa1, NUMAA* naa2, NUMA** pnad);
int numaEarthMoverDistance (NUMA* na1, NUMA* na2, float* pdist);
int grayInterHistogramStats (NUMAA* naa, int wc, NUMA** pnam, NUMA** pnams, NUMA** pnav, NUMA** pnarv);
NUMA* numaFindPeaks (NUMA* nas, int nmax, float fract1, float fract2);
NUMA* numaFindExtrema (NUMA* nas, float delta, NUMA** pnav);
int numaFindLocForThreshold (NUMA* na, int skip, int* pthresh, float* pfract);
int numaCountReversals (NUMA* nas, float minreversal, int* pnr, float* prd);
int numaSelectCrossingThreshold (NUMA* nax, NUMA* nay, float estthresh, float* pbestthresh);
NUMA* numaCrossingsByThreshold (NUMA* nax, NUMA* nay, float thresh);
NUMA* numaCrossingsByPeaks (NUMA* nax, NUMA* nay, float delta);
int numaEvalBestHaarParameters (NUMA* nas, float relweight, int nwidth, int nshift, float minwidth, float maxwidth, float* pbestwidth, float* pbestshift, float* pbestscore);
int numaEvalHaarSum (NUMA* nas, float width, float shift, float relweight, float* pscore);
NUMA* genConstrainedNumaInRange (int first, int last, int nmax, int use_pairs);
int pixGetRegionsBinary (PIX* pixs, PIX** ppixhm, PIX** ppixtm, PIX** ppixtb, PIXA* pixadb);
PIX* pixGenHalftoneMask (PIX* pixs, PIX** ppixtext, int* phtfound, int debug_);
PIX* pixGenerateHalftoneMask (PIX* pixs, PIX** ppixtext, int* phtfound, PIXA* pixadb);
PIX* pixGenTextlineMask (PIX* pixs, PIX** ppixvws, int* ptlfound, PIXA* pixadb);
PIX* pixGenTextblockMask (PIX* pixs, PIX* pixvws, PIXA* pixadb);
BOX* pixFindPageForeground (PIX* pixs, int threshold, int mindist, int erasedist, int showmorph, PIXAC* pixac);
int pixSplitIntoCharacters (PIX* pixs, int minw, int minh, BOXA** pboxa, PIXA** ppixa, PIX** ppixdebug);
BOXA* pixSplitComponentWithProfile (PIX* pixs, int delta, int mindel, PIX** ppixdebug);
PIXA* pixExtractTextlines (PIX* pixs, int maxw, int maxh, int minw, int minh, int adjw, int adjh, PIXA* pixadb);
PIXA* pixExtractRawTextlines (PIX* pixs, int maxw, int maxh, int adjw, int adjh, PIXA* pixadb);
int pixCountTextColumns (PIX* pixs, float deltafract, float peakfract, float clipfract, int* pncols, PIXA* pixadb);
int pixDecideIfText (PIX* pixs, BOX* box, int* pistext, PIXA* pixadb);
int pixFindThreshFgExtent (PIX* pixs, int thresh, int* ptop, int* pbot);
int pixDecideIfTable (PIX* pixs, BOX* box, int orient, int* pscore, PIXA* pixadb);
PIX* pixPrepare1bpp (PIX* pixs, BOX* box, float cropfract, int outres);
int pixEstimateBackground (PIX* pixs, int darkthresh, float edgecrop, int* pbg);
int pixFindLargeRectangles (PIX* pixs, int polarity, int nrect, BOXA** pboxa, PIX** ppixdb);
int pixFindLargestRectangle (PIX* pixs, int polarity, BOX** pbox, PIX** ppixdb);
BOX* pixFindRectangleInCC (PIX* pixs, BOX* boxs, float fract, int dir, int select, int debug_);
PIX* pixAutoPhotoinvert (PIX* pixs, int thresh, PIX** ppixm, PIXA* pixadb);
int pixSetSelectCmap (PIX* pixs, BOX* box, int sindex, int rval, int gval, int bval);
int pixColorGrayRegionsCmap (PIX* pixs, BOXA* boxa, int type, int rval, int gval, int bval);
int pixColorGrayCmap (PIX* pixs, BOX* box, int type, int rval, int gval, int bval);
int pixColorGrayMaskedCmap (PIX* pixs, PIX* pixm, int type, int rval, int gval, int bval);
int addColorizedGrayToCmap (PIXCMAP* cmap, int type, int rval, int gval, int bval, NUMA** pna);
int pixSetSelectMaskedCmap (PIX* pixs, PIX* pixm, int x, int y, int sindex, int rval, int gval, int bval);
int pixSetMaskedCmap (PIX* pixs, PIX* pixm, int x, int y, int rval, int gval, int bval);
char* parseForProtos (const(char)* filein, const(char)* prestring);
int partifyFiles (const(char)* dirname, const(char)* substr, int nparts, const(char)* outroot, const(char)* debugfile);
int partifyPixac (PIXAC* pixac, int nparts, const(char)* outroot, PIXA* pixadb);
BOXA* boxaGetWhiteblocks (BOXA* boxas, BOX* box, int sortflag, int maxboxes, float maxoverlap, int maxperim, float fract, int maxpops);
BOXA* boxaPruneSortedOnOverlap (BOXA* boxas, float maxoverlap);
int convertFilesToPdf (const(char)* dirname, const(char)* substr, int res, float scalefactor, int type, int quality, const(char)* title, const(char)* fileout);
int saConvertFilesToPdf (SARRAY* sa, int res, float scalefactor, int type, int quality, const(char)* title, const(char)* fileout);
int saConvertFilesToPdfData (SARRAY* sa, int res, float scalefactor, int type, int quality, const(char)* title, ubyte** pdata, size_t* pnbytes);
int selectDefaultPdfEncoding (PIX* pix, int* ptype);
int convertUnscaledFilesToPdf (const(char)* dirname, const(char)* substr, const(char)* title, const(char)* fileout);
int saConvertUnscaledFilesToPdf (SARRAY* sa, const(char)* title, const(char)* fileout);
int saConvertUnscaledFilesToPdfData (SARRAY* sa, const(char)* title, ubyte** pdata, size_t* pnbytes);
int convertUnscaledToPdfData (const(char)* fname, const(char)* title, ubyte** pdata, size_t* pnbytes);
int pixaConvertToPdf (PIXA* pixa, int res, float scalefactor, int type, int quality, const(char)* title, const(char)* fileout);
int pixaConvertToPdfData (PIXA* pixa, int res, float scalefactor, int type, int quality, const(char)* title, ubyte** pdata, size_t* pnbytes);
int convertToPdf (const(char)* filein, int type, int quality, const(char)* fileout, int x, int y, int res, const(char)* title, L_PDF_DATA** plpd, int position);
int convertImageDataToPdf (ubyte* imdata, size_t size, int type, int quality, const(char)* fileout, int x, int y, int res, const(char)* title, L_PDF_DATA** plpd, int position);
int convertToPdfData (const(char)* filein, int type, int quality, ubyte** pdata, size_t* pnbytes, int x, int y, int res, const(char)* title, L_PDF_DATA** plpd, int position);
int convertImageDataToPdfData (ubyte* imdata, size_t size, int type, int quality, ubyte** pdata, size_t* pnbytes, int x, int y, int res, const(char)* title, L_PDF_DATA** plpd, int position);
int pixConvertToPdf (PIX* pix, int type, int quality, const(char)* fileout, int x, int y, int res, const(char)* title, L_PDF_DATA** plpd, int position);
int pixWriteStreamPdf (FILE* fp, PIX* pix, int res, const(char)* title);
int pixWriteMemPdf (ubyte** pdata, size_t* pnbytes, PIX* pix, int res, const(char)* title);
int convertSegmentedFilesToPdf (const(char)* dirname, const(char)* substr, int res, int type, int thresh, BOXAA* baa, int quality, float scalefactor, const(char)* title, const(char)* fileout);
BOXAA* convertNumberedMasksToBoxaa (const(char)* dirname, const(char)* substr, int numpre, int numpost);
int convertToPdfSegmented (const(char)* filein, int res, int type, int thresh, BOXA* boxa, int quality, float scalefactor, const(char)* title, const(char)* fileout);
int pixConvertToPdfSegmented (PIX* pixs, int res, int type, int thresh, BOXA* boxa, int quality, float scalefactor, const(char)* title, const(char)* fileout);
int convertToPdfDataSegmented (const(char)* filein, int res, int type, int thresh, BOXA* boxa, int quality, float scalefactor, const(char)* title, ubyte** pdata, size_t* pnbytes);
int pixConvertToPdfDataSegmented (PIX* pixs, int res, int type, int thresh, BOXA* boxa, int quality, float scalefactor, const(char)* title, ubyte** pdata, size_t* pnbytes);
int concatenatePdf (const(char)* dirname, const(char)* substr, const(char)* fileout);
int saConcatenatePdf (SARRAY* sa, const(char)* fileout);
int ptraConcatenatePdf (L_PTRA* pa, const(char)* fileout);
int concatenatePdfToData (const(char)* dirname, const(char)* substr, ubyte** pdata, size_t* pnbytes);
int saConcatenatePdfToData (SARRAY* sa, ubyte** pdata, size_t* pnbytes);
int pixConvertToPdfData (PIX* pix, int type, int quality, ubyte** pdata, size_t* pnbytes, int x, int y, int res, const(char)* title, L_PDF_DATA** plpd, int position);
int ptraConcatenatePdfToData (L_PTRA* pa_data, SARRAY* sa, ubyte** pdata, size_t* pnbytes);
int convertTiffMultipageToPdf (const(char)* filein, const(char)* fileout);
int l_generateCIDataForPdf (const(char)* fname, PIX* pix, int quality, L_COMP_DATA** pcid);
int l_generateCIData (const(char)* fname, int type, int quality, int ascii85, L_COMP_DATA** pcid);
L_COMP_DATA* l_generateFlateDataPdf (const(char)* fname, PIX* pixs);
L_COMP_DATA* l_generateJpegData (const(char)* fname, int ascii85flag);
L_COMP_DATA* l_generateJpegDataMem (ubyte* data, size_t nbytes, int ascii85flag);
L_COMP_DATA* l_generateG4Data (const(char)* fname, int ascii85flag);
int pixGenerateCIData (PIX* pixs, int type, int quality, int ascii85, L_COMP_DATA** pcid);
L_COMP_DATA* l_generateFlateData (const(char)* fname, int ascii85flag);
int cidConvertToPdfData (L_COMP_DATA* cid, const(char)* title, ubyte** pdata, size_t* pnbytes);
void l_CIDataDestroy (L_COMP_DATA** pcid);
void l_pdfSetG4ImageMask (int flag);
void l_pdfSetDateAndVersion (int flag);
void setPixMemoryManager (alloc_fn allocator, dealloc_fn deallocator);
PIX* pixCreate (int width, int height, int depth);
PIX* pixCreateNoInit (int width, int height, int depth);
PIX* pixCreateTemplate (const(PIX)* pixs);
PIX* pixCreateTemplateNoInit (const(PIX)* pixs);
PIX* pixCreateWithCmap (int width, int height, int depth, int initcolor);
PIX* pixCreateHeader (int width, int height, int depth);
PIX* pixClone (PIX* pixs);
void pixDestroy (PIX** ppix);
PIX* pixCopy (PIX* pixd, const(PIX)* pixs);
int pixResizeImageData (PIX* pixd, const(PIX)* pixs);
int pixCopyColormap (PIX* pixd, const(PIX)* pixs);
int pixTransferAllData (PIX* pixd, PIX** ppixs, int copytext, int copyformat);
int pixSwapAndDestroy (PIX** ppixd, PIX** ppixs);
int pixGetWidth (const(PIX)* pix);
int pixSetWidth (PIX* pix, int width);
int pixGetHeight (const(PIX)* pix);
int pixSetHeight (PIX* pix, int height);
int pixGetDepth (const(PIX)* pix);
int pixSetDepth (PIX* pix, int depth);
int pixGetDimensions (const(PIX)* pix, int* pw, int* ph, int* pd);
int pixSetDimensions (PIX* pix, int w, int h, int d);
int pixCopyDimensions (PIX* pixd, const(PIX)* pixs);
int pixGetSpp (const(PIX)* pix);
int pixSetSpp (PIX* pix, int spp);
int pixCopySpp (PIX* pixd, const(PIX)* pixs);
int pixGetWpl (const(PIX)* pix);
int pixSetWpl (PIX* pix, int wpl);
int pixGetRefcount (const(PIX)* pix);
int pixChangeRefcount (PIX* pix, int delta);
int pixGetXRes (const(PIX)* pix);
int pixSetXRes (PIX* pix, int res);
int pixGetYRes (const(PIX)* pix);
int pixSetYRes (PIX* pix, int res);
int pixGetResolution (const(PIX)* pix, int* pxres, int* pyres);
int pixSetResolution (PIX* pix, int xres, int yres);
int pixCopyResolution (PIX* pixd, const(PIX)* pixs);
int pixScaleResolution (PIX* pix, float xscale, float yscale);
int pixGetInputFormat (const(PIX)* pix);
int pixSetInputFormat (PIX* pix, int informat);
int pixCopyInputFormat (PIX* pixd, const(PIX)* pixs);
int pixSetSpecial (PIX* pix, int special);
char* pixGetText (PIX* pix);
int pixSetText (PIX* pix, const(char)* textstring);
int pixAddText (PIX* pix, const(char)* textstring);
int pixCopyText (PIX* pixd, const(PIX)* pixs);
ubyte* pixGetTextCompNew (PIX* pix, size_t* psize);
int pixSetTextCompNew (PIX* pix, const(ubyte)* data, size_t size);
PIXCMAP* pixGetColormap (PIX* pix);
int pixSetColormap (PIX* pix, PIXCMAP* colormap);
int pixDestroyColormap (PIX* pix);
uint* pixGetData (PIX* pix);
int pixSetData (PIX* pix, uint* data);
uint* pixExtractData (PIX* pixs);
int pixFreeData (PIX* pix);
void** pixGetLinePtrs (PIX* pix, int* psize);
int pixSizesEqual (const(PIX)* pix1, const(PIX)* pix2);
int pixMaxAspectRatio (PIX* pixs, float* pratio);
int pixPrintStreamInfo (FILE* fp, const(PIX)* pix, const(char)* text);
int pixGetPixel (PIX* pix, int x, int y, uint* pval);
int pixSetPixel (PIX* pix, int x, int y, uint val);
int pixGetRGBPixel (PIX* pix, int x, int y, int* prval, int* pgval, int* pbval);
int pixSetRGBPixel (PIX* pix, int x, int y, int rval, int gval, int bval);
int pixSetCmapPixel (PIX* pix, int x, int y, int rval, int gval, int bval);
int pixGetRandomPixel (PIX* pix, uint* pval, int* px, int* py);
int pixClearPixel (PIX* pix, int x, int y);
int pixFlipPixel (PIX* pix, int x, int y);
void setPixelLow (uint* line, int x, int depth, uint val);
int pixGetBlackOrWhiteVal (PIX* pixs, int op, uint* pval);
int pixClearAll (PIX* pix);
int pixSetAll (PIX* pix);
int pixSetAllGray (PIX* pix, int grayval);
int pixSetAllArbitrary (PIX* pix, uint val);
int pixSetBlackOrWhite (PIX* pixs, int op);
int pixSetComponentArbitrary (PIX* pix, int comp, int val);
int pixClearInRect (PIX* pix, BOX* box);
int pixSetInRect (PIX* pix, BOX* box);
int pixSetInRectArbitrary (PIX* pix, BOX* box, uint val);
int pixBlendInRect (PIX* pixs, BOX* box, uint val, float fract);
int pixSetPadBits (PIX* pix, int val);
int pixSetPadBitsBand (PIX* pix, int by, int bh, int val);
int pixSetOrClearBorder (PIX* pixs, int left, int right, int top, int bot, int op);
int pixSetBorderVal (PIX* pixs, int left, int right, int top, int bot, uint val);
int pixSetBorderRingVal (PIX* pixs, int dist, uint val);
int pixSetMirroredBorder (PIX* pixs, int left, int right, int top, int bot);
PIX* pixCopyBorder (PIX* pixd, PIX* pixs, int left, int right, int top, int bot);
PIX* pixAddBorder (PIX* pixs, int npix, uint val);
PIX* pixAddBlackOrWhiteBorder (PIX* pixs, int left, int right, int top, int bot, int op);
PIX* pixAddBorderGeneral (PIX* pixs, int left, int right, int top, int bot, uint val);
PIX* pixRemoveBorder (PIX* pixs, int npix);
PIX* pixRemoveBorderGeneral (PIX* pixs, int left, int right, int top, int bot);
PIX* pixRemoveBorderToSize (PIX* pixs, int wd, int hd);
PIX* pixAddMirroredBorder (PIX* pixs, int left, int right, int top, int bot);
PIX* pixAddRepeatedBorder (PIX* pixs, int left, int right, int top, int bot);
PIX* pixAddMixedBorder (PIX* pixs, int left, int right, int top, int bot);
PIX* pixAddContinuedBorder (PIX* pixs, int left, int right, int top, int bot);
int pixShiftAndTransferAlpha (PIX* pixd, PIX* pixs, float shiftx, float shifty);
PIX* pixDisplayLayersRGBA (PIX* pixs, uint val, int maxw);
PIX* pixCreateRGBImage (PIX* pixr, PIX* pixg, PIX* pixb);
PIX* pixGetRGBComponent (PIX* pixs, int comp);
int pixSetRGBComponent (PIX* pixd, PIX* pixs, int comp);
PIX* pixGetRGBComponentCmap (PIX* pixs, int comp);
int pixCopyRGBComponent (PIX* pixd, PIX* pixs, int comp);
int composeRGBPixel (int rval, int gval, int bval, uint* ppixel);
int composeRGBAPixel (int rval, int gval, int bval, int aval, uint* ppixel);
void extractRGBValues (uint pixel, int* prval, int* pgval, int* pbval);
void extractRGBAValues (uint pixel, int* prval, int* pgval, int* pbval, int* paval);
int extractMinMaxComponent (uint pixel, int type);
int pixGetRGBLine (PIX* pixs, int row, ubyte* bufr, ubyte* bufg, ubyte* bufb);
int setLineDataVal (uint* line, int j, int d, uint val);
PIX* pixEndianByteSwapNew (PIX* pixs);
int pixEndianByteSwap (PIX* pixs);
int lineEndianByteSwap (uint* datad, uint* datas, int wpl);
PIX* pixEndianTwoByteSwapNew (PIX* pixs);
int pixEndianTwoByteSwap (PIX* pixs);
int pixGetRasterData (PIX* pixs, ubyte** pdata, size_t* pnbytes);
int pixInferResolution (PIX* pix, float longside, int* pres);
int pixAlphaIsOpaque (PIX* pix, int* popaque);
ubyte** pixSetupByteProcessing (PIX* pix, int* pw, int* ph);
int pixCleanupByteProcessing (PIX* pix, ubyte** lineptrs);
void l_setAlphaMaskBorder (float val1, float val2);
int pixSetMasked (PIX* pixd, PIX* pixm, uint val);
int pixSetMaskedGeneral (PIX* pixd, PIX* pixm, uint val, int x, int y);
int pixCombineMasked (PIX* pixd, PIX* pixs, PIX* pixm);
int pixCombineMaskedGeneral (PIX* pixd, PIX* pixs, PIX* pixm, int x, int y);
int pixPaintThroughMask (PIX* pixd, PIX* pixm, int x, int y, uint val);
PIX* pixCopyWithBoxa (PIX* pixs, BOXA* boxa, int background);
int pixPaintSelfThroughMask (PIX* pixd, PIX* pixm, int x, int y, int searchdir, int mindist, int tilesize, int ntiles, int distblend);
PIX* pixMakeMaskFromVal (PIX* pixs, int val);
PIX* pixMakeMaskFromLUT (PIX* pixs, int* tab);
PIX* pixMakeArbMaskFromRGB (PIX* pixs, float rc, float gc, float bc, float thresh);
PIX* pixSetUnderTransparency (PIX* pixs, uint val, int debug_);
PIX* pixMakeAlphaFromMask (PIX* pixs, int dist, BOX** pbox);
int pixGetColorNearMaskBoundary (PIX* pixs, PIX* pixm, BOX* box, int dist, uint* pval, int debug_);
PIX* pixDisplaySelectedPixels (PIX* pixs, PIX* pixm, SEL* sel, uint val);
PIX* pixInvert (PIX* pixd, PIX* pixs);
PIX* pixOr (PIX* pixd, PIX* pixs1, PIX* pixs2);
PIX* pixAnd (PIX* pixd, PIX* pixs1, PIX* pixs2);
PIX* pixXor (PIX* pixd, PIX* pixs1, PIX* pixs2);
PIX* pixSubtract (PIX* pixd, PIX* pixs1, PIX* pixs2);
int pixZero (PIX* pix, int* pempty);
int pixForegroundFraction (PIX* pix, float* pfract);
NUMA* pixaCountPixels (PIXA* pixa);
int pixCountPixels (PIX* pixs, int* pcount, int* tab8);
int pixCountPixelsInRect (PIX* pixs, BOX* box, int* pcount, int* tab8);
NUMA* pixCountByRow (PIX* pix, BOX* box);
NUMA* pixCountByColumn (PIX* pix, BOX* box);
NUMA* pixCountPixelsByRow (PIX* pix, int* tab8);
NUMA* pixCountPixelsByColumn (PIX* pix);
int pixCountPixelsInRow (PIX* pix, int row, int* pcount, int* tab8);
NUMA* pixGetMomentByColumn (PIX* pix, int order);
int pixThresholdPixelSum (PIX* pix, int thresh, int* pabove, int* tab8);
int* makePixelSumTab8 ();
int* makePixelCentroidTab8 ();
NUMA* pixAverageByRow (PIX* pix, BOX* box, int type);
NUMA* pixAverageByColumn (PIX* pix, BOX* box, int type);
int pixAverageInRect (PIX* pixs, PIX* pixm, BOX* box, int minval, int maxval, int subsamp, float* pave);
int pixAverageInRectRGB (PIX* pixs, PIX* pixm, BOX* box, int subsamp, uint* pave);
NUMA* pixVarianceByRow (PIX* pix, BOX* box);
NUMA* pixVarianceByColumn (PIX* pix, BOX* box);
int pixVarianceInRect (PIX* pix, BOX* box, float* prootvar);
NUMA* pixAbsDiffByRow (PIX* pix, BOX* box);
NUMA* pixAbsDiffByColumn (PIX* pix, BOX* box);
int pixAbsDiffInRect (PIX* pix, BOX* box, int dir, float* pabsdiff);
int pixAbsDiffOnLine (PIX* pix, int x1, int y1, int x2, int y2, float* pabsdiff);
int pixCountArbInRect (PIX* pixs, BOX* box, int val, int factor, int* pcount);
PIX* pixMirroredTiling (PIX* pixs, int w, int h);
int pixFindRepCloseTile (PIX* pixs, BOX* box, int searchdir, int mindist, int tsize, int ntiles, BOX** pboxtile, int debug_);
NUMA* pixGetGrayHistogram (PIX* pixs, int factor);
NUMA* pixGetGrayHistogramMasked (PIX* pixs, PIX* pixm, int x, int y, int factor);
NUMA* pixGetGrayHistogramInRect (PIX* pixs, BOX* box, int factor);
NUMAA* pixGetGrayHistogramTiled (PIX* pixs, int factor, int nx, int ny);
int pixGetColorHistogram (PIX* pixs, int factor, NUMA** pnar, NUMA** pnag, NUMA** pnab);
int pixGetColorHistogramMasked (PIX* pixs, PIX* pixm, int x, int y, int factor, NUMA** pnar, NUMA** pnag, NUMA** pnab);
NUMA* pixGetCmapHistogram (PIX* pixs, int factor);
NUMA* pixGetCmapHistogramMasked (PIX* pixs, PIX* pixm, int x, int y, int factor);
NUMA* pixGetCmapHistogramInRect (PIX* pixs, BOX* box, int factor);
int pixCountRGBColorsByHash (PIX* pixs, int* pncolors);
int pixCountRGBColors (PIX* pixs, int factor, int* pncolors);
L_AMAP* pixGetColorAmapHistogram (PIX* pixs, int factor);
int amapGetCountForColor (L_AMAP* amap, uint val);
int pixGetRankValue (PIX* pixs, int factor, float rank, uint* pvalue);
int pixGetRankValueMaskedRGB (PIX* pixs, PIX* pixm, int x, int y, int factor, float rank, float* prval, float* pgval, float* pbval);
int pixGetRankValueMasked (PIX* pixs, PIX* pixm, int x, int y, int factor, float rank, float* pval, NUMA** pna);
int pixGetPixelAverage (PIX* pixs, PIX* pixm, int x, int y, int factor, uint* pval);
int pixGetPixelStats (PIX* pixs, int factor, int type, uint* pvalue);
int pixGetAverageMaskedRGB (PIX* pixs, PIX* pixm, int x, int y, int factor, int type, float* prval, float* pgval, float* pbval);
int pixGetAverageMasked (PIX* pixs, PIX* pixm, int x, int y, int factor, int type, float* pval);
int pixGetAverageTiledRGB (PIX* pixs, int sx, int sy, int type, PIX** ppixr, PIX** ppixg, PIX** ppixb);
PIX* pixGetAverageTiled (PIX* pixs, int sx, int sy, int type);
int pixRowStats (PIX* pixs, BOX* box, NUMA** pnamean, NUMA** pnamedian, NUMA** pnamode, NUMA** pnamodecount, NUMA** pnavar, NUMA** pnarootvar);
int pixColumnStats (PIX* pixs, BOX* box, NUMA** pnamean, NUMA** pnamedian, NUMA** pnamode, NUMA** pnamodecount, NUMA** pnavar, NUMA** pnarootvar);
int pixGetRangeValues (PIX* pixs, int factor, int color, int* pminval, int* pmaxval);
int pixGetExtremeValue (PIX* pixs, int factor, int type, int* prval, int* pgval, int* pbval, int* pgrayval);
int pixGetMaxValueInRect (PIX* pixs, BOX* box, uint* pmaxval, int* pxmax, int* pymax);
int pixGetMaxColorIndex (PIX* pixs, int* pmaxindex);
int pixGetBinnedComponentRange (PIX* pixs, int nbins, int factor, int color, int* pminval, int* pmaxval, uint** pcarray, int fontsize);
int pixGetRankColorArray (PIX* pixs, int nbins, int type, int factor, uint** pcarray, PIXA* pixadb, int fontsize);
int pixGetBinnedColor (PIX* pixs, PIX* pixg, int factor, int nbins, uint** pcarray, PIXA* pixadb);
PIX* pixDisplayColorArray (uint* carray, int ncolors, int side, int ncols, int fontsize);
PIX* pixRankBinByStrip (PIX* pixs, int direction, int size, int nbins, int type);
PIX* pixaGetAlignedStats (PIXA* pixa, int type, int nbins, int thresh);
int pixaExtractColumnFromEachPix (PIXA* pixa, int col, PIX* pixd);
int pixGetRowStats (PIX* pixs, int type, int nbins, int thresh, float* colvect);
int pixGetColumnStats (PIX* pixs, int type, int nbins, int thresh, float* rowvect);
int pixSetPixelColumn (PIX* pix, int col, float* colvect);
int pixThresholdForFgBg (PIX* pixs, int factor, int thresh, int* pfgval, int* pbgval);
int pixSplitDistributionFgBg (PIX* pixs, float scorefract, int factor, int* pthresh, int* pfgval, int* pbgval, PIX** ppixdb);
int pixaFindDimensions (PIXA* pixa, NUMA** pnaw, NUMA** pnah);
int pixFindAreaPerimRatio (PIX* pixs, int* tab, float* pfract);
NUMA* pixaFindPerimToAreaRatio (PIXA* pixa);
int pixFindPerimToAreaRatio (PIX* pixs, int* tab, float* pfract);
NUMA* pixaFindPerimSizeRatio (PIXA* pixa);
int pixFindPerimSizeRatio (PIX* pixs, int* tab, float* pratio);
NUMA* pixaFindAreaFraction (PIXA* pixa);
int pixFindAreaFraction (PIX* pixs, int* tab, float* pfract);
NUMA* pixaFindAreaFractionMasked (PIXA* pixa, PIX* pixm, int debug_);
int pixFindAreaFractionMasked (PIX* pixs, BOX* box, PIX* pixm, int* tab, float* pfract);
NUMA* pixaFindWidthHeightRatio (PIXA* pixa);
NUMA* pixaFindWidthHeightProduct (PIXA* pixa);
int pixFindOverlapFraction (PIX* pixs1, PIX* pixs2, int x2, int y2, int* tab, float* pratio, int* pnoverlap);
BOXA* pixFindRectangleComps (PIX* pixs, int dist, int minw, int minh);
int pixConformsToRectangle (PIX* pixs, BOX* box, int dist, int* pconforms);
PIXA* pixClipRectangles (PIX* pixs, BOXA* boxa);
PIX* pixClipRectangle (PIX* pixs, BOX* box, BOX** pboxc);
PIX* pixClipRectangleWithBorder (PIX* pixs, BOX* box, int maxbord, BOX** pboxn);
PIX* pixClipMasked (PIX* pixs, PIX* pixm, int x, int y, uint outval);
int pixCropToMatch (PIX* pixs1, PIX* pixs2, PIX** ppixd1, PIX** ppixd2);
PIX* pixCropToSize (PIX* pixs, int w, int h);
PIX* pixResizeToMatch (PIX* pixs, PIX* pixt, int w, int h);
PIX* pixSelectComponentBySize (PIX* pixs, int rankorder, int type, int connectivity, BOX** pbox);
PIX* pixFilterComponentBySize (PIX* pixs, int rankorder, int type, int connectivity, BOX** pbox);
PIX* pixMakeSymmetricMask (int w, int h, float hf, float vf, int type);
PIX* pixMakeFrameMask (int w, int h, float hf1, float hf2, float vf1, float vf2);
PIX* pixMakeCoveringOfRectangles (PIX* pixs, int maxiters);
int pixFractionFgInMask (PIX* pix1, PIX* pix2, float* pfract);
int pixClipToForeground (PIX* pixs, PIX** ppixd, BOX** pbox);
int pixTestClipToForeground (PIX* pixs, int* pcanclip);
int pixClipBoxToForeground (PIX* pixs, BOX* boxs, PIX** ppixd, BOX** pboxd);
int pixScanForForeground (PIX* pixs, BOX* box, int scanflag, int* ploc);
int pixClipBoxToEdges (PIX* pixs, BOX* boxs, int lowthresh, int highthresh, int maxwidth, int factor, PIX** ppixd, BOX** pboxd);
int pixScanForEdge (PIX* pixs, BOX* box, int lowthresh, int highthresh, int maxwidth, int factor, int scanflag, int* ploc);
NUMA* pixExtractOnLine (PIX* pixs, int x1, int y1, int x2, int y2, int factor);
float pixAverageOnLine (PIX* pixs, int x1, int y1, int x2, int y2, int factor);
NUMA* pixAverageIntensityProfile (PIX* pixs, float fract, int dir, int first, int last, int factor1, int factor2);
NUMA* pixReversalProfile (PIX* pixs, float fract, int dir, int first, int last, int minreversal, int factor1, int factor2);
int pixWindowedVarianceOnLine (PIX* pixs, int dir, int loc, int c1, int c2, int size, NUMA** pnad);
int pixMinMaxNearLine (PIX* pixs, int x1, int y1, int x2, int y2, int dist, int direction, NUMA** pnamin, NUMA** pnamax, float* pminave, float* pmaxave);
PIX* pixRankRowTransform (PIX* pixs);
PIX* pixRankColumnTransform (PIX* pixs);
PIXA* pixaCreate (int n);
PIXA* pixaCreateFromPix (PIX* pixs, int n, int cellw, int cellh);
PIXA* pixaCreateFromBoxa (PIX* pixs, BOXA* boxa, int start, int num, int* pcropwarn);
PIXA* pixaSplitPix (PIX* pixs, int nx, int ny, int borderwidth, uint bordercolor);
void pixaDestroy (PIXA** ppixa);
PIXA* pixaCopy (PIXA* pixa, int copyflag);
int pixaAddPix (PIXA* pixa, PIX* pix, int copyflag);
int pixaAddBox (PIXA* pixa, BOX* box, int copyflag);
int pixaExtendArrayToSize (PIXA* pixa, size_t size);
int pixaGetCount (PIXA* pixa);
int pixaChangeRefcount (PIXA* pixa, int delta);
PIX* pixaGetPix (PIXA* pixa, int index, int accesstype);
int pixaGetPixDimensions (PIXA* pixa, int index, int* pw, int* ph, int* pd);
BOXA* pixaGetBoxa (PIXA* pixa, int accesstype);
int pixaGetBoxaCount (PIXA* pixa);
BOX* pixaGetBox (PIXA* pixa, int index, int accesstype);
int pixaGetBoxGeometry (PIXA* pixa, int index, int* px, int* py, int* pw, int* ph);
int pixaSetBoxa (PIXA* pixa, BOXA* boxa, int accesstype);
PIX** pixaGetPixArray (PIXA* pixa);
int pixaVerifyDepth (PIXA* pixa, int* psame, int* pmaxd);
int pixaVerifyDimensions (PIXA* pixa, int* psame, int* pmaxw, int* pmaxh);
int pixaIsFull (PIXA* pixa, int* pfullpa, int* pfullba);
int pixaCountText (PIXA* pixa, int* pntext);
int pixaSetText (PIXA* pixa, const(char)* text, SARRAY* sa);
void*** pixaGetLinePtrs (PIXA* pixa, int* psize);
int pixaWriteStreamInfo (FILE* fp, PIXA* pixa);
int pixaReplacePix (PIXA* pixa, int index, PIX* pix, BOX* box);
int pixaInsertPix (PIXA* pixa, int index, PIX* pixs, BOX* box);
int pixaRemovePix (PIXA* pixa, int index);
int pixaRemovePixAndSave (PIXA* pixa, int index, PIX** ppix, BOX** pbox);
int pixaRemoveSelected (PIXA* pixa, NUMA* naindex);
int pixaInitFull (PIXA* pixa, PIX* pix, BOX* box);
int pixaClear (PIXA* pixa);
int pixaJoin (PIXA* pixad, PIXA* pixas, int istart, int iend);
PIXA* pixaInterleave (PIXA* pixa1, PIXA* pixa2, int copyflag);
int pixaaJoin (PIXAA* paad, PIXAA* paas, int istart, int iend);
PIXAA* pixaaCreate (int n);
PIXAA* pixaaCreateFromPixa (PIXA* pixa, int n, int type, int copyflag);
void pixaaDestroy (PIXAA** ppaa);
int pixaaAddPixa (PIXAA* paa, PIXA* pixa, int copyflag);
int pixaaAddPix (PIXAA* paa, int index, PIX* pix, BOX* box, int copyflag);
int pixaaAddBox (PIXAA* paa, BOX* box, int copyflag);
int pixaaGetCount (PIXAA* paa, NUMA** pna);
PIXA* pixaaGetPixa (PIXAA* paa, int index, int accesstype);
BOXA* pixaaGetBoxa (PIXAA* paa, int accesstype);
PIX* pixaaGetPix (PIXAA* paa, int index, int ipix, int accessflag);
int pixaaVerifyDepth (PIXAA* paa, int* psame, int* pmaxd);
int pixaaVerifyDimensions (PIXAA* paa, int* psame, int* pmaxw, int* pmaxh);
int pixaaIsFull (PIXAA* paa, int* pfull);
int pixaaInitFull (PIXAA* paa, PIXA* pixa);
int pixaaReplacePixa (PIXAA* paa, int index, PIXA* pixa);
int pixaaClear (PIXAA* paa);
int pixaaTruncate (PIXAA* paa);
PIXA* pixaRead (const(char)* filename);
PIXA* pixaReadStream (FILE* fp);
PIXA* pixaReadMem (const(ubyte)* data, size_t size);
int pixaWriteDebug (const(char)* fname, PIXA* pixa);
int pixaWrite (const(char)* filename, PIXA* pixa);
int pixaWriteStream (FILE* fp, PIXA* pixa);
int pixaWriteMem (ubyte** pdata, size_t* psize, PIXA* pixa);
PIXA* pixaReadBoth (const(char)* filename);
PIXAA* pixaaReadFromFiles (const(char)* dirname, const(char)* substr, int first, int nfiles);
PIXAA* pixaaRead (const(char)* filename);
PIXAA* pixaaReadStream (FILE* fp);
PIXAA* pixaaReadMem (const(ubyte)* data, size_t size);
int pixaaWrite (const(char)* filename, PIXAA* paa);
int pixaaWriteStream (FILE* fp, PIXAA* paa);
int pixaaWriteMem (ubyte** pdata, size_t* psize, PIXAA* paa);
PIXACC* pixaccCreate (int w, int h, int negflag);
PIXACC* pixaccCreateFromPix (PIX* pix, int negflag);
void pixaccDestroy (PIXACC** ppixacc);
PIX* pixaccFinal (PIXACC* pixacc, int outdepth);
PIX* pixaccGetPix (PIXACC* pixacc);
int pixaccGetOffset (PIXACC* pixacc);
int pixaccAdd (PIXACC* pixacc, PIX* pix);
int pixaccSubtract (PIXACC* pixacc, PIX* pix);
int pixaccMultConst (PIXACC* pixacc, float factor);
int pixaccMultConstAccumulate (PIXACC* pixacc, PIX* pix, float factor);
PIX* pixSelectBySize (PIX* pixs, int width, int height, int connectivity, int type, int relation, int* pchanged);
PIXA* pixaSelectBySize (PIXA* pixas, int width, int height, int type, int relation, int* pchanged);
NUMA* pixaMakeSizeIndicator (PIXA* pixa, int width, int height, int type, int relation);
PIX* pixSelectByPerimToAreaRatio (PIX* pixs, float thresh, int connectivity, int type, int* pchanged);
PIXA* pixaSelectByPerimToAreaRatio (PIXA* pixas, float thresh, int type, int* pchanged);
PIX* pixSelectByPerimSizeRatio (PIX* pixs, float thresh, int connectivity, int type, int* pchanged);
PIXA* pixaSelectByPerimSizeRatio (PIXA* pixas, float thresh, int type, int* pchanged);
PIX* pixSelectByAreaFraction (PIX* pixs, float thresh, int connectivity, int type, int* pchanged);
PIXA* pixaSelectByAreaFraction (PIXA* pixas, float thresh, int type, int* pchanged);
PIX* pixSelectByArea (PIX* pixs, float thresh, int connectivity, int type, int* pchanged);
PIXA* pixaSelectByArea (PIXA* pixas, float thresh, int type, int* pchanged);
PIX* pixSelectByWidthHeightRatio (PIX* pixs, float thresh, int connectivity, int type, int* pchanged);
PIXA* pixaSelectByWidthHeightRatio (PIXA* pixas, float thresh, int type, int* pchanged);
PIXA* pixaSelectByNumConnComp (PIXA* pixas, int nmin, int nmax, int connectivity, int* pchanged);
PIXA* pixaSelectWithIndicator (PIXA* pixas, NUMA* na, int* pchanged);
int pixRemoveWithIndicator (PIX* pixs, PIXA* pixa, NUMA* na);
int pixAddWithIndicator (PIX* pixs, PIXA* pixa, NUMA* na);
PIXA* pixaSelectWithString (PIXA* pixas, const(char)* str, int* perror);
PIX* pixaRenderComponent (PIX* pixs, PIXA* pixa, int index);
PIXA* pixaSort (PIXA* pixas, int sorttype, int sortorder, NUMA** pnaindex, int copyflag);
PIXA* pixaBinSort (PIXA* pixas, int sorttype, int sortorder, NUMA** pnaindex, int copyflag);
PIXA* pixaSortByIndex (PIXA* pixas, NUMA* naindex, int copyflag);
PIXAA* pixaSort2dByIndex (PIXA* pixas, NUMAA* naa, int copyflag);
PIXA* pixaSelectRange (PIXA* pixas, int first, int last, int copyflag);
PIXAA* pixaaSelectRange (PIXAA* paas, int first, int last, int copyflag);
PIXAA* pixaaScaleToSize (PIXAA* paas, int wd, int hd);
PIXAA* pixaaScaleToSizeVar (PIXAA* paas, NUMA* nawd, NUMA* nahd);
PIXA* pixaScaleToSize (PIXA* pixas, int wd, int hd);
PIXA* pixaScaleToSizeRel (PIXA* pixas, int delw, int delh);
PIXA* pixaScale (PIXA* pixas, float scalex, float scaley);
PIXA* pixaScaleBySampling (PIXA* pixas, float scalex, float scaley);
PIXA* pixaRotate (PIXA* pixas, float angle, int type, int incolor, int width, int height);
PIXA* pixaRotateOrth (PIXA* pixas, int rotation);
PIXA* pixaTranslate (PIXA* pixas, int hshift, int vshift, int incolor);
PIXA* pixaAddBorderGeneral (PIXA* pixad, PIXA* pixas, int left, int right, int top, int bot, uint val);
PIXA* pixaaFlattenToPixa (PIXAA* paa, NUMA** pnaindex, int copyflag);
int pixaaSizeRange (PIXAA* paa, int* pminw, int* pminh, int* pmaxw, int* pmaxh);
int pixaSizeRange (PIXA* pixa, int* pminw, int* pminh, int* pmaxw, int* pmaxh);
PIXA* pixaClipToPix (PIXA* pixas, PIX* pixs);
int pixaClipToForeground (PIXA* pixas, PIXA** ppixad, BOXA** pboxa);
int pixaGetRenderingDepth (PIXA* pixa, int* pdepth);
int pixaHasColor (PIXA* pixa, int* phascolor);
int pixaAnyColormaps (PIXA* pixa, int* phascmap);
int pixaGetDepthInfo (PIXA* pixa, int* pmaxdepth, int* psame);
PIXA* pixaConvertToSameDepth (PIXA* pixas);
PIXA* pixaConvertToGivenDepth (PIXA* pixas, int depth);
int pixaEqual (PIXA* pixa1, PIXA* pixa2, int maxdist, NUMA** pnaindex, int* psame);
int pixaSetFullSizeBoxa (PIXA* pixa);
PIX* pixaDisplay (PIXA* pixa, int w, int h);
PIX* pixaDisplayRandomCmap (PIXA* pixa, int w, int h);
PIX* pixaDisplayLinearly (PIXA* pixas, int direction, float scalefactor, int background, int spacing, int border, BOXA** pboxa);
PIX* pixaDisplayOnLattice (PIXA* pixa, int cellw, int cellh, int* pncols, BOXA** pboxa);
PIX* pixaDisplayUnsplit (PIXA* pixa, int nx, int ny, int borderwidth, uint bordercolor);
PIX* pixaDisplayTiled (PIXA* pixa, int maxwidth, int background, int spacing);
PIX* pixaDisplayTiledInRows (PIXA* pixa, int outdepth, int maxwidth, float scalefactor, int background, int spacing, int border);
PIX* pixaDisplayTiledInColumns (PIXA* pixas, int nx, float scalefactor, int spacing, int border);
PIX* pixaDisplayTiledAndScaled (PIXA* pixa, int outdepth, int tilewidth, int ncols, int background, int spacing, int border);
PIX* pixaDisplayTiledWithText (PIXA* pixa, int maxwidth, float scalefactor, int spacing, int border, int fontsize, uint textcolor);
PIX* pixaDisplayTiledByIndex (PIXA* pixa, NUMA* na, int width, int spacing, int border, int fontsize, uint textcolor);
PIX* pixaDisplayPairTiledInColumns (PIXA* pixas1, PIXA* pixas2, int nx, float scalefactor, int spacing1, int spacing2, int border1, int border2, int fontsize, int startindex, SARRAY* sa);
PIX* pixaaDisplay (PIXAA* paa, int w, int h);
PIX* pixaaDisplayByPixa (PIXAA* paa, int maxnx, float scalefactor, int hspacing, int vspacing, int border);
PIXA* pixaaDisplayTiledAndScaled (PIXAA* paa, int outdepth, int tilewidth, int ncols, int background, int spacing, int border);
PIXA* pixaConvertTo1 (PIXA* pixas, int thresh);
PIXA* pixaConvertTo8 (PIXA* pixas, int cmapflag);
PIXA* pixaConvertTo8Colormap (PIXA* pixas, int dither);
PIXA* pixaConvertTo32 (PIXA* pixas);
PIXA* pixaConstrainedSelect (PIXA* pixas, int first, int last, int nmax, int use_pairs, int copyflag);
int pixaSelectToPdf (PIXA* pixas, int first, int last, int res, float scalefactor, int type, int quality, uint color, int fontsize, const(char)* fileout);
PIXA* pixaMakeFromTiledPixa (PIXA* pixas, int w, int h, int nsamp);
PIXA* pixaMakeFromTiledPix (PIX* pixs, int w, int h, int start, int num, BOXA* boxa);
int pixGetTileCount (PIX* pix, int* pn);
PIXA* pixaDisplayMultiTiled (PIXA* pixas, int nx, int ny, int maxw, int maxh, float scalefactor, int spacing, int border);
int pixaSplitIntoFiles (PIXA* pixas, int nsplit, float scale, int outwidth, int write_pixa, int write_pix, int write_pdf);
int convertToNUpFiles (const(char)* dir, const(char)* substr, int nx, int ny, int tw, int spacing, int border, int fontsize, const(char)* outdir);
PIXA* convertToNUpPixa (const(char)* dir, const(char)* substr, int nx, int ny, int tw, int spacing, int border, int fontsize);
PIXA* pixaConvertToNUpPixa (PIXA* pixas, SARRAY* sa, int nx, int ny, int tw, int spacing, int border, int fontsize);
int pixaCompareInPdf (PIXA* pixa1, PIXA* pixa2, int nx, int ny, int tw, int spacing, int border, int fontsize, const(char)* fileout);
int pmsCreate (size_t minsize, size_t smallest, NUMA* numalloc, const(char)* logfile);
void pmsDestroy ();
void* pmsCustomAlloc (size_t nbytes);
void pmsCustomDealloc (void* data);
void* pmsGetAlloc (size_t nbytes);
int pmsGetLevelForAlloc (size_t nbytes, int* plevel);
int pmsGetLevelForDealloc (void* data, int* plevel);
void pmsLogInfo ();
int pixAddConstantGray (PIX* pixs, int val);
int pixMultConstantGray (PIX* pixs, float val);
PIX* pixAddGray (PIX* pixd, PIX* pixs1, PIX* pixs2);
PIX* pixSubtractGray (PIX* pixd, PIX* pixs1, PIX* pixs2);
PIX* pixMultiplyGray (PIX* pixs, PIX* pixg, float norm);
PIX* pixThresholdToValue (PIX* pixd, PIX* pixs, int threshval, int setval);
PIX* pixInitAccumulate (int w, int h, uint offset);
PIX* pixFinalAccumulate (PIX* pixs, uint offset, int depth);
PIX* pixFinalAccumulateThreshold (PIX* pixs, uint offset, uint threshold);
int pixAccumulate (PIX* pixd, PIX* pixs, int op);
int pixMultConstAccumulate (PIX* pixs, float factor, uint offset);
PIX* pixAbsDifference (PIX* pixs1, PIX* pixs2);
PIX* pixAddRGB (PIX* pixs1, PIX* pixs2);
PIX* pixMinOrMax (PIX* pixd, PIX* pixs1, PIX* pixs2, int type);
PIX* pixMaxDynamicRange (PIX* pixs, int type);
PIX* pixMaxDynamicRangeRGB (PIX* pixs, int type);
uint linearScaleRGBVal (uint sval, float factor);
uint logScaleRGBVal (uint sval, float* tab, float factor);
float* makeLogBase2Tab ();
float getLogBase2 (int val, float* logtab);
PIXC* pixcompCreateFromPix (PIX* pix, int comptype);
PIXC* pixcompCreateFromString (ubyte* data, size_t size, int copyflag);
PIXC* pixcompCreateFromFile (const(char)* filename, int comptype);
void pixcompDestroy (PIXC** ppixc);
PIXC* pixcompCopy (PIXC* pixcs);
int pixcompGetDimensions (PIXC* pixc, int* pw, int* ph, int* pd);
int pixcompGetParameters (PIXC* pixc, int* pxres, int* pyres, int* pcomptype, int* pcmapflag);
int pixcompDetermineFormat (int comptype, int d, int cmapflag, int* pformat);
PIX* pixCreateFromPixcomp (PIXC* pixc);
PIXAC* pixacompCreate (int n);
PIXAC* pixacompCreateWithInit (int n, int offset, PIX* pix, int comptype);
PIXAC* pixacompCreateFromPixa (PIXA* pixa, int comptype, int accesstype);
PIXAC* pixacompCreateFromFiles (const(char)* dirname, const(char)* substr, int comptype);
PIXAC* pixacompCreateFromSA (SARRAY* sa, int comptype);
void pixacompDestroy (PIXAC** ppixac);
int pixacompAddPix (PIXAC* pixac, PIX* pix, int comptype);
int pixacompAddPixcomp (PIXAC* pixac, PIXC* pixc, int copyflag);
int pixacompReplacePix (PIXAC* pixac, int index, PIX* pix, int comptype);
int pixacompReplacePixcomp (PIXAC* pixac, int index, PIXC* pixc);
int pixacompAddBox (PIXAC* pixac, BOX* box, int copyflag);
int pixacompGetCount (PIXAC* pixac);
PIXC* pixacompGetPixcomp (PIXAC* pixac, int index, int copyflag);
PIX* pixacompGetPix (PIXAC* pixac, int index);
int pixacompGetPixDimensions (PIXAC* pixac, int index, int* pw, int* ph, int* pd);
BOXA* pixacompGetBoxa (PIXAC* pixac, int accesstype);
int pixacompGetBoxaCount (PIXAC* pixac);
BOX* pixacompGetBox (PIXAC* pixac, int index, int accesstype);
int pixacompGetBoxGeometry (PIXAC* pixac, int index, int* px, int* py, int* pw, int* ph);
int pixacompGetOffset (PIXAC* pixac);
int pixacompSetOffset (PIXAC* pixac, int offset);
PIXA* pixaCreateFromPixacomp (PIXAC* pixac, int accesstype);
int pixacompJoin (PIXAC* pixacd, PIXAC* pixacs, int istart, int iend);
PIXAC* pixacompInterleave (PIXAC* pixac1, PIXAC* pixac2);
PIXAC* pixacompRead (const(char)* filename);
PIXAC* pixacompReadStream (FILE* fp);
PIXAC* pixacompReadMem (const(ubyte)* data, size_t size);
int pixacompWrite (const(char)* filename, PIXAC* pixac);
int pixacompWriteStream (FILE* fp, PIXAC* pixac);
int pixacompWriteMem (ubyte** pdata, size_t* psize, PIXAC* pixac);
int pixacompConvertToPdf (PIXAC* pixac, int res, float scalefactor, int type, int quality, const(char)* title, const(char)* fileout);
int pixacompConvertToPdfData (PIXAC* pixac, int res, float scalefactor, int type, int quality, const(char)* title, ubyte** pdata, size_t* pnbytes);
int pixacompFastConvertToPdfData (PIXAC* pixac, const(char)* title, ubyte** pdata, size_t* pnbytes);
int pixacompWriteStreamInfo (FILE* fp, PIXAC* pixac, const(char)* text);
int pixcompWriteStreamInfo (FILE* fp, PIXC* pixc, const(char)* text);
PIX* pixacompDisplayTiledAndScaled (PIXAC* pixac, int outdepth, int tilewidth, int ncols, int background, int spacing, int border);
int pixacompWriteFiles (PIXAC* pixac, const(char)* subdir);
int pixcompWriteFile (const(char)* rootname, PIXC* pixc);
PIX* pixThreshold8 (PIX* pixs, int d, int nlevels, int cmapflag);
PIX* pixRemoveColormapGeneral (PIX* pixs, int type, int ifnocmap);
PIX* pixRemoveColormap (PIX* pixs, int type);
int pixAddGrayColormap8 (PIX* pixs);
PIX* pixAddMinimalGrayColormap8 (PIX* pixs);
PIX* pixConvertRGBToLuminance (PIX* pixs);
PIX* pixConvertRGBToGrayGeneral (PIX* pixs, int type, float rwt, float gwt, float bwt);
PIX* pixConvertRGBToGray (PIX* pixs, float rwt, float gwt, float bwt);
PIX* pixConvertRGBToGrayFast (PIX* pixs);
PIX* pixConvertRGBToGrayMinMax (PIX* pixs, int type);
PIX* pixConvertRGBToGraySatBoost (PIX* pixs, int refval);
PIX* pixConvertRGBToGrayArb (PIX* pixs, float rc, float gc, float bc);
PIX* pixConvertRGBToBinaryArb (PIX* pixs, float rc, float gc, float bc, int thresh, int relation);
PIX* pixConvertGrayToColormap (PIX* pixs);
PIX* pixConvertGrayToColormap8 (PIX* pixs, int mindepth);
PIX* pixColorizeGray (PIX* pixs, uint color, int cmapflag);
PIX* pixConvertRGBToColormap (PIX* pixs, int ditherflag);
PIX* pixConvertCmapTo1 (PIX* pixs);
int pixQuantizeIfFewColors (PIX* pixs, int maxcolors, int mingraycolors, int octlevel, PIX** ppixd);
PIX* pixConvert16To8 (PIX* pixs, int type);
PIX* pixConvertGrayToFalseColor (PIX* pixs, float gamma);
PIX* pixUnpackBinary (PIX* pixs, int depth, int invert);
PIX* pixConvert1To16 (PIX* pixd, PIX* pixs, ushort val0, ushort val1);
PIX* pixConvert1To32 (PIX* pixd, PIX* pixs, uint val0, uint val1);
PIX* pixConvert1To2Cmap (PIX* pixs);
PIX* pixConvert1To2 (PIX* pixd, PIX* pixs, int val0, int val1);
PIX* pixConvert1To4Cmap (PIX* pixs);
PIX* pixConvert1To4 (PIX* pixd, PIX* pixs, int val0, int val1);
PIX* pixConvert1To8Cmap (PIX* pixs);
PIX* pixConvert1To8 (PIX* pixd, PIX* pixs, ubyte val0, ubyte val1);
PIX* pixConvert2To8 (PIX* pixs, ubyte val0, ubyte val1, ubyte val2, ubyte val3, int cmapflag);
PIX* pixConvert4To8 (PIX* pixs, int cmapflag);
PIX* pixConvert8To16 (PIX* pixs, int leftshift);
PIX* pixConvertTo2 (PIX* pixs);
PIX* pixConvert8To2 (PIX* pix);
PIX* pixConvertTo4 (PIX* pixs);
PIX* pixConvert8To4 (PIX* pix);
PIX* pixConvertTo1Adaptive (PIX* pixs);
PIX* pixConvertTo1 (PIX* pixs, int threshold);
PIX* pixConvertTo1BySampling (PIX* pixs, int factor, int threshold);
PIX* pixConvertTo8 (PIX* pixs, int cmapflag);
PIX* pixConvertTo8BySampling (PIX* pixs, int factor, int cmapflag);
PIX* pixConvertTo8Colormap (PIX* pixs, int dither);
PIX* pixConvertTo16 (PIX* pixs);
PIX* pixConvertTo32 (PIX* pixs);
PIX* pixConvertTo32BySampling (PIX* pixs, int factor);
PIX* pixConvert8To32 (PIX* pixs);
PIX* pixConvertTo8Or32 (PIX* pixs, int copyflag, int warnflag);
PIX* pixConvert24To32 (PIX* pixs);
PIX* pixConvert32To24 (PIX* pixs);
PIX* pixConvert32To16 (PIX* pixs, int type);
PIX* pixConvert32To8 (PIX* pixs, int type16, int type8);
PIX* pixRemoveAlpha (PIX* pixs);
PIX* pixAddAlphaTo1bpp (PIX* pixd, PIX* pixs);
PIX* pixConvertLossless (PIX* pixs, int d);
PIX* pixConvertForPSWrap (PIX* pixs);
PIX* pixConvertToSubpixelRGB (PIX* pixs, float scalex, float scaley, int order);
PIX* pixConvertGrayToSubpixelRGB (PIX* pixs, float scalex, float scaley, int order);
PIX* pixConvertColorToSubpixelRGB (PIX* pixs, float scalex, float scaley, int order);
void l_setNeutralBoostVal (int val);
PIX* pixConnCompTransform (PIX* pixs, int connect, int depth);
PIX* pixConnCompAreaTransform (PIX* pixs, int connect);
int pixConnCompIncrInit (PIX* pixs, int conn, PIX** ppixd, PTAA** pptaa, int* pncc);
int pixConnCompIncrAdd (PIX* pixs, PTAA* ptaa, int* pncc, float x, float y, int debug_);
int pixGetSortedNeighborValues (PIX* pixs, int x, int y, int conn, int** pneigh, int* pnvals);
PIX* pixLocToColorTransform (PIX* pixs);
PIXTILING* pixTilingCreate (PIX* pixs, int nx, int ny, int w, int h, int xoverlap, int yoverlap);
void pixTilingDestroy (PIXTILING** ppt);
int pixTilingGetCount (PIXTILING* pt, int* pnx, int* pny);
int pixTilingGetSize (PIXTILING* pt, int* pw, int* ph);
PIX* pixTilingGetTile (PIXTILING* pt, int i, int j);
int pixTilingNoStripOnPaint (PIXTILING* pt);
int pixTilingPaintTile (PIX* pixd, int i, int j, PIX* pixs, PIXTILING* pt);
PIX* pixReadStreamPng (FILE* fp);
int readHeaderPng (const(char)* filename, int* pw, int* ph, int* pbps, int* pspp, int* piscmap);
int freadHeaderPng (FILE* fp, int* pw, int* ph, int* pbps, int* pspp, int* piscmap);
int readHeaderMemPng (const(ubyte)* data, size_t size, int* pw, int* ph, int* pbps, int* pspp, int* piscmap);
int fgetPngResolution (FILE* fp, int* pxres, int* pyres);
int isPngInterlaced (const(char)* filename, int* pinterlaced);
int fgetPngColormapInfo (FILE* fp, PIXCMAP** pcmap, int* ptransparency);
int pixWritePng (const(char)* filename, PIX* pix, float gamma);
int pixWriteStreamPng (FILE* fp, PIX* pix, float gamma);
int pixSetZlibCompression (PIX* pix, int compval);
void l_pngSetReadStrip16To8 (int flag);
PIX* pixReadMemPng (const(ubyte)* filedata, size_t filesize);
int pixWriteMemPng (ubyte** pfiledata, size_t* pfilesize, PIX* pix, float gamma);
PIX* pixReadStreamPnm (FILE* fp);
int readHeaderPnm (const(char)* filename, int* pw, int* ph, int* pd, int* ptype, int* pbps, int* pspp);
int freadHeaderPnm (FILE* fp, int* pw, int* ph, int* pd, int* ptype, int* pbps, int* pspp);
int pixWriteStreamPnm (FILE* fp, PIX* pix);
int pixWriteStreamAsciiPnm (FILE* fp, PIX* pix);
int pixWriteStreamPam (FILE* fp, PIX* pix);
PIX* pixReadMemPnm (const(ubyte)* data, size_t size);
int readHeaderMemPnm (const(ubyte)* data, size_t size, int* pw, int* ph, int* pd, int* ptype, int* pbps, int* pspp);
int pixWriteMemPnm (ubyte** pdata, size_t* psize, PIX* pix);
int pixWriteMemPam (ubyte** pdata, size_t* psize, PIX* pix);
PIX* pixProjectiveSampledPta (PIX* pixs, PTA* ptad, PTA* ptas, int incolor);
PIX* pixProjectiveSampled (PIX* pixs, float* vc, int incolor);
PIX* pixProjectivePta (PIX* pixs, PTA* ptad, PTA* ptas, int incolor);
PIX* pixProjective (PIX* pixs, float* vc, int incolor);
PIX* pixProjectivePtaColor (PIX* pixs, PTA* ptad, PTA* ptas, uint colorval);
PIX* pixProjectiveColor (PIX* pixs, float* vc, uint colorval);
PIX* pixProjectivePtaGray (PIX* pixs, PTA* ptad, PTA* ptas, ubyte grayval);
PIX* pixProjectiveGray (PIX* pixs, float* vc, ubyte grayval);
PIX* pixProjectivePtaWithAlpha (PIX* pixs, PTA* ptad, PTA* ptas, PIX* pixg, float fract, int border);
int getProjectiveXformCoeffs (PTA* ptas, PTA* ptad, float** pvc);
int projectiveXformSampledPt (float* vc, int x, int y, int* pxp, int* pyp);
int projectiveXformPt (float* vc, int x, int y, float* pxp, float* pyp);
int convertFilesToPS (const(char)* dirin, const(char)* substr, int res, const(char)* fileout);
int sarrayConvertFilesToPS (SARRAY* sa, int res, const(char)* fileout);
int convertFilesFittedToPS (const(char)* dirin, const(char)* substr, float xpts, float ypts, const(char)* fileout);
int sarrayConvertFilesFittedToPS (SARRAY* sa, float xpts, float ypts, const(char)* fileout);
int writeImageCompressedToPSFile (const(char)* filein, const(char)* fileout, int res, int* pindex);
int convertSegmentedPagesToPS (const(char)* pagedir, const(char)* pagestr, int page_numpre, const(char)* maskdir, const(char)* maskstr, int mask_numpre, int numpost, int maxnum, float textscale, float imagescale, int threshold, const(char)* fileout);
int pixWriteSegmentedPageToPS (PIX* pixs, PIX* pixm, float textscale, float imagescale, int threshold, int pageno, const(char)* fileout);
int pixWriteMixedToPS (PIX* pixb, PIX* pixc, float scale, int pageno, const(char)* fileout);
int convertToPSEmbed (const(char)* filein, const(char)* fileout, int level);
int pixaWriteCompressedToPS (PIXA* pixa, const(char)* fileout, int res, int level);
int pixWriteCompressedToPS (PIX* pix, const(char)* fileout, int res, int level, int* pindex);
int pixWritePSEmbed (const(char)* filein, const(char)* fileout);
int pixWriteStreamPS (FILE* fp, PIX* pix, BOX* box, int res, float scale);
char* pixWriteStringPS (PIX* pixs, BOX* box, int res, float scale);
char* generateUncompressedPS (char* hexdata, int w, int h, int d, int psbpl, int bps, float xpt, float ypt, float wpt, float hpt, int boxflag);
int convertJpegToPSEmbed (const(char)* filein, const(char)* fileout);
int convertJpegToPS (const(char)* filein, const(char)* fileout, const(char)* operation, int x, int y, int res, float scale, int pageno, int endpage);
int convertG4ToPSEmbed (const(char)* filein, const(char)* fileout);
int convertG4ToPS (const(char)* filein, const(char)* fileout, const(char)* operation, int x, int y, int res, float scale, int pageno, int maskflag, int endpage);
int convertTiffMultipageToPS (const(char)* filein, const(char)* fileout, float fillfract);
int convertFlateToPSEmbed (const(char)* filein, const(char)* fileout);
int convertFlateToPS (const(char)* filein, const(char)* fileout, const(char)* operation, int x, int y, int res, float scale, int pageno, int endpage);
int pixWriteMemPS (ubyte** pdata, size_t* psize, PIX* pix, BOX* box, int res, float scale);
int getResLetterPage (int w, int h, float fillfract);
int getResA4Page (int w, int h, float fillfract);
void l_psWriteBoundingBox (int flag);
PTA* ptaCreate (int n);
PTA* ptaCreateFromNuma (NUMA* nax, NUMA* nay);
void ptaDestroy (PTA** ppta);
PTA* ptaCopy (PTA* pta);
PTA* ptaCopyRange (PTA* ptas, int istart, int iend);
PTA* ptaClone (PTA* pta);
int ptaEmpty (PTA* pta);
int ptaAddPt (PTA* pta, float x, float y);
int ptaInsertPt (PTA* pta, int index, int x, int y);
int ptaRemovePt (PTA* pta, int index);
int ptaGetRefcount (PTA* pta);
int ptaChangeRefcount (PTA* pta, int delta);
int ptaGetCount (PTA* pta);
int ptaGetPt (PTA* pta, int index, float* px, float* py);
int ptaGetIPt (PTA* pta, int index, int* px, int* py);
int ptaSetPt (PTA* pta, int index, float x, float y);
int ptaGetArrays (PTA* pta, NUMA** pnax, NUMA** pnay);
PTA* ptaRead (const(char)* filename);
PTA* ptaReadStream (FILE* fp);
PTA* ptaReadMem (const(ubyte)* data, size_t size);
int ptaWriteDebug (const(char)* filename, PTA* pta, int type);
int ptaWrite (const(char)* filename, PTA* pta, int type);
int ptaWriteStream (FILE* fp, PTA* pta, int type);
int ptaWriteMem (ubyte** pdata, size_t* psize, PTA* pta, int type);
PTAA* ptaaCreate (int n);
void ptaaDestroy (PTAA** pptaa);
int ptaaAddPta (PTAA* ptaa, PTA* pta, int copyflag);
int ptaaGetCount (PTAA* ptaa);
PTA* ptaaGetPta (PTAA* ptaa, int index, int accessflag);
int ptaaGetPt (PTAA* ptaa, int ipta, int jpt, float* px, float* py);
int ptaaInitFull (PTAA* ptaa, PTA* pta);
int ptaaReplacePta (PTAA* ptaa, int index, PTA* pta);
int ptaaAddPt (PTAA* ptaa, int ipta, float x, float y);
int ptaaTruncate (PTAA* ptaa);
PTAA* ptaaRead (const(char)* filename);
PTAA* ptaaReadStream (FILE* fp);
PTAA* ptaaReadMem (const(ubyte)* data, size_t size);
int ptaaWriteDebug (const(char)* filename, PTAA* ptaa, int type);
int ptaaWrite (const(char)* filename, PTAA* ptaa, int type);
int ptaaWriteStream (FILE* fp, PTAA* ptaa, int type);
int ptaaWriteMem (ubyte** pdata, size_t* psize, PTAA* ptaa, int type);
PTA* ptaSubsample (PTA* ptas, int subfactor);
int ptaJoin (PTA* ptad, PTA* ptas, int istart, int iend);
int ptaaJoin (PTAA* ptaad, PTAA* ptaas, int istart, int iend);
PTA* ptaReverse (PTA* ptas, int type);
PTA* ptaTranspose (PTA* ptas);
PTA* ptaCyclicPerm (PTA* ptas, int xs, int ys);
PTA* ptaSelectRange (PTA* ptas, int first, int last);
BOX* ptaGetBoundingRegion (PTA* pta);
int ptaGetRange (PTA* pta, float* pminx, float* pmaxx, float* pminy, float* pmaxy);
PTA* ptaGetInsideBox (PTA* ptas, BOX* box);
PTA* pixFindCornerPixels (PIX* pixs);
int ptaContainsPt (PTA* pta, int x, int y);
int ptaTestIntersection (PTA* pta1, PTA* pta2);
PTA* ptaTransform (PTA* ptas, int shiftx, int shifty, float scalex, float scaley);
int ptaPtInsidePolygon (PTA* pta, float x, float y, int* pinside);
float l_angleBetweenVectors (float x1, float y1, float x2, float y2);
int ptaPolygonIsConvex (PTA* pta, int* pisconvex);
int ptaGetMinMax (PTA* pta, float* pxmin, float* pymin, float* pxmax, float* pymax);
PTA* ptaSelectByValue (PTA* ptas, float xth, float yth, int type, int relation);
PTA* ptaCropToMask (PTA* ptas, PIX* pixm);
int ptaGetLinearLSF (PTA* pta, float* pa, float* pb, NUMA** pnafit);
int ptaGetQuadraticLSF (PTA* pta, float* pa, float* pb, float* pc, NUMA** pnafit);
int ptaGetCubicLSF (PTA* pta, float* pa, float* pb, float* pc, float* pd, NUMA** pnafit);
int ptaGetQuarticLSF (PTA* pta, float* pa, float* pb, float* pc, float* pd, float* pe, NUMA** pnafit);
int ptaNoisyLinearLSF (PTA* pta, float factor, PTA** pptad, float* pa, float* pb, float* pmederr, NUMA** pnafit);
int ptaNoisyQuadraticLSF (PTA* pta, float factor, PTA** pptad, float* pa, float* pb, float* pc, float* pmederr, NUMA** pnafit);
int applyLinearFit (float a, float b, float x, float* py);
int applyQuadraticFit (float a, float b, float c, float x, float* py);
int applyCubicFit (float a, float b, float c, float d, float x, float* py);
int applyQuarticFit (float a, float b, float c, float d, float e, float x, float* py);
int pixPlotAlongPta (PIX* pixs, PTA* pta, int outformat, const(char)* title);
PTA* ptaGetPixelsFromPix (PIX* pixs, BOX* box);
PIX* pixGenerateFromPta (PTA* pta, int w, int h);
PTA* ptaGetBoundaryPixels (PIX* pixs, int type);
PTAA* ptaaGetBoundaryPixels (PIX* pixs, int type, int connectivity, BOXA** pboxa, PIXA** ppixa);
PTAA* ptaaIndexLabeledPixels (PIX* pixs, int* pncc);
PTA* ptaGetNeighborPixLocs (PIX* pixs, int x, int y, int conn);
PTA* numaConvertToPta1 (NUMA* na);
PTA* numaConvertToPta2 (NUMA* nax, NUMA* nay);
int ptaConvertToNuma (PTA* pta, NUMA** pnax, NUMA** pnay);
PIX* pixDisplayPta (PIX* pixd, PIX* pixs, PTA* pta);
PIX* pixDisplayPtaaPattern (PIX* pixd, PIX* pixs, PTAA* ptaa, PIX* pixp, int cx, int cy);
PIX* pixDisplayPtaPattern (PIX* pixd, PIX* pixs, PTA* pta, PIX* pixp, int cx, int cy, uint color);
PTA* ptaReplicatePattern (PTA* ptas, PIX* pixp, PTA* ptap, int cx, int cy, int w, int h);
PIX* pixDisplayPtaa (PIX* pixs, PTAA* ptaa);
PTA* ptaSort (PTA* ptas, int sorttype, int sortorder, NUMA** pnaindex);
int ptaGetSortIndex (PTA* ptas, int sorttype, int sortorder, NUMA** pnaindex);
PTA* ptaSortByIndex (PTA* ptas, NUMA* naindex);
PTAA* ptaaSortByIndex (PTAA* ptaas, NUMA* naindex);
int ptaGetRankValue (PTA* pta, float fract, PTA* ptasort, int sorttype, float* pval);
PTA* ptaSort2d (PTA* pta);
int ptaEqual (PTA* pta1, PTA* pta2, int* psame);
L_ASET* l_asetCreateFromPta (PTA* pta);
int ptaRemoveDupsByAset (PTA* ptas, PTA** pptad);
int ptaUnionByAset (PTA* pta1, PTA* pta2, PTA** pptad);
int ptaIntersectionByAset (PTA* pta1, PTA* pta2, PTA** pptad);
L_HASHMAP* l_hmapCreateFromPta (PTA* pta);
int ptaRemoveDupsByHmap (PTA* ptas, PTA** pptad, L_HASHMAP** phmap);
int ptaUnionByHmap (PTA* pta1, PTA* pta2, PTA** pptad);
int ptaIntersectionByHmap (PTA* pta1, PTA* pta2, PTA** pptad);
L_PTRA* ptraCreate (int n);
void ptraDestroy (L_PTRA** ppa, int freeflag, int warnflag);
int ptraAdd (L_PTRA* pa, void* item);
int ptraInsert (L_PTRA* pa, int index, void* item, int shiftflag);
void* ptraRemove (L_PTRA* pa, int index, int flag);
void* ptraRemoveLast (L_PTRA* pa);
void* ptraReplace (L_PTRA* pa, int index, void* item, int freeflag);
int ptraSwap (L_PTRA* pa, int index1, int index2);
int ptraCompactArray (L_PTRA* pa);
int ptraReverse (L_PTRA* pa);
int ptraJoin (L_PTRA* pa1, L_PTRA* pa2);
int ptraGetMaxIndex (L_PTRA* pa, int* pmaxindex);
int ptraGetActualCount (L_PTRA* pa, int* pcount);
void* ptraGetPtrToItem (L_PTRA* pa, int index);
L_PTRAA* ptraaCreate (int n);
void ptraaDestroy (L_PTRAA** ppaa, int freeflag, int warnflag);
int ptraaGetSize (L_PTRAA* paa, int* psize);
int ptraaInsertPtra (L_PTRAA* paa, int index, L_PTRA* pa);
L_PTRA* ptraaGetPtra (L_PTRAA* paa, int index, int accessflag);
L_PTRA* ptraaFlattenToPtra (L_PTRAA* paa);
int pixQuadtreeMean (PIX* pixs, int nlevels, PIX* pix_ma, FPIXA** pfpixa);
int pixQuadtreeVariance (PIX* pixs, int nlevels, PIX* pix_ma, DPIX* dpix_msa, FPIXA** pfpixa_v, FPIXA** pfpixa_rv);
int pixMeanInRectangle (PIX* pixs, BOX* box, PIX* pixma, float* pval);
int pixVarianceInRectangle (PIX* pixs, BOX* box, PIX* pix_ma, DPIX* dpix_msa, float* pvar, float* prvar);
BOXAA* boxaaQuadtreeRegions (int w, int h, int nlevels);
int quadtreeGetParent (FPIXA* fpixa, int level, int x, int y, float* pval);
int quadtreeGetChildren (FPIXA* fpixa, int level, int x, int y, float* pval00, float* pval10, float* pval01, float* pval11);
int quadtreeMaxLevels (int w, int h);
PIX* fpixaDisplayQuadtree (FPIXA* fpixa, int factor, int fontsize);
L_QUEUE* lqueueCreate (int nalloc);
void lqueueDestroy (L_QUEUE** plq, int freeflag);
int lqueueAdd (L_QUEUE* lq, void* item);
void* lqueueRemove (L_QUEUE* lq);
int lqueueGetCount (L_QUEUE* lq);
int lqueuePrint (FILE* fp, L_QUEUE* lq);
PIX* pixRankFilter (PIX* pixs, int wf, int hf, float rank);
PIX* pixRankFilterRGB (PIX* pixs, int wf, int hf, float rank);
PIX* pixRankFilterGray (PIX* pixs, int wf, int hf, float rank);
PIX* pixMedianFilter (PIX* pixs, int wf, int hf);
PIX* pixRankFilterWithScaling (PIX* pixs, int wf, int hf, float rank, float scalefactor);
L_RBTREE* l_rbtreeCreate (int keytype);
RB_TYPE* l_rbtreeLookup (L_RBTREE* t, RB_TYPE key);
void l_rbtreeInsert (L_RBTREE* t, RB_TYPE key, RB_TYPE value);
void l_rbtreeDelete (L_RBTREE* t, RB_TYPE key);
void l_rbtreeDestroy (L_RBTREE** pt);
L_RBTREE_NODE* l_rbtreeGetFirst (L_RBTREE* t);
L_RBTREE_NODE* l_rbtreeGetNext (L_RBTREE_NODE* n);
L_RBTREE_NODE* l_rbtreeGetLast (L_RBTREE* t);
L_RBTREE_NODE* l_rbtreeGetPrev (L_RBTREE_NODE* n);
int l_rbtreeGetCount (L_RBTREE* t);
void l_rbtreePrint (FILE* fp, L_RBTREE* t);
SARRAY* pixProcessBarcodes (PIX* pixs, int format, int method, SARRAY** psaw, int debugflag);
PIXA* pixExtractBarcodes (PIX* pixs, int debugflag);
SARRAY* pixReadBarcodes (PIXA* pixa, int format, int method, SARRAY** psaw, int debugflag);
NUMA* pixReadBarcodeWidths (PIX* pixs, int method, int debugflag);
BOXA* pixLocateBarcodes (PIX* pixs, int thresh, PIX** ppixb, PIX** ppixm);
PIX* pixDeskewBarcode (PIX* pixs, PIX* pixb, BOX* box, int margin, int threshold, float* pangle, float* pconf);
NUMA* pixExtractBarcodeWidths1 (PIX* pixs, float thresh, float binfract, NUMA** pnaehist, NUMA** pnaohist, int debugflag);
NUMA* pixExtractBarcodeWidths2 (PIX* pixs, float thresh, float* pwidth, NUMA** pnac, int debugflag);
NUMA* pixExtractBarcodeCrossings (PIX* pixs, float thresh, int debugflag);
NUMA* numaQuantizeCrossingsByWidth (NUMA* nas, float binfract, NUMA** pnaehist, NUMA** pnaohist, int debugflag);
NUMA* numaQuantizeCrossingsByWindow (NUMA* nas, float ratio, float* pwidth, float* pfirstloc, NUMA** pnac, int debugflag);
PIXA* pixaReadFiles (const(char)* dirname, const(char)* substr);
PIXA* pixaReadFilesSA (SARRAY* sa);
PIX* pixRead (const(char)* filename);
PIX* pixReadWithHint (const(char)* filename, int hint);
PIX* pixReadIndexed (SARRAY* sa, int index);
PIX* pixReadStream (FILE* fp, int hint);
int pixReadHeader (const(char)* filename, int* pformat, int* pw, int* ph, int* pbps, int* pspp, int* piscmap);
int findFileFormat (const(char)* filename, int* pformat);
int findFileFormatStream (FILE* fp, int* pformat);
int findFileFormatBuffer (const(ubyte)* buf, int* pformat);
int fileFormatIsTiff (FILE* fp);
PIX* pixReadMem (const(ubyte)* data, size_t size);
int pixReadHeaderMem (const(ubyte)* data, size_t size, int* pformat, int* pw, int* ph, int* pbps, int* pspp, int* piscmap);
int writeImageFileInfo (const(char)* filename, FILE* fpout, int headeronly);
int ioFormatTest (const(char)* filename);
L_RECOG* recogCreateFromRecog (L_RECOG* recs, int scalew, int scaleh, int linew, int threshold, int maxyshift);
L_RECOG* recogCreateFromPixa (PIXA* pixa, int scalew, int scaleh, int linew, int threshold, int maxyshift);
L_RECOG* recogCreateFromPixaNoFinish (PIXA* pixa, int scalew, int scaleh, int linew, int threshold, int maxyshift);
L_RECOG* recogCreate (int scalew, int scaleh, int linew, int threshold, int maxyshift);
void recogDestroy (L_RECOG** precog);
int recogGetCount (L_RECOG* recog);
int recogSetParams (L_RECOG* recog, int type, int min_nopad, float max_wh_ratio, float max_ht_ratio);
int recogGetClassIndex (L_RECOG* recog, int val, char* text, int* pindex);
int recogStringToIndex (L_RECOG* recog, char* text, int* pindex);
int recogGetClassString (L_RECOG* recog, int index, char** pcharstr);
int l_convertCharstrToInt (const(char)* str, int* pval);
L_RECOG* recogRead (const(char)* filename);
L_RECOG* recogReadStream (FILE* fp);
L_RECOG* recogReadMem (const(ubyte)* data, size_t size);
int recogWrite (const(char)* filename, L_RECOG* recog);
int recogWriteStream (FILE* fp, L_RECOG* recog);
int recogWriteMem (ubyte** pdata, size_t* psize, L_RECOG* recog);
PIXA* recogExtractPixa (L_RECOG* recog);
BOXA* recogDecode (L_RECOG* recog, PIX* pixs, int nlevels, PIX** ppixdb);
int recogCreateDid (L_RECOG* recog, PIX* pixs);
int recogDestroyDid (L_RECOG* recog);
int recogDidExists (L_RECOG* recog);
L_RDID* recogGetDid (L_RECOG* recog);
int recogSetChannelParams (L_RECOG* recog, int nlevels);
int recogIdentifyMultiple (L_RECOG* recog, PIX* pixs, int minh, int skipsplit, BOXA** pboxa, PIXA** ppixa, PIX** ppixdb, int debugsplit);
int recogSplitIntoCharacters (L_RECOG* recog, PIX* pixs, int minh, int skipsplit, BOXA** pboxa, PIXA** ppixa, int debug_);
int recogCorrelationBestRow (L_RECOG* recog, PIX* pixs, BOXA** pboxa, NUMA** pnascore, NUMA** pnaindex, SARRAY** psachar, int debug_);
int recogCorrelationBestChar (L_RECOG* recog, PIX* pixs, BOX** pbox, float* pscore, int* pindex, char** pcharstr, PIX** ppixdb);
int recogIdentifyPixa (L_RECOG* recog, PIXA* pixa, PIX** ppixdb);
int recogIdentifyPix (L_RECOG* recog, PIX* pixs, PIX** ppixdb);
int recogSkipIdentify (L_RECOG* recog);
void rchaDestroy (L_RCHA** prcha);
void rchDestroy (L_RCH** prch);
int rchaExtract (L_RCHA* rcha, NUMA** pnaindex, NUMA** pnascore, SARRAY** psatext, NUMA** pnasample, NUMA** pnaxloc, NUMA** pnayloc, NUMA** pnawidth);
int rchExtract (L_RCH* rch, int* pindex, float* pscore, char** ptext, int* psample, int* pxloc, int* pyloc, int* pwidth);
PIX* recogProcessToIdentify (L_RECOG* recog, PIX* pixs, int pad);
SARRAY* recogExtractNumbers (L_RECOG* recog, BOXA* boxas, float scorethresh, int spacethresh, BOXAA** pbaa, NUMAA** pnaa);
PIXA* showExtractNumbers (PIX* pixs, SARRAY* sa, BOXAA* baa, NUMAA* naa, PIX** ppixdb);
int recogTrainLabeled (L_RECOG* recog, PIX* pixs, BOX* box, char* text, int debug_);
int recogProcessLabeled (L_RECOG* recog, PIX* pixs, BOX* box, char* text, PIX** ppix);
int recogAddSample (L_RECOG* recog, PIX* pix, int debug_);
PIX* recogModifyTemplate (L_RECOG* recog, PIX* pixs);
int recogAverageSamples (L_RECOG** precog, int debug_);
int pixaAccumulateSamples (PIXA* pixa, PTA* pta, PIX** ppixd, float* px, float* py);
int recogTrainingFinished (L_RECOG** precog, int modifyflag, int minsize, float minfract);
PIXA* recogFilterPixaBySize (PIXA* pixas, int setsize, int maxkeep, float max_ht_ratio, NUMA** pna);
PIXAA* recogSortPixaByClass (PIXA* pixa, int setsize);
int recogRemoveOutliers1 (L_RECOG** precog, float minscore, int mintarget, int minsize, PIX** ppixsave, PIX** ppixrem);
PIXA* pixaRemoveOutliers1 (PIXA* pixas, float minscore, int mintarget, int minsize, PIX** ppixsave, PIX** ppixrem);
int recogRemoveOutliers2 (L_RECOG** precog, float minscore, int minsize, PIX** ppixsave, PIX** ppixrem);
PIXA* pixaRemoveOutliers2 (PIXA* pixas, float minscore, int minsize, PIX** ppixsave, PIX** ppixrem);
PIXA* recogTrainFromBoot (L_RECOG* recogboot, PIXA* pixas, float minscore, int threshold, int debug_);
int recogPadDigitTrainingSet (L_RECOG** precog, int scaleh, int linew);
int recogIsPaddingNeeded (L_RECOG* recog, SARRAY** psa);
PIXA* recogAddDigitPadTemplates (L_RECOG* recog, SARRAY* sa);
L_RECOG* recogMakeBootDigitRecog (int nsamp, int scaleh, int linew, int maxyshift, int debug_);
PIXA* recogMakeBootDigitTemplates (int nsamp, int debug_);
int recogShowContent (FILE* fp, L_RECOG* recog, int index, int display);
int recogDebugAverages (L_RECOG** precog, int debug_);
int recogShowAverageTemplates (L_RECOG* recog);
int recogShowMatchesInRange (L_RECOG* recog, PIXA* pixa, float minscore, float maxscore, int display);
PIX* recogShowMatch (L_RECOG* recog, PIX* pix1, PIX* pix2, BOX* box, int index, float score);
int regTestSetup (int argc, char** argv, L_REGPARAMS** prp);
int regTestCleanup (L_REGPARAMS* rp);
int regTestCompareValues (L_REGPARAMS* rp, float val1, float val2, float delta);
int regTestCompareStrings (L_REGPARAMS* rp, ubyte* string1, size_t bytes1, ubyte* string2, size_t bytes2);
int regTestComparePix (L_REGPARAMS* rp, PIX* pix1, PIX* pix2);
int regTestCompareSimilarPix (L_REGPARAMS* rp, PIX* pix1, PIX* pix2, int mindiff, float maxfract, int printstats);
int regTestCheckFile (L_REGPARAMS* rp, const(char)* localname);
int regTestCompareFiles (L_REGPARAMS* rp, int index1, int index2);
int regTestWritePixAndCheck (L_REGPARAMS* rp, PIX* pix, int format);
int regTestWriteDataAndCheck (L_REGPARAMS* rp, void* data, size_t nbytes, const(char)* ext);
char* regTestGenLocalFilename (L_REGPARAMS* rp, int index, int format);
int pixRasterop (PIX* pixd, int dx, int dy, int dw, int dh, int op, PIX* pixs, int sx, int sy);
int pixRasteropVip (PIX* pixd, int bx, int bw, int vshift, int incolor);
int pixRasteropHip (PIX* pixd, int by, int bh, int hshift, int incolor);
PIX* pixTranslate (PIX* pixd, PIX* pixs, int hshift, int vshift, int incolor);
int pixRasteropIP (PIX* pixd, int hshift, int vshift, int incolor);
int pixRasteropFullImage (PIX* pixd, PIX* pixs, int op);
void rasteropUniLow (uint* datad, int dpixw, int dpixh, int depth, int dwpl, int dx, int dy, int dw, int dh, int op);
void rasteropLow (uint* datad, int dpixw, int dpixh, int depth, int dwpl, int dx, int dy, int dw, int dh, int op, uint* datas, int spixw, int spixh, int swpl, int sx, int sy);
void rasteropVipLow (uint* data, int pixw, int pixh, int depth, int wpl, int x, int w, int shift);
void rasteropHipLow (uint* data, int pixh, int depth, int wpl, int y, int h, int shift);
PIX* pixRotate (PIX* pixs, float angle, int type, int incolor, int width, int height);
PIX* pixEmbedForRotation (PIX* pixs, float angle, int incolor, int width, int height);
PIX* pixRotateBySampling (PIX* pixs, int xcen, int ycen, float angle, int incolor);
PIX* pixRotateBinaryNice (PIX* pixs, float angle, int incolor);
PIX* pixRotateWithAlpha (PIX* pixs, float angle, PIX* pixg, float fract);
PIX* pixRotateAM (PIX* pixs, float angle, int incolor);
PIX* pixRotateAMColor (PIX* pixs, float angle, uint colorval);
PIX* pixRotateAMGray (PIX* pixs, float angle, ubyte grayval);
PIX* pixRotateAMCorner (PIX* pixs, float angle, int incolor);
PIX* pixRotateAMColorCorner (PIX* pixs, float angle, uint fillval);
PIX* pixRotateAMGrayCorner (PIX* pixs, float angle, ubyte grayval);
PIX* pixRotateAMColorFast (PIX* pixs, float angle, uint colorval);
PIX* pixRotateOrth (PIX* pixs, int quads);
PIX* pixRotate180 (PIX* pixd, PIX* pixs);
PIX* pixRotate90 (PIX* pixs, int direction);
PIX* pixFlipLR (PIX* pixd, PIX* pixs);
PIX* pixFlipTB (PIX* pixd, PIX* pixs);
PIX* pixRotateShear (PIX* pixs, int xcen, int ycen, float angle, int incolor);
PIX* pixRotate2Shear (PIX* pixs, int xcen, int ycen, float angle, int incolor);
PIX* pixRotate3Shear (PIX* pixs, int xcen, int ycen, float angle, int incolor);
int pixRotateShearIP (PIX* pixs, int xcen, int ycen, float angle, int incolor);
PIX* pixRotateShearCenter (PIX* pixs, float angle, int incolor);
int pixRotateShearCenterIP (PIX* pixs, float angle, int incolor);
PIX* pixStrokeWidthTransform (PIX* pixs, int color, int depth, int nangles);
PIX* pixRunlengthTransform (PIX* pixs, int color, int direction, int depth);
int pixFindHorizontalRuns (PIX* pix, int y, int* xstart, int* xend, int* pn);
int pixFindVerticalRuns (PIX* pix, int x, int* ystart, int* yend, int* pn);
NUMA* pixFindMaxRuns (PIX* pix, int direction, NUMA** pnastart);
int pixFindMaxHorizontalRunOnLine (PIX* pix, int y, int* pxstart, int* psize);
int pixFindMaxVerticalRunOnLine (PIX* pix, int x, int* pystart, int* psize);
int runlengthMembershipOnLine (int* buffer, int size, int depth, int* start, int* end, int n);
int* makeMSBitLocTab (int bitval);
SARRAY* sarrayCreate (int n);
SARRAY* sarrayCreateInitialized (int n, const(char)* initstr);
SARRAY* sarrayCreateWordsFromString (const(char)* string);
SARRAY* sarrayCreateLinesFromString (const(char)* string, int blankflag);
void sarrayDestroy (SARRAY** psa);
SARRAY* sarrayCopy (SARRAY* sa);
SARRAY* sarrayClone (SARRAY* sa);
int sarrayAddString (SARRAY* sa, const(char)* string, int copyflag);
char* sarrayRemoveString (SARRAY* sa, int index);
int sarrayReplaceString (SARRAY* sa, int index, char* newstr, int copyflag);
int sarrayClear (SARRAY* sa);
int sarrayGetCount (SARRAY* sa);
char** sarrayGetArray (SARRAY* sa, int* pnalloc, int* pn);
char* sarrayGetString (SARRAY* sa, int index, int copyflag);
int sarrayGetRefcount (SARRAY* sa);
int sarrayChangeRefcount (SARRAY* sa, int delta);
char* sarrayToString (SARRAY* sa, int addnlflag);
char* sarrayToStringRange (SARRAY* sa, int first, int nstrings, int addnlflag);
SARRAY* sarrayConcatUniformly (SARRAY* sa, int n, int addnlflag);
int sarrayJoin (SARRAY* sa1, SARRAY* sa2);
int sarrayAppendRange (SARRAY* sa1, SARRAY* sa2, int start, int end);
int sarrayPadToSameSize (SARRAY* sa1, SARRAY* sa2, const(char)* padstring);
SARRAY* sarrayConvertWordsToLines (SARRAY* sa, int linesize);
int sarraySplitString (SARRAY* sa, const(char)* str, const(char)* separators);
SARRAY* sarraySelectBySubstring (SARRAY* sain, const(char)* substr);
SARRAY* sarraySelectRange (SARRAY* sain, int first, int last);
int sarrayParseRange (SARRAY* sa, int start, int* pactualstart, int* pend, int* pnewstart, const(char)* substr, int loc);
SARRAY* sarrayRead (const(char)* filename);
SARRAY* sarrayReadStream (FILE* fp);
SARRAY* sarrayReadMem (const(ubyte)* data, size_t size);
int sarrayWrite (const(char)* filename, SARRAY* sa);
int sarrayWriteStream (FILE* fp, SARRAY* sa);
int sarrayWriteStderr (SARRAY* sa);
int sarrayWriteMem (ubyte** pdata, size_t* psize, SARRAY* sa);
int sarrayAppend (const(char)* filename, SARRAY* sa);
SARRAY* getNumberedPathnamesInDirectory (const(char)* dirname, const(char)* substr, int numpre, int numpost, int maxnum);
SARRAY* getSortedPathnamesInDirectory (const(char)* dirname, const(char)* substr, int first, int nfiles);
SARRAY* convertSortedToNumberedPathnames (SARRAY* sa, int numpre, int numpost, int maxnum);
SARRAY* getFilenamesInDirectory (const(char)* dirname);
SARRAY* sarraySort (SARRAY* saout, SARRAY* sain, int sortorder);
SARRAY* sarraySortByIndex (SARRAY* sain, NUMA* naindex);
int stringCompareLexical (const(char)* str1, const(char)* str2);
L_ASET* l_asetCreateFromSarray (SARRAY* sa);
int sarrayRemoveDupsByAset (SARRAY* sas, SARRAY** psad);
int sarrayUnionByAset (SARRAY* sa1, SARRAY* sa2, SARRAY** psad);
int sarrayIntersectionByAset (SARRAY* sa1, SARRAY* sa2, SARRAY** psad);
L_HASHMAP* l_hmapCreateFromSarray (SARRAY* sa);
int sarrayRemoveDupsByHmap (SARRAY* sas, SARRAY** psad, L_HASHMAP** phmap);
int sarrayUnionByHmap (SARRAY* sa1, SARRAY* sa2, SARRAY** psad);
int sarrayIntersectionByHmap (SARRAY* sa1, SARRAY* sa2, SARRAY** psad);
SARRAY* sarrayGenerateIntegers (int n);
int sarrayLookupCSKV (SARRAY* sa, const(char)* keystring, char** pvalstring);
PIX* pixScale (PIX* pixs, float scalex, float scaley);
PIX* pixScaleToSizeRel (PIX* pixs, int delw, int delh);
PIX* pixScaleToSize (PIX* pixs, int wd, int hd);
PIX* pixScaleToResolution (PIX* pixs, float target, float assumed, float* pscalefact);
PIX* pixScaleGeneral (PIX* pixs, float scalex, float scaley, float sharpfract, int sharpwidth);
PIX* pixScaleLI (PIX* pixs, float scalex, float scaley);
PIX* pixScaleColorLI (PIX* pixs, float scalex, float scaley);
PIX* pixScaleColor2xLI (PIX* pixs);
PIX* pixScaleColor4xLI (PIX* pixs);
PIX* pixScaleGrayLI (PIX* pixs, float scalex, float scaley);
PIX* pixScaleGray2xLI (PIX* pixs);
PIX* pixScaleGray4xLI (PIX* pixs);
PIX* pixScaleGray2xLIThresh (PIX* pixs, int thresh);
PIX* pixScaleGray2xLIDither (PIX* pixs);
PIX* pixScaleGray4xLIThresh (PIX* pixs, int thresh);
PIX* pixScaleGray4xLIDither (PIX* pixs);
PIX* pixScaleBySampling (PIX* pixs, float scalex, float scaley);
PIX* pixScaleBySamplingToSize (PIX* pixs, int wd, int hd);
PIX* pixScaleByIntSampling (PIX* pixs, int factor);
PIX* pixScaleRGBToGrayFast (PIX* pixs, int factor, int color);
PIX* pixScaleRGBToBinaryFast (PIX* pixs, int factor, int thresh);
PIX* pixScaleGrayToBinaryFast (PIX* pixs, int factor, int thresh);
PIX* pixScaleSmooth (PIX* pix, float scalex, float scaley);
PIX* pixScaleSmoothToSize (PIX* pixs, int wd, int hd);
PIX* pixScaleRGBToGray2 (PIX* pixs, float rwt, float gwt, float bwt);
PIX* pixScaleAreaMap (PIX* pix, float scalex, float scaley);
PIX* pixScaleAreaMap2 (PIX* pix);
PIX* pixScaleAreaMapToSize (PIX* pixs, int wd, int hd);
PIX* pixScaleBinary (PIX* pixs, float scalex, float scaley);
PIX* pixScaleToGray (PIX* pixs, float scalefactor);
PIX* pixScaleToGrayFast (PIX* pixs, float scalefactor);
PIX* pixScaleToGray2 (PIX* pixs);
PIX* pixScaleToGray3 (PIX* pixs);
PIX* pixScaleToGray4 (PIX* pixs);
PIX* pixScaleToGray6 (PIX* pixs);
PIX* pixScaleToGray8 (PIX* pixs);
PIX* pixScaleToGray16 (PIX* pixs);
PIX* pixScaleToGrayMipmap (PIX* pixs, float scalefactor);
PIX* pixScaleMipmap (PIX* pixs1, PIX* pixs2, float scale);
PIX* pixExpandReplicate (PIX* pixs, int factor);
PIX* pixScaleGrayMinMax (PIX* pixs, int xfact, int yfact, int type);
PIX* pixScaleGrayMinMax2 (PIX* pixs, int type);
PIX* pixScaleGrayRankCascade (PIX* pixs, int level1, int level2, int level3, int level4);
PIX* pixScaleGrayRank2 (PIX* pixs, int rank);
int pixScaleAndTransferAlpha (PIX* pixd, PIX* pixs, float scalex, float scaley);
PIX* pixScaleWithAlpha (PIX* pixs, float scalex, float scaley, PIX* pixg, float fract);
PIX* pixSeedfillBinary (PIX* pixd, PIX* pixs, PIX* pixm, int connectivity);
PIX* pixSeedfillBinaryRestricted (PIX* pixd, PIX* pixs, PIX* pixm, int connectivity, int xmax, int ymax);
PIX* pixHolesByFilling (PIX* pixs, int connectivity);
PIX* pixFillClosedBorders (PIX* pixs, int connectivity);
PIX* pixExtractBorderConnComps (PIX* pixs, int connectivity);
PIX* pixRemoveBorderConnComps (PIX* pixs, int connectivity);
PIX* pixFillBgFromBorder (PIX* pixs, int connectivity);
PIX* pixFillHolesToBoundingRect (PIX* pixs, int minsize, float maxhfract, float minfgfract);
int pixSeedfillGray (PIX* pixs, PIX* pixm, int connectivity);
int pixSeedfillGrayInv (PIX* pixs, PIX* pixm, int connectivity);
int pixSeedfillGraySimple (PIX* pixs, PIX* pixm, int connectivity);
int pixSeedfillGrayInvSimple (PIX* pixs, PIX* pixm, int connectivity);
PIX* pixSeedfillGrayBasin (PIX* pixb, PIX* pixm, int delta, int connectivity);
PIX* pixDistanceFunction (PIX* pixs, int connectivity, int outdepth, int boundcond);
PIX* pixSeedspread (PIX* pixs, int connectivity);
int pixLocalExtrema (PIX* pixs, int maxmin, int minmax, PIX** ppixmin, PIX** ppixmax);
int pixSelectedLocalExtrema (PIX* pixs, int mindist, PIX** ppixmin, PIX** ppixmax);
PIX* pixFindEqualValues (PIX* pixs1, PIX* pixs2);
int pixSelectMinInConnComp (PIX* pixs, PIX* pixm, PTA** ppta, NUMA** pnav);
PIX* pixRemoveSeededComponents (PIX* pixd, PIX* pixs, PIX* pixm, int connectivity, int bordersize);
SELA* selaCreate (int n);
void selaDestroy (SELA** psela);
SEL* selCreate (int height, int width, const(char)* name);
void selDestroy (SEL** psel);
SEL* selCopy (SEL* sel);
SEL* selCreateBrick (int h, int w, int cy, int cx, int type);
SEL* selCreateComb (int factor1, int factor2, int direction);
int** create2dIntArray (int sy, int sx);
int selaAddSel (SELA* sela, SEL* sel, const(char)* selname, int copyflag);
int selaGetCount (SELA* sela);
SEL* selaGetSel (SELA* sela, int i);
char* selGetName (SEL* sel);
int selSetName (SEL* sel, const(char)* name);
int selaFindSelByName (SELA* sela, const(char)* name, int* pindex, SEL** psel);
int selGetElement (SEL* sel, int row, int col, int* ptype);
int selSetElement (SEL* sel, int row, int col, int type);
int selGetParameters (SEL* sel, int* psy, int* psx, int* pcy, int* pcx);
int selSetOrigin (SEL* sel, int cy, int cx);
int selGetTypeAtOrigin (SEL* sel, int* ptype);
char* selaGetBrickName (SELA* sela, int hsize, int vsize);
char* selaGetCombName (SELA* sela, int size, int direction);
int getCompositeParameters (int size, int* psize1, int* psize2, char** pnameh1, char** pnameh2, char** pnamev1, char** pnamev2);
SARRAY* selaGetSelnames (SELA* sela);
int selFindMaxTranslations (SEL* sel, int* pxp, int* pyp, int* pxn, int* pyn);
SEL* selRotateOrth (SEL* sel, int quads);
SELA* selaRead (const(char)* fname);
SELA* selaReadStream (FILE* fp);
SEL* selRead (const(char)* fname);
SEL* selReadStream (FILE* fp);
int selaWrite (const(char)* fname, SELA* sela);
int selaWriteStream (FILE* fp, SELA* sela);
int selWrite (const(char)* fname, SEL* sel);
int selWriteStream (FILE* fp, SEL* sel);
SEL* selCreateFromString (const(char)* text, int h, int w, const(char)* name);
char* selPrintToString (SEL* sel);
SELA* selaCreateFromFile (const(char)* filename);
SEL* selCreateFromPta (PTA* pta, int cy, int cx, const(char)* name);
SEL* selCreateFromPix (PIX* pix, int cy, int cx, const(char)* name);
SEL* selReadFromColorImage (const(char)* pathname);
SEL* selCreateFromColorPix (PIX* pixs, const(char)* selname);
SELA* selaCreateFromColorPixa (PIXA* pixa, SARRAY* sa);
PIX* selDisplayInPix (SEL* sel, int size, int gthick);
PIX* selaDisplayInPix (SELA* sela, int size, int gthick, int spacing, int ncols);
SELA* selaAddBasic (SELA* sela);
SELA* selaAddHitMiss (SELA* sela);
SELA* selaAddDwaLinear (SELA* sela);
SELA* selaAddDwaCombs (SELA* sela);
SELA* selaAddCrossJunctions (SELA* sela, float hlsize, float mdist, int norient, int debugflag);
SELA* selaAddTJunctions (SELA* sela, float hlsize, float mdist, int norient, int debugflag);
SELA* sela4ccThin (SELA* sela);
SELA* sela8ccThin (SELA* sela);
SELA* sela4and8ccThin (SELA* sela);
SEL* selMakePlusSign (int size, int linewidth);
SEL* pixGenerateSelWithRuns (PIX* pixs, int nhlines, int nvlines, int distance, int minlength, int toppix, int botpix, int leftpix, int rightpix, PIX** ppixe);
SEL* pixGenerateSelRandom (PIX* pixs, float hitfract, float missfract, int distance, int toppix, int botpix, int leftpix, int rightpix, PIX** ppixe);
SEL* pixGenerateSelBoundary (PIX* pixs, int hitdist, int missdist, int hitskip, int missskip, int topflag, int botflag, int leftflag, int rightflag, PIX** ppixe);
NUMA* pixGetRunCentersOnLine (PIX* pixs, int x, int y, int minlength);
NUMA* pixGetRunsOnLine (PIX* pixs, int x1, int y1, int x2, int y2);
PTA* pixSubsampleBoundaryPixels (PIX* pixs, int skip);
int adjacentOnPixelInRaster (PIX* pixs, int x, int y, int* pxa, int* pya);
PIX* pixDisplayHitMissSel (PIX* pixs, SEL* sel, int scalefactor, uint hitcolor, uint misscolor);
PIX* pixHShear (PIX* pixd, PIX* pixs, int yloc, float radang, int incolor);
PIX* pixVShear (PIX* pixd, PIX* pixs, int xloc, float radang, int incolor);
PIX* pixHShearCorner (PIX* pixd, PIX* pixs, float radang, int incolor);
PIX* pixVShearCorner (PIX* pixd, PIX* pixs, float radang, int incolor);
PIX* pixHShearCenter (PIX* pixd, PIX* pixs, float radang, int incolor);
PIX* pixVShearCenter (PIX* pixd, PIX* pixs, float radang, int incolor);
int pixHShearIP (PIX* pixs, int yloc, float radang, int incolor);
int pixVShearIP (PIX* pixs, int xloc, float radang, int incolor);
PIX* pixHShearLI (PIX* pixs, int yloc, float radang, int incolor);
PIX* pixVShearLI (PIX* pixs, int xloc, float radang, int incolor);
PIX* pixDeskewBoth (PIX* pixs, int redsearch);
PIX* pixDeskew (PIX* pixs, int redsearch);
PIX* pixFindSkewAndDeskew (PIX* pixs, int redsearch, float* pangle, float* pconf);
PIX* pixDeskewGeneral (PIX* pixs, int redsweep, float sweeprange, float sweepdelta, int redsearch, int thresh, float* pangle, float* pconf);
int pixFindSkew (PIX* pixs, float* pangle, float* pconf);
int pixFindSkewSweep (PIX* pixs, float* pangle, int reduction, float sweeprange, float sweepdelta);
int pixFindSkewSweepAndSearch (PIX* pixs, float* pangle, float* pconf, int redsweep, int redsearch, float sweeprange, float sweepdelta, float minbsdelta);
int pixFindSkewSweepAndSearchScore (PIX* pixs, float* pangle, float* pconf, float* pendscore, int redsweep, int redsearch, float sweepcenter, float sweeprange, float sweepdelta, float minbsdelta);
int pixFindSkewSweepAndSearchScorePivot (PIX* pixs, float* pangle, float* pconf, float* pendscore, int redsweep, int redsearch, float sweepcenter, float sweeprange, float sweepdelta, float minbsdelta, int pivot);
int pixFindSkewOrthogonalRange (PIX* pixs, float* pangle, float* pconf, int redsweep, int redsearch, float sweeprange, float sweepdelta, float minbsdelta, float confprior);
int pixFindDifferentialSquareSum (PIX* pixs, float* psum);
int pixFindNormalizedSquareSum (PIX* pixs, float* phratio, float* pvratio, float* pfract);
PIX* pixReadStreamSpix (FILE* fp);
int readHeaderSpix (const(char)* filename, int* pwidth, int* pheight, int* pbps, int* pspp, int* piscmap);
int freadHeaderSpix (FILE* fp, int* pwidth, int* pheight, int* pbps, int* pspp, int* piscmap);
int sreadHeaderSpix (const(uint)* data, size_t size, int* pwidth, int* pheight, int* pbps, int* pspp, int* piscmap);
int pixWriteStreamSpix (FILE* fp, PIX* pix);
PIX* pixReadMemSpix (const(ubyte)* data, size_t size);
int pixWriteMemSpix (ubyte** pdata, size_t* psize, PIX* pix);
int pixSerializeToMemory (PIX* pixs, uint** pdata, size_t* pnbytes);
PIX* pixDeserializeFromMemory (const(uint)* data, size_t nbytes);
L_STACK* lstackCreate (int n);
void lstackDestroy (L_STACK** plstack, int freeflag);
int lstackAdd (L_STACK* lstack, void* item);
void* lstackRemove (L_STACK* lstack);
int lstackGetCount (L_STACK* lstack);
int lstackPrint (FILE* fp, L_STACK* lstack);
L_STRCODE* strcodeCreate (int fileno);
int strcodeCreateFromFile (const(char)* filein, int fileno, const(char)* outdir);
int strcodeGenerate (L_STRCODE* strcode, const(char)* filein, const(char)* type);
int strcodeFinalize (L_STRCODE** pstrcode, const(char)* outdir);
int l_getStructStrFromFile (const(char)* filename, int field, char** pstr);
int pixFindStrokeLength (PIX* pixs, int* tab8, int* plength);
int pixFindStrokeWidth (PIX* pixs, float thresh, int* tab8, float* pwidth, NUMA** pnahisto);
NUMA* pixaFindStrokeWidth (PIXA* pixa, float thresh, int* tab8, int debug_);
PIXA* pixaModifyStrokeWidth (PIXA* pixas, float targetw);
PIX* pixModifyStrokeWidth (PIX* pixs, float width, float targetw);
PIXA* pixaSetStrokeWidth (PIXA* pixas, int width, int thinfirst, int connectivity);
PIX* pixSetStrokeWidth (PIX* pixs, int width, int thinfirst, int connectivity);
int* sudokuReadFile (const(char)* filename);
int* sudokuReadString (const(char)* str);
L_SUDOKU* sudokuCreate (int* array);
void sudokuDestroy (L_SUDOKU** psud);
int sudokuSolve (L_SUDOKU* sud);
int sudokuTestUniqueness (int* array, int* punique);
L_SUDOKU* sudokuGenerate (int* array, int seed, int minelems, int maxtries);
int sudokuOutput (L_SUDOKU* sud, int arraytype);
PIX* pixAddSingleTextblock (PIX* pixs, L_BMF* bmf, const(char)* textstr, uint val, int location, int* poverflow);
PIX* pixAddTextlines (PIX* pixs, L_BMF* bmf, const(char)* textstr, uint val, int location);
int pixSetTextblock (PIX* pixs, L_BMF* bmf, const(char)* textstr, uint val, int x0, int y0, int wtext, int firstindent, int* poverflow);
int pixSetTextline (PIX* pixs, L_BMF* bmf, const(char)* textstr, uint val, int x0, int y0, int* pwidth, int* poverflow);
PIXA* pixaAddTextNumber (PIXA* pixas, L_BMF* bmf, NUMA* na, uint val, int location);
PIXA* pixaAddTextlines (PIXA* pixas, L_BMF* bmf, SARRAY* sa, uint val, int location);
int pixaAddPixWithText (PIXA* pixa, PIX* pixs, int reduction, L_BMF* bmf, const(char)* textstr, uint val, int location);
SARRAY* bmfGetLineStrings (L_BMF* bmf, const(char)* textstr, int maxw, int firstindent, int* ph);
NUMA* bmfGetWordWidths (L_BMF* bmf, const(char)* textstr, SARRAY* sa);
int bmfGetStringWidth (L_BMF* bmf, const(char)* textstr, int* pw);
SARRAY* splitStringToParagraphs (char* textstr, int splitflag);
PIX* pixReadTiff (const(char)* filename, int n);
PIX* pixReadStreamTiff (FILE* fp, int n);
int pixWriteTiff (const(char)* filename, PIX* pix, int comptype, const(char)* modestr);
int pixWriteTiffCustom (const(char)* filename, PIX* pix, int comptype, const(char)* modestr, NUMA* natags, SARRAY* savals, SARRAY* satypes, NUMA* nasizes);
int pixWriteStreamTiff (FILE* fp, PIX* pix, int comptype);
int pixWriteStreamTiffWA (FILE* fp, PIX* pix, int comptype, const(char)* modestr);
PIX* pixReadFromMultipageTiff (const(char)* fname, size_t* poffset);
PIXA* pixaReadMultipageTiff (const(char)* filename);
int pixaWriteMultipageTiff (const(char)* fname, PIXA* pixa);
int writeMultipageTiff (const(char)* dirin, const(char)* substr, const(char)* fileout);
int writeMultipageTiffSA (SARRAY* sa, const(char)* fileout);
int fprintTiffInfo (FILE* fpout, const(char)* tiffile);
int tiffGetCount (FILE* fp, int* pn);
int getTiffResolution (FILE* fp, int* pxres, int* pyres);
int readHeaderTiff (const(char)* filename, int n, int* pw, int* ph, int* pbps, int* pspp, int* pres, int* pcmap, int* pformat);
int freadHeaderTiff (FILE* fp, int n, int* pw, int* ph, int* pbps, int* pspp, int* pres, int* pcmap, int* pformat);
int readHeaderMemTiff (const(ubyte)* cdata, size_t size, int n, int* pw, int* ph, int* pbps, int* pspp, int* pres, int* pcmap, int* pformat);
int findTiffCompression (FILE* fp, int* pcomptype);
int extractG4DataFromFile (const(char)* filein, ubyte** pdata, size_t* pnbytes, int* pw, int* ph, int* pminisblack);
PIX* pixReadMemTiff (const(ubyte)* cdata, size_t size, int n);
PIX* pixReadMemFromMultipageTiff (const(ubyte)* cdata, size_t size, size_t* poffset);
PIXA* pixaReadMemMultipageTiff (const(ubyte)* data, size_t size);
int pixaWriteMemMultipageTiff (ubyte** pdata, size_t* psize, PIXA* pixa);
int pixWriteMemTiff (ubyte** pdata, size_t* psize, PIX* pix, int comptype);
int pixWriteMemTiffCustom (ubyte** pdata, size_t* psize, PIX* pix, int comptype, NUMA* natags, SARRAY* savals, SARRAY* satypes, NUMA* nasizes);
int setMsgSeverity (int newsev);
int returnErrorInt (const(char)* msg, const(char)* procname, int ival);
float returnErrorFloat (const(char)* msg, const(char)* procname, float fval);
void* returnErrorPtr (const(char)* msg, const(char)* procname, void* pval);
void leptSetStderrHandler (void function (const(char)*) handler);
void lept_stderr (const(char)* fmt, ...);
int filesAreIdentical (const(char)* fname1, const(char)* fname2, int* psame);
ushort convertOnLittleEnd16 (ushort shortin);
ushort convertOnBigEnd16 (ushort shortin);
uint convertOnLittleEnd32 (uint wordin);
uint convertOnBigEnd32 (uint wordin);
int fileCorruptByDeletion (const(char)* filein, float loc, float size, const(char)* fileout);
int fileCorruptByMutation (const(char)* filein, float loc, float size, const(char)* fileout);
int fileReplaceBytes (const(char)* filein, int start, int nbytes, ubyte* newdata, size_t newsize, const(char)* fileout);
int genRandomIntOnInterval (int start, int end, int seed, int* pval);
int lept_roundftoi (float fval);
int l_hashStringToUint64 (const(char)* str, ulong* phash);
int l_hashStringToUint64Fast (const(char)* str, ulong* phash);
int l_hashPtToUint64 (int x, int y, ulong* phash);
int l_hashFloat64ToUint64 (double val, ulong* phash);
int findNextLargerPrime (int start, uint* pprime);
int lept_isPrime (ulong n, int* pis_prime, uint* pfactor);
uint convertIntToGrayCode (uint val);
uint convertGrayCodeToInt (uint val);
char* getLeptonicaVersion ();
void startTimer ();
float stopTimer ();
L_TIMER startTimerNested ();
float stopTimerNested (L_TIMER rusage_start);
void l_getCurrentTime (int* sec, int* usec);
L_WALLTIMER* startWallTimer ();
float stopWallTimer (L_WALLTIMER** ptimer);
char* l_getFormattedDate ();
char* stringNew (const(char)* src);
int stringCopy (char* dest, const(char)* src, int n);
char* stringCopySegment (const(char)* src, int start, int nbytes);
int stringReplace (char** pdest, const(char)* src);
int stringLength (const(char)* src, size_t size);
int stringCat (char* dest, size_t size, const(char)* src);
char* stringConcatNew (const(char)* first, ...);
char* stringJoin (const(char)* src1, const(char)* src2);
int stringJoinIP (char** psrc1, const(char)* src2);
char* stringReverse (const(char)* src);
char* strtokSafe (char* cstr, const(char)* seps, char** psaveptr);
int stringSplitOnToken (char* cstr, const(char)* seps, char** phead, char** ptail);
int stringCheckForChars (const(char)* src, const(char)* chars, int* pfound);
char* stringRemoveChars (const(char)* src, const(char)* remchars);
char* stringReplaceEachSubstr (const(char)* src, const(char)* sub1, const(char)* sub2, int* pcount);
char* stringReplaceSubstr (const(char)* src, const(char)* sub1, const(char)* sub2, int* ploc, int* pfound);
L_DNA* stringFindEachSubstr (const(char)* src, const(char)* sub);
int stringFindSubstr (const(char)* src, const(char)* sub, int* ploc);
ubyte* arrayReplaceEachSequence (const(ubyte)* datas, size_t dataslen, const(ubyte)* seq, size_t seqlen, const(ubyte)* newseq, size_t newseqlen, size_t* pdatadlen, int* pcount);
L_DNA* arrayFindEachSequence (const(ubyte)* data, size_t datalen, const(ubyte)* sequence, size_t seqlen);
int arrayFindSequence (const(ubyte)* data, size_t datalen, const(ubyte)* sequence, size_t seqlen, int* poffset, int* pfound);
void* reallocNew (void** pindata, size_t oldsize, size_t newsize);
ubyte* l_binaryRead (const(char)* filename, size_t* pnbytes);
ubyte* l_binaryReadStream (FILE* fp, size_t* pnbytes);
ubyte* l_binaryReadSelect (const(char)* filename, size_t start, size_t nbytes, size_t* pnread);
ubyte* l_binaryReadSelectStream (FILE* fp, size_t start, size_t nbytes, size_t* pnread);
int l_binaryWrite (const(char)* filename, const(char)* operation, const(void)* data, size_t nbytes);
size_t nbytesInFile (const(char)* filename);
size_t fnbytesInFile (FILE* fp);
ubyte* l_binaryCopy (const(ubyte)* datas, size_t size);
int l_binaryCompare (const(ubyte)* data1, size_t size1, const(ubyte)* data2, size_t size2, int* psame);
int fileCopy (const(char)* srcfile, const(char)* newfile);
int fileConcatenate (const(char)* srcfile, const(char)* destfile);
int fileAppendString (const(char)* filename, const(char)* str);
int fileSplitLinesUniform (const(char)* filename, int n, int save_empty, const(char)* rootpath, const(char)* ext);
FILE* fopenReadStream (const(char)* filename);
FILE* fopenWriteStream (const(char)* filename, const(char)* modestring);
FILE* fopenReadFromMemory (const(ubyte)* data, size_t size);
FILE* fopenWriteWinTempfile ();
FILE* lept_fopen (const(char)* filename, const(char)* mode);
int lept_fclose (FILE* fp);
void* lept_calloc (size_t nmemb, size_t size);
void lept_free (void* ptr);
int lept_mkdir (const(char)* subdir);
int lept_rmdir (const(char)* subdir);
void lept_direxists (const(char)* dir, int* pexists);
int lept_rm_match (const(char)* subdir, const(char)* substr);
int lept_rm (const(char)* subdir, const(char)* tail);
int lept_rmfile (const(char)* filepath);
int lept_mv (const(char)* srcfile, const(char)* newdir, const(char)* newtail, char** pnewpath);
int lept_cp (const(char)* srcfile, const(char)* newdir, const(char)* newtail, char** pnewpath);
void callSystemDebug (const(char)* cmd);
int splitPathAtDirectory (const(char)* pathname, char** pdir, char** ptail);
int splitPathAtExtension (const(char)* pathname, char** pbasename, char** pextension);
char* pathJoin (const(char)* dir, const(char)* fname);
char* appendSubdirs (const(char)* basedir, const(char)* subdirs);
int convertSepCharsInPath (char* path, int type);
char* genPathname (const(char)* dir, const(char)* fname);
int makeTempDirname (char* result, size_t nbytes, const(char)* subdir);
int modifyTrailingSlash (char* path, size_t nbytes, int flag);
char* l_makeTempFilename ();
int extractNumberFromFilename (const(char)* fname, int numpre, int numpost);
PIX* pixSimpleCaptcha (PIX* pixs, int border, int nterms, uint seed, uint color, int cmapflag);
PIX* pixRandomHarmonicWarp (PIX* pixs, float xmag, float ymag, float xfreq, float yfreq, int nx, int ny, uint seed, int grayval);
PIX* pixWarpStereoscopic (PIX* pixs, int zbend, int zshiftt, int zshiftb, int ybendt, int ybendb, int redleft);
PIX* pixStretchHorizontal (PIX* pixs, int dir, int type, int hmax, int operation, int incolor);
PIX* pixStretchHorizontalSampled (PIX* pixs, int dir, int type, int hmax, int incolor);
PIX* pixStretchHorizontalLI (PIX* pixs, int dir, int type, int hmax, int incolor);
PIX* pixQuadraticVShear (PIX* pixs, int dir, int vmaxt, int vmaxb, int operation, int incolor);
PIX* pixQuadraticVShearSampled (PIX* pixs, int dir, int vmaxt, int vmaxb, int incolor);
PIX* pixQuadraticVShearLI (PIX* pixs, int dir, int vmaxt, int vmaxb, int incolor);
PIX* pixStereoFromPair (PIX* pix1, PIX* pix2, float rwt, float gwt, float bwt);
L_WSHED* wshedCreate (PIX* pixs, PIX* pixm, int mindepth, int debugflag);
void wshedDestroy (L_WSHED** pwshed);
int wshedApply (L_WSHED* wshed);
int wshedBasins (L_WSHED* wshed, PIXA** ppixa, NUMA** pnalevels);
PIX* wshedRenderFill (L_WSHED* wshed);
PIX* wshedRenderColors (L_WSHED* wshed);
int pixaWriteWebPAnim (const(char)* filename, PIXA* pixa, int loopcount, int duration, int quality, int lossless);
int pixaWriteStreamWebPAnim (FILE* fp, PIXA* pixa, int loopcount, int duration, int quality, int lossless);
int pixaWriteMemWebPAnim (ubyte** pencdata, size_t* pencsize, PIXA* pixa, int loopcount, int duration, int quality, int lossless);
PIX* pixReadStreamWebP (FILE* fp);
PIX* pixReadMemWebP (const(ubyte)* filedata, size_t filesize);
int readHeaderWebP (const(char)* filename, int* pw, int* ph, int* pspp);
int readHeaderMemWebP (const(ubyte)* data, size_t size, int* pw, int* ph, int* pspp);
int pixWriteWebP (const(char)* filename, PIX* pixs, int quality, int lossless);
int pixWriteStreamWebP (FILE* fp, PIX* pixs, int quality, int lossless);
int pixWriteMemWebP (ubyte** pencdata, size_t* pencsize, PIX* pixs, int quality, int lossless);
int l_jpegSetQuality (int new_quality);
void setLeptDebugOK (int allow);
int pixaWriteFiles (const(char)* rootname, PIXA* pixa, int format);
int pixWriteDebug (const(char)* fname, PIX* pix, int format);
int pixWrite (const(char)* fname, PIX* pix, int format);
int pixWriteAutoFormat (const(char)* filename, PIX* pix);
int pixWriteStream (FILE* fp, PIX* pix, int format);
int pixWriteImpliedFormat (const(char)* filename, PIX* pix, int quality, int progressive);
int pixChooseOutputFormat (PIX* pix);
int getImpliedFileFormat (const(char)* filename);
int pixGetAutoFormat (PIX* pix, int* pformat);
const(char)* getFormatExtension (int format);
int pixWriteMem (ubyte** pdata, size_t* psize, PIX* pix, int format);
int l_fileDisplay (const(char)* fname, int x, int y, float scale);
int pixDisplay (PIX* pixs, int x, int y);
int pixDisplayWithTitle (PIX* pixs, int x, int y, const(char)* title, int dispflag);
PIX* pixMakeColorSquare (uint color, int size, int addlabel, int location, uint textcolor);
void l_chooseDisplayProg (int selection);
void changeFormatForMissingLib (int* pformat);
int pixDisplayWrite (PIX* pixs, int reduction);
ubyte* zlibCompress (const(ubyte)* datain, size_t nin, size_t* pnout);
ubyte* zlibUncompress (const(ubyte)* datain, size_t nin, size_t* pnout);

/* __cplusplus */
/* NO_PROTOS */

/* LEPTONICA_ALLHEADERS_H */
